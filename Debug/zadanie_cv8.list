
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08007688  08007688  00017688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08007a40  08007a40  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a40  08007a40  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08007a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000238  08007c80  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08007c80  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cabb  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022e4  00000000  00000000  0002cd23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002f008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  0002f918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e56b  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000881a  00000000  00000000  0004e68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7dca  00000000  00000000  00056ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fec6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000309c  00000000  00000000  000fecec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800766c 	.word	0x0800766c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800766c 	.word	0x0800766c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DISPLAY_displayCurStr>:
void updateCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updateShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resetAllDigits();
 8000c86:	f000 f8bf 	bl	8000e08 <resetAllDigits>

	updateAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - segVal_ASCII_start] );
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <DISPLAY_displayCurStr+0x7c>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	f003 f9bd 	bl	8004014 <__locale_ctype_ptr>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d102      	bne.n	8000cb2 <DISPLAY_displayCurStr+0x32>
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	e000      	b.n	8000cb4 <DISPLAY_displayCurStr+0x34>
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	222d      	movs	r2, #45	; 0x2d
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <DISPLAY_displayCurStr+0x80>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f821 	bl	8000d04 <updateAlphanumChar>
	updateDecimalPoint(curActDig);
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f848 	bl	8000d5c <updateDecimalPoint>
	setDigit(curActDig);
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f861 	bl	8000d98 <setDigit>
	curActDig++;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	curActDig %= 4;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <DISPLAY_displayCurStr+0x78>)
 8000cee:	701a      	strb	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000255 	.word	0x20000255
 8000cfc:	20000284 	.word	0x20000284
 8000d00:	080076c4 	.word	0x080076c4

08000d04 <updateAlphanumChar>:

void updateAlphanumChar(uint8_t segmentValues){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	resetAllSegments();
 8000d0e:	f000 f85b 	bl	8000dc8 <resetAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e015      	b.n	8000d44 <updateAlphanumChar+0x40>
		if(segmentValues & (0x01<<i)) LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	fa42 f303 	asr.w	r3, r2, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00a      	beq.n	8000d3e <updateAlphanumChar+0x3a>
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <updateAlphanumChar+0x50>)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <updateAlphanumChar+0x54>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f7ff ff93 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	dde6      	ble.n	8000d18 <updateAlphanumChar+0x14>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000004 	.word	0x20000004
 8000d58:	08007714 	.word	0x08007714

08000d5c <updateDecimalPoint>:

void updateDecimalPoint(uint8_t curActDig){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	if(decSepPos == (curPos + curActDig)){
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <updateDecimalPoint+0x30>)
 8000d68:	f993 3000 	ldrsb.w	r3, [r3]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <updateDecimalPoint+0x34>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	440b      	add	r3, r1
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d103      	bne.n	8000d84 <updateDecimalPoint+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_DP_Port, (uint32_t)seg_DP_Pin);
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <updateDecimalPoint+0x38>)
 8000d80:	f7ff ff70 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	}
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000002 	.word	0x20000002
 8000d90:	20000254 	.word	0x20000254
 8000d94:	48000400 	.word	0x48000400

08000d98 <setDigit>:
//Turns required digit ON
void setDigit(uint8_t pos){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)dig_Ports[pos], (uint32_t)dig_Pins[pos]);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <setDigit+0x28>)
 8000da6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <setDigit+0x2c>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff ff48 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000024 	.word	0x20000024
 8000dc4:	08007734 	.word	0x08007734

08000dc8 <resetAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resetAllSegments(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_SEG; i++){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e00d      	b.n	8000df0 <resetAllSegments+0x28>
		LL_GPIO_SetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <resetAllSegments+0x38>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <resetAllSegments+0x3c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff ff2f 	bl	8000c48 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<NUM_SEG; i++){
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b07      	cmp	r3, #7
 8000df4:	ddee      	ble.n	8000dd4 <resetAllSegments+0xc>
	}
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000004 	.word	0x20000004
 8000e04:	08007714 	.word	0x08007714

08000e08 <resetAllDigits>:

/* Reset (turn-off) all digits*/
void resetAllDigits(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_DIG; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e00d      	b.n	8000e30 <resetAllDigits+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)dig_Ports[i], (uint32_t)dig_Pins[i]);
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <resetAllDigits+0x38>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e1c:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <resetAllDigits+0x3c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff ff1d 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<NUM_DIG; i++){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	ddee      	ble.n	8000e14 <resetAllDigits+0xc>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000024 	.word	0x20000024
 8000e44:	08007734 	.word	0x08007734

08000e48 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	//static uint8_t shiftDir = LEFT_TO_RIGHT;

	updateCurPos(&curPos, shiftDir);
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <DISPLAY_shiftCurStr+0x2c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <DISPLAY_shiftCurStr+0x30>)
 8000e54:	f000 f812 	bl	8000e7c <updateCurPos>
	updateShiftDir(curPos, &shiftDir);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <DISPLAY_shiftCurStr+0x30>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4905      	ldr	r1, [pc, #20]	; (8000e74 <DISPLAY_shiftCurStr+0x2c>)
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f828 	bl	8000eb4 <updateShiftDir>
	setCurStr(curPos);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <DISPLAY_shiftCurStr+0x30>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f841 	bl	8000ef0 <setCurStr>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000001 	.word	0x20000001
 8000e78:	20000254 	.word	0x20000254

08000e7c <updateCurPos>:

void updateCurPos(uint8_t *prevPos, uint8_t shiftDir){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <updateCurPos+0x20>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	e005      	b.n	8000ea8 <updateCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	701a      	strb	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <updateShiftDir>:

void updateShiftDir(uint8_t curPos, uint8_t *shiftDir){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <updateShiftDir+0x38>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	db02      	blt.n	8000ed2 <updateShiftDir+0x1e>
		*shiftDir =  RIGHT_TO_LEFT;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <updateShiftDir+0x2a>
		*shiftDir = LEFT_TO_RIGHT;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
	}
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000

08000ef0 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e00a      	b.n	8000f16 <setCurStr+0x26>
		curStr[i] = complStr[curPos + i];
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	441a      	add	r2, r3
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <setCurStr+0x38>)
 8000f0a:	5c89      	ldrb	r1, [r1, r2]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <setCurStr+0x3c>)
 8000f0e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3301      	adds	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d9f1      	bls.n	8000f00 <setCurStr+0x10>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20000288 	.word	0x20000288
 8000f2c:	20000284 	.word	0x20000284

08000f30 <DISPLAY_setCompStr>:

//Function to change the complete string which is continuously being displayed on the display
void DISPLAY_setCompStr(uint8_t *newComplStr,uint8_t size){
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	//size - size of string without '\0'
	//determine position of the decimal point and parse string
	decSepPos = -5;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <DISPLAY_setCompStr+0xa8>)
 8000f3e:	22fb      	movs	r2, #251	; 0xfb
 8000f40:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i<size; i++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e029      	b.n	8000f9c <DISPLAY_setCompStr+0x6c>
		if(newComplStr[i] == '.'){
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2e      	cmp	r3, #46	; 0x2e
 8000f52:	d106      	bne.n	8000f62 <DISPLAY_setCompStr+0x32>
			decSepPos = i - 1; //-1 because i want it to be displayed on digit(its DP_segment) together with the previous char
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	b25a      	sxtb	r2, r3
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <DISPLAY_setCompStr+0xa8>)
 8000f60:	701a      	strb	r2, [r3, #0]
		}

		if(decSepPos == -5){
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <DISPLAY_setCompStr+0xa8>)
 8000f64:	f993 3000 	ldrsb.w	r3, [r3]
 8000f68:	f113 0f05 	cmn.w	r3, #5
 8000f6c:	d109      	bne.n	8000f82 <DISPLAY_setCompStr+0x52>
			complStr[i] = newComplStr[i];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	7819      	ldrb	r1, [r3, #0]
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <DISPLAY_setCompStr+0xac>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e009      	b.n	8000f96 <DISPLAY_setCompStr+0x66>
		}
		else{

			complStr[i] = newComplStr[i+1];
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <DISPLAY_setCompStr+0xac>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<size; i++){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbd1      	blt.n	8000f48 <DISPLAY_setCompStr+0x18>
		}
	}


	complStrLen = (decSepPos == -5) ? size : (size - 1);  //(size-1) because '.' was extracted
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <DISPLAY_setCompStr+0xa8>)
 8000fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8000faa:	f113 0f05 	cmn.w	r3, #5
 8000fae:	d003      	beq.n	8000fb8 <DISPLAY_setCompStr+0x88>
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e000      	b.n	8000fba <DISPLAY_setCompStr+0x8a>
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <DISPLAY_setCompStr+0xb0>)
 8000fbc:	7013      	strb	r3, [r2, #0]
	complStr[complStrLen] = '\0';
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <DISPLAY_setCompStr+0xb0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <DISPLAY_setCompStr+0xac>)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000002 	.word	0x20000002
 8000fdc:	20000288 	.word	0x20000288
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <DISPLAY_resetCurPos>:

void DISPLAY_resetCurPos(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	curPos = 1; //this way it starts from the real beginning not from the second position
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <DISPLAY_resetCurPos+0x1c>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
	shiftDir = RIGHT_TO_LEFT;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <DISPLAY_resetCurPos+0x20>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000254 	.word	0x20000254
 8001004:	20000001 	.word	0x20000001

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000

0800114c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <LL_SYSCFG_SetEXTISource+0x58>)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	3302      	adds	r3, #2
 800115e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	43db      	mvns	r3, r3
 8001168:	ea02 0103 	and.w	r1, r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	fa03 f202 	lsl.w	r2, r3, r2
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <LL_SYSCFG_SetEXTISource+0x58>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	430a      	orrs	r2, r1
 8001192:	3302      	adds	r3, #2
 8001194:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40010000 	.word	0x40010000

080011a8 <LL_GPIO_SetPinMode>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	613b      	str	r3, [r7, #16]
  return result;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2103      	movs	r1, #3
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	61bb      	str	r3, [r7, #24]
  return result;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	431a      	orrs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_GPIO_SetPinPull>:
{
 8001206:	b480      	push	{r7}
 8001208:	b089      	sub	sp, #36	; 0x24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	613b      	str	r3, [r7, #16]
  return result;
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2103      	movs	r1, #3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	401a      	ands	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	61bb      	str	r3, [r7, #24]
  return result;
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	431a      	orrs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	; 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_GPIO_ResetOutputPin>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
 80012a0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012a6:	f7ff ff39 	bl	800111c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012ae:	f7ff ff35 	bl	800111c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80012b2:	f641 119f 	movw	r1, #6559	; 0x199f
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f7ff ffd3 	bl	8001264 <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_3_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit_1_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 80012be:	2133      	movs	r1, #51	; 0x33
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <MX_GPIO_Init+0xf0>)
 80012c2:	f7ff ffcf 	bl	8001264 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80012c6:	f641 139f 	movw	r3, #6559	; 0x199f
 80012ca:	607b      	str	r3, [r7, #4]
                          |digit_2_Pin|digit_time_Pin|segment_C_Pin|segment_E_Pin
                          |digit_3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f002 f8d9 	bl	800349a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit_1_Pin|segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 80012e8:	2333      	movs	r3, #51	; 0x33
 80012ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012ec:	2301      	movs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	481b      	ldr	r0, [pc, #108]	; (8001370 <MX_GPIO_Init+0xf0>)
 8001302:	f002 f8ca 	bl	800349a <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001306:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff1e 	bl	800114c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_PULL_UP);
 8001310:	2201      	movs	r2, #1
 8001312:	2108      	movs	r1, #8
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_GPIO_Init+0xf0>)
 8001316:	f7ff ff76 	bl	8001206 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_MODE_INPUT);
 800131a:	2200      	movs	r2, #0
 800131c:	2108      	movs	r1, #8
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_GPIO_Init+0xf0>)
 8001320:	f7ff ff42 	bl	80011a8 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001324:	2308      	movs	r3, #8
 8001326:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001338:	2302      	movs	r3, #2
 800133a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4618      	mov	r0, r3
 8001344:	f001 febc 	bl	80030c0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001348:	f7ff fe5e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800134c:	4603      	mov	r3, r0
 800134e:	2200      	movs	r2, #0
 8001350:	2101      	movs	r1, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff feae 	bl	80010b4 <NVIC_EncodePriority>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	2009      	movs	r0, #9
 800135e:	f7ff fe7f 	bl	8001060 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001362:	2009      	movs	r0, #9
 8001364:	f7ff fe5e 	bl	8001024 <__NVIC_EnableIRQ>

}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	48000400 	.word	0x48000400

08001374 <hts221_read_byte>:
#include "hts221.h"

uint8_t hts221_addres = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <hts221_read_byte+0x30>)
 8001384:	7819      	ldrb	r1, [r3, #0]
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f107 000f 	add.w	r0, r7, #15
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	460b      	mov	r3, r1
 8001392:	2101      	movs	r1, #1
 8001394:	f000 fbc8 	bl	8001b28 <i2c_master_read>
 8001398:	4603      	mov	r3, r0
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000034 	.word	0x20000034

080013a8 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <hts221_write_byte+0x28>)
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	79f9      	ldrb	r1, [r7, #7]
 80013be:	79b8      	ldrb	r0, [r7, #6]
 80013c0:	2300      	movs	r3, #0
 80013c2:	f000 fb6d 	bl	8001aa0 <i2c_master_write>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000034 	.word	0x20000034

080013d4 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
 80013e0:	4613      	mov	r3, r2
 80013e2:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <hts221_readArray+0x2c>)
 80013e6:	7818      	ldrb	r0, [r3, #0]
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	78b9      	ldrb	r1, [r7, #2]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fb98 	bl	8001b28 <i2c_master_read>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000034 	.word	0x20000034

08001404 <hts221_get_temp>:


float hts221_get_temp()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
	// return [°C]

	uint8_t MSB_Tx = hts221_read_byte(HTS221_ADDRESS_MSB_T0_T1_degC_x8);
 800140a:	2035      	movs	r0, #53	; 0x35
 800140c:	f7ff ffb2 	bl	8001374 <hts221_read_byte>
 8001410:	4603      	mov	r3, r0
 8001412:	75fb      	strb	r3, [r7, #23]
	int16_t MSB_T0 = ((int16_t) (MSB_Tx & 0b00000011)) << 8;
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21b      	sxth	r3, r3
 800141a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800141e:	82bb      	strh	r3, [r7, #20]
	int16_t MSB_T1 = ((int16_t) (MSB_Tx & 0b00001100)) << 6;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	b21b      	sxth	r3, r3
 8001426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800142a:	827b      	strh	r3, [r7, #18]

	float T0_degC = (float) ((int16_t)hts221_read_byte(HTS221_ADDRESS_T0_degC_x8) | MSB_T0) / 8.0f;
 800142c:	2032      	movs	r0, #50	; 0x32
 800142e:	f7ff ffa1 	bl	8001374 <hts221_read_byte>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800143a:	4313      	orrs	r3, r2
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	edc7 7a03 	vstr	s15, [r7, #12]
	float T1_degC = (float) ((int16_t)hts221_read_byte(HTS221_ADDRESS_T1_degC_x8) | MSB_T1) / 8.0f;
 8001450:	2033      	movs	r0, #51	; 0x33
 8001452:	f7ff ff8f 	bl	8001374 <hts221_read_byte>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800145e:	4313      	orrs	r3, r2
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001468:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800146c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001470:	edc7 7a02 	vstr	s15, [r7, #8]

	uint8_t temporary[2];
	hts221_readArray(temporary, HTS221_ADDRESS_T0_OUT_L, 2);
 8001474:	463b      	mov	r3, r7
 8001476:	2202      	movs	r2, #2
 8001478:	213c      	movs	r1, #60	; 0x3c
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffaa 	bl	80013d4 <hts221_readArray>
	int16_t T0_OUT =  (int16_t)(temporary[1] << 8) | temporary[0];
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	783b      	ldrb	r3, [r7, #0]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(temporary, HTS221_ADDRESS_T1_OUT_L, 2);
 800148e:	463b      	mov	r3, r7
 8001490:	2202      	movs	r2, #2
 8001492:	213e      	movs	r1, #62	; 0x3e
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff9d 	bl	80013d4 <hts221_readArray>
	int16_t T1_OUT = (int16_t)(temporary[1] << 8) | temporary[0];
 800149a:	787b      	ldrb	r3, [r7, #1]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	783b      	ldrb	r3, [r7, #0]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]

	hts221_readArray(temporary, HTS221_ADDRESS_TEMP_L, 2);
 80014a8:	463b      	mov	r3, r7
 80014aa:	2202      	movs	r2, #2
 80014ac:	212a      	movs	r1, #42	; 0x2a
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff90 	bl	80013d4 <hts221_readArray>
	int16_t T_OUT =  (int16_t)(temporary[1] << 8) | temporary[0];
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	807b      	strh	r3, [r7, #2]

	return (T1_degC - T0_degC) * (T_OUT - T0_OUT) / (T1_OUT - T0_OUT) + T0_degC;
 80014c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <hts221_get_humidity>:

float hts221_get_humidity()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

	//return [hPa]

	const float H0_rh = hts221_read_byte(HTS221_ADDRESS_H0_rH_x2)/ 2.0f;
 8001512:	2030      	movs	r0, #48	; 0x30
 8001514:	f7ff ff2e 	bl	8001374 <hts221_read_byte>
 8001518:	4603      	mov	r3, r0
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152a:	edc7 7a03 	vstr	s15, [r7, #12]
	const float H1_rh = hts221_read_byte(HTS221_ADDRESS_H1_rH_x2)/ 2.0f;
 800152e:	2031      	movs	r0, #49	; 0x31
 8001530:	f7ff ff20 	bl	8001374 <hts221_read_byte>
 8001534:	4603      	mov	r3, r0
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001546:	edc7 7a02 	vstr	s15, [r7, #8]

	uint8_t temporary[2];
	hts221_readArray(temporary, HTS221_ADDRESS_H0_OUT_L, 2);
 800154a:	463b      	mov	r3, r7
 800154c:	2202      	movs	r2, #2
 800154e:	2136      	movs	r1, #54	; 0x36
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff3f 	bl	80013d4 <hts221_readArray>
	int16_t H0_OUT =  (int16_t)(temporary[1] << 8) | temporary[0];
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	783b      	ldrb	r3, [r7, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(temporary, HTS221_ADDRESS_H1_OUT_L, 2);
 8001564:	463b      	mov	r3, r7
 8001566:	2202      	movs	r2, #2
 8001568:	213a      	movs	r1, #58	; 0x3a
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff32 	bl	80013d4 <hts221_readArray>
	int16_t H1_OUT =  (int16_t)(temporary[1] << 8) | temporary[0];
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	783b      	ldrb	r3, [r7, #0]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	80bb      	strh	r3, [r7, #4]

	hts221_readArray(temporary, HTS221_ADDRESS_HUM_L, 2);
 800157e:	463b      	mov	r3, r7
 8001580:	2202      	movs	r2, #2
 8001582:	2128      	movs	r1, #40	; 0x28
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff25 	bl	80013d4 <hts221_readArray>
	int16_t H_OUT =  (int16_t)(temporary[1] << 8) | temporary[0];
 800158a:	787b      	ldrb	r3, [r7, #1]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	807b      	strh	r3, [r7, #2]

	return (H1_rh - H0_rh) * (H_OUT - H0_OUT) / (H1_OUT - H0_OUT) + H0_rh;
 8001598:	ed97 7a02 	vldr	s14, [r7, #8]
 800159c:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <hts221_init>:



uint8_t hts221_init(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100); //???
 80015ec:	2064      	movs	r0, #100	; 0x64
 80015ee:	f002 fcb3 	bl	8003f58 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 80015f2:	200f      	movs	r0, #15
 80015f4:	f7ff febe 	bl	8001374 <hts221_read_byte>
 80015f8:	4603      	mov	r3, r0
 80015fa:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE){
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	2bbc      	cmp	r3, #188	; 0xbc
 8001600:	d10a      	bne.n	8001618 <hts221_init+0x36>
		status = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	71fb      	strb	r3, [r7, #7]
		status = 0;
		return status;
	}

	//hts221 device init
	uint8_t ctrl1 = 0b10000011;//start, set frequency
 8001606:	2383      	movs	r3, #131	; 0x83
 8001608:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	4619      	mov	r1, r3
 800160e:	2020      	movs	r0, #32
 8001610:	f7ff feca 	bl	80013a8 <hts221_write_byte>

	return status;
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	e002      	b.n	800161e <hts221_init+0x3c>
		status = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	71fb      	strb	r3, [r7, #7]
		return status;
 800161c:	79fb      	ldrb	r3, [r7, #7]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <__NVIC_GetPriorityGrouping>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800179a:	b480      	push	{r7}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017ae:	f023 0306 	bic.w	r3, r3, #6
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	60da      	str	r2, [r3, #12]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f043 0204 	orr.w	r2, r3, #4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0204 	bic.w	r2, r3, #4
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b02      	cmp	r3, #2
 800183c:	d101      	bne.n	8001842 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d101      	bne.n	8001868 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	d101      	bne.n	800188e <LL_I2C_IsActiveFlag_STOP+0x18>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_I2C_IsActiveFlag_STOP+0x1a>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	61da      	str	r2, [r3, #28]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	0d5b      	lsrs	r3, r3, #21
 80018f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <LL_I2C_HandleTransfer+0x48>)
 80018f8:	430b      	orrs	r3, r1
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4319      	orrs	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	4319      	orrs	r1, r3
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4319      	orrs	r1, r3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	430b      	orrs	r3, r1
 8001912:	431a      	orrs	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	03ff7bff 	.word	0x03ff7bff

08001928 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b2db      	uxtb	r3, r3
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_AHB1_GRP1_EnableClock>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800196a:	695a      	ldr	r2, [r3, #20]
 800196c:	4907      	ldr	r1, [pc, #28]	; (800198c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4013      	ands	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4013      	ands	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000

080019c0 <MX_I2C1_Init>:
void add_I2C_Init(void);
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08e      	sub	sp, #56	; 0x38
 80019c4:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	615a      	str	r2, [r3, #20]
 80019d8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80019ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80019ee:	f7ff ffb7 	bl	8001960 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80019f2:	23c0      	movs	r3, #192	; 0xc0
 80019f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019f6:	2302      	movs	r3, #2
 80019f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4821      	ldr	r0, [pc, #132]	; (8001a94 <MX_I2C1_Init+0xd4>)
 8001a10:	f001 fd43 	bl	800349a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001a14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001a18:	f7ff ffba 	bl	8001990 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a1c:	f7ff fe04 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe54 	bl	80016d4 <NVIC_EncodePriority>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	201f      	movs	r0, #31
 8001a32:	f7ff fe25 	bl	8001680 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a36:	201f      	movs	r0, #31
 8001a38:	f7ff fe04 	bl	8001644 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001a3c:	4816      	ldr	r0, [pc, #88]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a3e:	f7ff ff3d 	bl	80018bc <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001a42:	4815      	ldr	r0, [pc, #84]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a44:	f7ff fec1 	bl	80017ca <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a4a:	f7ff fe96 	bl	800177a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a50:	f7ff fe83 	bl	800175a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_I2C1_Init+0xdc>)
 8001a5a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a78:	f001 fe22 	bl	80036c0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_I2C1_Init+0xd8>)
 8001a82:	f7ff fe8a 	bl	800179a <LL_I2C_SetOwnAddress2>

  add_I2C_Init();
 8001a86:	f000 f8fb 	bl	8001c80 <add_I2C_Init>
}
 8001a8a:	bf00      	nop
 8001a8c:	3738      	adds	r7, #56	; 0x38
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	48000400 	.word	0x48000400
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	2000090e 	.word	0x2000090e

08001aa0 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	71fb      	strb	r3, [r7, #7]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71bb      	strb	r3, [r7, #6]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	717b      	strb	r3, [r7, #5]
 8001aba:	4613      	mov	r3, r2
 8001abc:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001abe:	793b      	ldrb	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aca:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001acc:	7979      	ldrb	r1, [r7, #5]
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <i2c_master_write+0x80>)
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	2200      	movs	r2, #0
 8001adc:	4811      	ldr	r0, [pc, #68]	; (8001b24 <i2c_master_write+0x84>)
 8001ade:	f7ff fefd 	bl	80018dc <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480f      	ldr	r0, [pc, #60]	; (8001b24 <i2c_master_write+0x84>)
 8001ae8:	f7ff ff2b 	bl	8001942 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001aec:	e00a      	b.n	8001b04 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <i2c_master_write+0x84>)
 8001af0:	f7ff fe9b 	bl	800182a <LL_I2C_IsActiveFlag_TXIS>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <i2c_master_write+0x84>)
 8001b00:	f7ff ff1f 	bl	8001942 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <i2c_master_write+0x84>)
 8001b06:	f7ff feb6 	bl	8001876 <LL_I2C_IsActiveFlag_STOP>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ee      	beq.n	8001aee <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <i2c_master_write+0x84>)
 8001b12:	f7ff fec3 	bl	800189c <LL_I2C_ClearFlag_STOP>
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	80002000 	.word	0x80002000
 8001b24:	40005400 	.word	0x40005400

08001b28 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	70fb      	strb	r3, [r7, #3]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	70bb      	strb	r3, [r7, #2]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001b42:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <i2c_master_read+0xe0>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001b48:	7c3b      	ldrb	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001b4e:	78bb      	ldrb	r3, [r7, #2]
 8001b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b54:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <i2c_master_read+0xe4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001b5c:	482c      	ldr	r0, [pc, #176]	; (8001c10 <i2c_master_read+0xe8>)
 8001b5e:	f7ff fe44 	bl	80017ea <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001b62:	7879      	ldrb	r1, [r7, #1]
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <i2c_master_read+0xec>)
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2200      	movs	r2, #0
 8001b72:	4827      	ldr	r0, [pc, #156]	; (8001c10 <i2c_master_read+0xe8>)
 8001b74:	f7ff feb2 	bl	80018dc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b78:	e00a      	b.n	8001b90 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001b7a:	4825      	ldr	r0, [pc, #148]	; (8001c10 <i2c_master_read+0xe8>)
 8001b7c:	f7ff fe55 	bl	800182a <LL_I2C_IsActiveFlag_TXIS>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001b86:	78bb      	ldrb	r3, [r7, #2]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4821      	ldr	r0, [pc, #132]	; (8001c10 <i2c_master_read+0xe8>)
 8001b8c:	f7ff fed9 	bl	8001942 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <i2c_master_read+0xe8>)
 8001b92:	f7ff fe70 	bl	8001876 <LL_I2C_IsActiveFlag_STOP>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ee      	beq.n	8001b7a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b9c:	481c      	ldr	r0, [pc, #112]	; (8001c10 <i2c_master_read+0xe8>)
 8001b9e:	f7ff fe7d 	bl	800189c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001ba2:	bf00      	nop
 8001ba4:	481a      	ldr	r0, [pc, #104]	; (8001c10 <i2c_master_read+0xe8>)
 8001ba6:	f7ff fe66 	bl	8001876 <LL_I2C_IsActiveFlag_STOP>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001bb0:	7879      	ldrb	r1, [r7, #1]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <i2c_master_read+0xf0>)
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4813      	ldr	r0, [pc, #76]	; (8001c10 <i2c_master_read+0xe8>)
 8001bc4:	f7ff fe8a 	bl	80018dc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001bc8:	bf00      	nop
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <i2c_master_read+0xe8>)
 8001bcc:	f7ff fe53 	bl	8001876 <LL_I2C_IsActiveFlag_STOP>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f9      	beq.n	8001bca <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <i2c_master_read+0xe8>)
 8001bd8:	f7ff fe60 	bl	800189c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <i2c_master_read+0xe8>)
 8001bde:	f7ff fe14 	bl	800180a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <i2c_master_read+0xe8>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <i2c_master_read+0xe8>)
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <i2c_master_read+0xf4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <i2c_master_read+0xe4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001bfa:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <i2c_master_read+0xe0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000298 	.word	0x20000298
 8001c0c:	20000256 	.word	0x20000256
 8001c10:	40005400 	.word	0x40005400
 8001c14:	80002000 	.word	0x80002000
 8001c18:	80002400 	.word	0x80002400
 8001c1c:	20000257 	.word	0x20000257

08001c20 <I2C_eventCallback>:

void I2C_eventCallback(void)
{
 8001c20:	b598      	push	{r3, r4, r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <I2C_eventCallback+0x50>)
 8001c26:	f7ff fe13 	bl	8001850 <LL_I2C_IsActiveFlag_RXNE>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01c      	beq.n	8001c6a <I2C_eventCallback+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <I2C_eventCallback+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <I2C_eventCallback+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	b2c8      	uxtb	r0, r1
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <I2C_eventCallback+0x58>)
 8001c40:	7008      	strb	r0, [r1, #0]
 8001c42:	18d4      	adds	r4, r2, r3
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <I2C_eventCallback+0x50>)
 8001c46:	f7ff fe6f 	bl	8001928 <LL_I2C_ReceiveData8>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <I2C_eventCallback+0x58>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b13      	cmp	r3, #19
 8001c56:	d903      	bls.n	8001c60 <I2C_eventCallback+0x40>
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <I2C_eventCallback+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e001      	b.n	8001c64 <I2C_eventCallback+0x44>
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <I2C_eventCallback+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <I2C_eventCallback+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	bd98      	pop	{r3, r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40005400 	.word	0x40005400
 8001c74:	20000298 	.word	0x20000298
 8001c78:	20000257 	.word	0x20000257
 8001c7c:	20000256 	.word	0x20000256

08001c80 <add_I2C_Init>:

void add_I2C_Init(void){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	LL_I2C_Enable(I2C1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <add_I2C_Init+0x10>)
 8001c86:	f7ff fd58 	bl	800173a <LL_I2C_Enable>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40005400 	.word	0x40005400

08001c94 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <lis3mdl_read_byte+0x30>)
 8001ca4:	7819      	ldrb	r1, [r3, #0]
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	f107 000f 	add.w	r0, r7, #15
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	f7ff ff38 	bl	8001b28 <i2c_master_read>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	781b      	ldrb	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000035 	.word	0x20000035

08001cc8 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460a      	mov	r2, r1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <lis3mdl_write_byte+0x28>)
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	79f9      	ldrb	r1, [r7, #7]
 8001cde:	79b8      	ldrb	r0, [r7, #6]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f7ff fedd 	bl	8001aa0 <i2c_master_write>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000035 	.word	0x20000035

08001cf4 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	4613      	mov	r3, r2
 8001d02:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <lis3mdl_readArray+0x2c>)
 8001d06:	7818      	ldrb	r0, [r3, #0]
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	78b9      	ldrb	r1, [r7, #2]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4603      	mov	r3, r0
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff08 	bl	8001b28 <i2c_master_read>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000035 	.word	0x20000035

08001d24 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 8001d30:	2022      	movs	r0, #34	; 0x22
 8001d32:	f7ff ffaf 	bl	8001c94 <lis3mdl_read_byte>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 8001d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2206      	movs	r2, #6
 8001d58:	2128      	movs	r1, #40	; 0x28
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ffca 	bl	8001cf4 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001d60:	7d7b      	ldrb	r3, [r7, #21]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7d3b      	ldrb	r3, [r7, #20]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7dbb      	ldrb	r3, [r7, #22]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001d7c:	7e7b      	ldrb	r3, [r7, #25]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	7e3b      	ldrb	r3, [r7, #24]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <lis3mdl_get_mag+0xc0>)
 8001d8c:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 8001d8e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 8001da8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001db4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 8001dc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dce:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	45d5d000 	.word	0x45d5d000

08001de8 <lis3mdl_init>:


uint8_t lis3mdl_init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001df2:	2064      	movs	r0, #100	; 0x64
 8001df4:	f002 f8b0 	bl	8003f58 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f7ff ff4b 	bl	8001c94 <lis3mdl_read_byte>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	2b3d      	cmp	r3, #61	; 0x3d
 8001e06:	d102      	bne.n	8001e0e <lis3mdl_init+0x26>
	{
		status = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	e011      	b.n	8001e32 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <lis3mdl_init+0x8c>)
 8001e10:	223c      	movs	r2, #60	; 0x3c
 8001e12:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001e14:	200f      	movs	r0, #15
 8001e16:	f7ff ff3d 	bl	8001c94 <lis3mdl_read_byte>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	2b3d      	cmp	r3, #61	; 0x3d
 8001e22:	d102      	bne.n	8001e2a <lis3mdl_init+0x42>
		{
			status = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	e003      	b.n	8001e32 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	71fb      	strb	r3, [r7, #7]
			return status;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	e01c      	b.n	8001e6c <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8001e32:	23fc      	movs	r3, #252	; 0xfc
 8001e34:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	2020      	movs	r0, #32
 8001e3c:	f7ff ff44 	bl	8001cc8 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8001e40:	2300      	movs	r3, #0
 8001e42:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8001e44:	793b      	ldrb	r3, [r7, #4]
 8001e46:	4619      	mov	r1, r3
 8001e48:	2021      	movs	r0, #33	; 0x21
 8001e4a:	f7ff ff3d 	bl	8001cc8 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	4619      	mov	r1, r3
 8001e56:	2022      	movs	r0, #34	; 0x22
 8001e58:	f7ff ff36 	bl	8001cc8 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8001e60:	78bb      	ldrb	r3, [r7, #2]
 8001e62:	4619      	mov	r1, r3
 8001e64:	2023      	movs	r0, #35	; 0x23
 8001e66:	f7ff ff2f 	bl	8001cc8 <lis3mdl_write_byte>

	return status;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000035 	.word	0x20000035

08001e78 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t lps25hb_addres = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, lps25hb_addres, 0));
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <lps25hb_read_byte+0x30>)
 8001e88:	7819      	ldrb	r1, [r3, #0]
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	f107 000f 	add.w	r0, r7, #15
 8001e90:	2300      	movs	r3, #0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	2101      	movs	r1, #1
 8001e98:	f7ff fe46 	bl	8001b28 <i2c_master_read>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000036 	.word	0x20000036

08001eac <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, lps25hb_addres, 0);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <lps25hb_write_byte+0x28>)
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	79f9      	ldrb	r1, [r7, #7]
 8001ec2:	79b8      	ldrb	r0, [r7, #6]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f7ff fdeb 	bl	8001aa0 <i2c_master_write>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000036 	.word	0x20000036

08001ed8 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, lps25hb_addres, 1);
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <lps25hb_readArray+0x2c>)
 8001eea:	7818      	ldrb	r0, [r3, #0]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	78b9      	ldrb	r1, [r7, #2]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fe16 	bl	8001b28 <i2c_master_read>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000036 	.word	0x20000036

08001f08 <lps25hb_get_press>:


float lps25hb_get_press()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	// get pressure [hPa]
	uint8_t temp[3];
	lps25hb_readArray(temp, LPS25HB_ADDRESS_PRESS_XL, 3);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2203      	movs	r2, #3
 8001f12:	2128      	movs	r1, #40	; 0x28
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ffdf 	bl	8001ed8 <lps25hb_readArray>

	return ((uint32_t)((temp[2] << 16) | (uint16_t)((temp[1] << 8) | temp[0]))) / 4096.0f;
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	797a      	ldrb	r2, [r7, #5]
 8001f20:	0212      	lsls	r2, r2, #8
 8001f22:	b211      	sxth	r1, r2
 8001f24:	793a      	ldrb	r2, [r7, #4]
 8001f26:	b212      	sxth	r2, r2
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	b212      	sxth	r2, r2
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f38:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001f50 <lps25hb_get_press+0x48>
 8001f3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f40:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	45800000 	.word	0x45800000

08001f54 <lps25hb_init>:




uint8_t lps25hb_init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);//??
 8001f5e:	2064      	movs	r0, #100	; 0x64
 8001f60:	f001 fffa 	bl	8003f58 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f7ff ff87 	bl	8001e78 <lps25hb_read_byte>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE){
 8001f6e:	79bb      	ldrb	r3, [r7, #6]
 8001f70:	2bbd      	cmp	r3, #189	; 0xbd
 8001f72:	d102      	bne.n	8001f7a <lps25hb_init+0x26>
			status = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	e011      	b.n	8001f9e <lps25hb_init+0x4a>
		}
		else{			//if the device is not found on one address, try another one
			lps25hb_addres = LPS25HB_DEVICE_ADDRESS_1;
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <lps25hb_init+0x64>)
 8001f7c:	22ba      	movs	r2, #186	; 0xba
 8001f7e:	701a      	strb	r2, [r3, #0]
			val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001f80:	200f      	movs	r0, #15
 8001f82:	f7ff ff79 	bl	8001e78 <lps25hb_read_byte>
 8001f86:	4603      	mov	r3, r0
 8001f88:	71bb      	strb	r3, [r7, #6]
			if(val == LPS25HB_WHO_AM_I_VALUE)
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	2bbd      	cmp	r3, #189	; 0xbd
 8001f8e:	d102      	bne.n	8001f96 <lps25hb_init+0x42>
			{
				status = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	e003      	b.n	8001f9e <lps25hb_init+0x4a>
			}
			else
			{
				status = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
				return status;
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	e007      	b.n	8001fae <lps25hb_init+0x5a>
			}
		}

	//lps25hb device init
	uint8_t ctrl1 = 0b11000000;//start device, and set freq
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8001fa2:	797b      	ldrb	r3, [r7, #5]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2020      	movs	r0, #32
 8001fa8:	f7ff ff80 	bl	8001eac <lps25hb_write_byte>

	return status;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000036 	.word	0x20000036

08001fbc <__NVIC_SetPriorityGrouping>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <LL_RCC_HSI_Enable+0x1c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <LL_RCC_HSI_Enable+0x1c>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <LL_RCC_HSI_IsReady+0x20>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000

08002048 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <LL_RCC_SetSysClkSource+0x24>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 0203 	bic.w	r2, r3, #3
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <LL_RCC_SetSysClkSource+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <LL_RCC_GetSysClkSource+0x18>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <LL_RCC_SetAHBPrescaler+0x24>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <LL_RCC_SetAHBPrescaler+0x24>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000

08002108 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002118:	4904      	ldr	r1, [pc, #16]	; (800212c <LL_RCC_SetAPB2Prescaler+0x24>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000

08002130 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <LL_RCC_SetI2CClockSource+0x2c>)
 800213a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0e1b      	lsrs	r3, r3, #24
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214a:	4904      	ldr	r1, [pc, #16]	; (800215c <LL_RCC_SetI2CClockSource+0x2c>)
 800214c:	4313      	orrs	r3, r2
 800214e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000

08002160 <LL_APB1_GRP1_EnableClock>:
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <LL_APB1_GRP1_EnableClock+0x2c>)
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <LL_APB1_GRP1_EnableClock+0x2c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000

08002190 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000

080021c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <LL_FLASH_SetLatency+0x24>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	; (80021e4 <LL_FLASH_SetLatency+0x24>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40022000 	.word	0x40022000

080021e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <LL_FLASH_GetLatency+0x18>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000

08002204 <LL_GPIO_IsInputPinSet>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	4013      	ands	r3, r2
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff ffab 	bl	8002190 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800223a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800223e:	f7ff ff8f 	bl	8002160 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002242:	2003      	movs	r0, #3
 8002244:	f7ff feba 	bl	8001fbc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002248:	f000 f822 	bl	8002290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224c:	f7ff f818 	bl	8001280 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002250:	f000 fd04 	bl	8002c5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002254:	f000 fd64 	bl	8002d20 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002258:	f7ff fbb2 	bl	80019c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //lsm6ds0_init();
  check[0] = hts221_init();
 800225c:	f7ff f9c1 	bl	80015e2 <hts221_init>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <main+0x5c>)
 8002266:	701a      	strb	r2, [r3, #0]
  check[1] = lps25hb_init();
 8002268:	f7ff fe74 	bl	8001f54 <lps25hb_init>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <main+0x5c>)
 8002272:	705a      	strb	r2, [r3, #1]
  check[2] = lis3mdl_init();
 8002274:	f7ff fdb8 	bl	8001de8 <lis3mdl_init>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <main+0x5c>)
 800227e:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MAIN_updateData();
 8002280:	f000 f928 	bl	80024d4 <MAIN_updateData>

	  LL_mDelay(50);
 8002284:	2032      	movs	r0, #50	; 0x32
 8002286:	f001 fe67 	bl	8003f58 <LL_mDelay>
	  MAIN_updateData();
 800228a:	e7f9      	b.n	8002280 <main+0x50>
 800228c:	2000029c 	.word	0x2000029c

08002290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff ff93 	bl	80021c0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800229a:	bf00      	nop
 800229c:	f7ff ffa4 	bl	80021e8 <LL_FLASH_GetLatency>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1fa      	bne.n	800229c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80022a6:	f7ff fead 	bl	8002004 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80022aa:	bf00      	nop
 80022ac:	f7ff feba 	bl	8002024 <LL_RCC_HSI_IsReady>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d1fa      	bne.n	80022ac <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80022b6:	2010      	movs	r0, #16
 80022b8:	f7ff fec6 	bl	8002048 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff fefb 	bl	80020b8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff ff0c 	bl	80020e0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff ff1d 	bl	8002108 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fed0 	bl	8002074 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80022d4:	bf00      	nop
 80022d6:	f7ff fee1 	bl	800209c <LL_RCC_GetSysClkSource>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1fa      	bne.n	80022d6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <SystemClock_Config+0x68>)
 80022e2:	f001 fe2b 	bl	8003f3c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <SystemClock_Config+0x68>)
 80022e8:	f001 fe5a 	bl	8003fa0 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80022ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80022f0:	f7ff ff1e 	bl	8002130 <LL_RCC_SetI2CClockSource>
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	007a1200 	.word	0x007a1200

080022fc <writeDisplay>:

/* USER CODE BEGIN 4 */
	void writeDisplay(){
 80022fc:	b598      	push	{r3, r4, r7, lr}
 80022fe:	af00      	add	r7, sp, #0
		static char compStr[13];
		switch (dataID){
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <writeDisplay+0x118>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	f200 8083 	bhi.w	8002410 <writeDisplay+0x114>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <writeDisplay+0x14>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002325 	.word	0x08002325
 8002314:	08002355 	.word	0x08002355
 8002318:	08002385 	.word	0x08002385
 800231c:	080023b1 	.word	0x080023b1
 8002320:	080023e1 	.word	0x080023e1
			case 0:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"MAG_%04.1f",data[dataID]));
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <writeDisplay+0x118>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <writeDisplay+0x11c>)
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	461a      	mov	r2, r3
 800233c:	4623      	mov	r3, r4
 800233e:	4937      	ldr	r1, [pc, #220]	; (800241c <writeDisplay+0x120>)
 8002340:	4837      	ldr	r0, [pc, #220]	; (8002420 <writeDisplay+0x124>)
 8002342:	f002 faeb 	bl	800491c <siprintf>
 8002346:	4603      	mov	r3, r0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4619      	mov	r1, r3
 800234c:	4834      	ldr	r0, [pc, #208]	; (8002420 <writeDisplay+0x124>)
 800234e:	f7fe fdef 	bl	8000f30 <DISPLAY_setCompStr>
				break;
 8002352:	e05d      	b.n	8002410 <writeDisplay+0x114>
			case 1:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"TEMP_%04.1f",data[dataID]));
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <writeDisplay+0x118>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <writeDisplay+0x11c>)
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f8f1 	bl	8000548 <__aeabi_f2d>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	461a      	mov	r2, r3
 800236c:	4623      	mov	r3, r4
 800236e:	492d      	ldr	r1, [pc, #180]	; (8002424 <writeDisplay+0x128>)
 8002370:	482b      	ldr	r0, [pc, #172]	; (8002420 <writeDisplay+0x124>)
 8002372:	f002 fad3 	bl	800491c <siprintf>
 8002376:	4603      	mov	r3, r0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4619      	mov	r1, r3
 800237c:	4828      	ldr	r0, [pc, #160]	; (8002420 <writeDisplay+0x124>)
 800237e:	f7fe fdd7 	bl	8000f30 <DISPLAY_setCompStr>
				break;
 8002382:	e045      	b.n	8002410 <writeDisplay+0x114>
			case 2:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr ,"HUM_%02d",(int)data[dataID]));
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <writeDisplay+0x118>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <writeDisplay+0x11c>)
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002396:	ee17 2a90 	vmov	r2, s15
 800239a:	4923      	ldr	r1, [pc, #140]	; (8002428 <writeDisplay+0x12c>)
 800239c:	4820      	ldr	r0, [pc, #128]	; (8002420 <writeDisplay+0x124>)
 800239e:	f002 fabd 	bl	800491c <siprintf>
 80023a2:	4603      	mov	r3, r0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	481d      	ldr	r0, [pc, #116]	; (8002420 <writeDisplay+0x124>)
 80023aa:	f7fe fdc1 	bl	8000f30 <DISPLAY_setCompStr>
				break;
 80023ae:	e02f      	b.n	8002410 <writeDisplay+0x114>
			case 3:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"BAR_%07.2f",data[dataID]));
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <writeDisplay+0x118>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <writeDisplay+0x11c>)
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8c3 	bl	8000548 <__aeabi_f2d>
 80023c2:	4603      	mov	r3, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	4918      	ldr	r1, [pc, #96]	; (800242c <writeDisplay+0x130>)
 80023cc:	4814      	ldr	r0, [pc, #80]	; (8002420 <writeDisplay+0x124>)
 80023ce:	f002 faa5 	bl	800491c <siprintf>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	4811      	ldr	r0, [pc, #68]	; (8002420 <writeDisplay+0x124>)
 80023da:	f7fe fda9 	bl	8000f30 <DISPLAY_setCompStr>
				break;
 80023de:	e017      	b.n	8002410 <writeDisplay+0x114>
			case 4:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"ALT_%06.1f",data[dataID]));
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <writeDisplay+0x118>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <writeDisplay+0x11c>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8ab 	bl	8000548 <__aeabi_f2d>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	461a      	mov	r2, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	490d      	ldr	r1, [pc, #52]	; (8002430 <writeDisplay+0x134>)
 80023fc:	4808      	ldr	r0, [pc, #32]	; (8002420 <writeDisplay+0x124>)
 80023fe:	f002 fa8d 	bl	800491c <siprintf>
 8002402:	4603      	mov	r3, r0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <writeDisplay+0x124>)
 800240a:	f7fe fd91 	bl	8000f30 <DISPLAY_setCompStr>
				break;
 800240e:	bf00      	nop
		}
	}
 8002410:	bf00      	nop
 8002412:	bd98      	pop	{r3, r4, r7, pc}
 8002414:	20000258 	.word	0x20000258
 8002418:	200002a0 	.word	0x200002a0
 800241c:	08007688 	.word	0x08007688
 8002420:	20000268 	.word	0x20000268
 8002424:	08007694 	.word	0x08007694
 8002428:	080076a0 	.word	0x080076a0
 800242c:	080076ac 	.word	0x080076ac
 8002430:	080076b8 	.word	0x080076b8

08002434 <MAIN_buttonShiftDataID>:

	void MAIN_buttonShiftDataID(){
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
		dataID++;
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MAIN_buttonShiftDataID+0x34>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MAIN_buttonShiftDataID+0x34>)
 8002442:	701a      	strb	r2, [r3, #0]
		dataID %= 5;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MAIN_buttonShiftDataID+0x34>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <MAIN_buttonShiftDataID+0x38>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	0899      	lsrs	r1, r3, #2
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <MAIN_buttonShiftDataID+0x34>)
 800245c:	701a      	strb	r2, [r3, #0]
		DISPLAY_resetCurPos();
 800245e:	f7fe fdc1 	bl	8000fe4 <DISPLAY_resetCurPos>
	}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000258 	.word	0x20000258
 800246c:	cccccccd 	.word	0xcccccccd

08002470 <MAIN_checkButtonState>:

	uint8_t MAIN_checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
	{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	460b      	mov	r3, r1
 8002484:	70bb      	strb	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	707b      	strb	r3, [r7, #1]
		//check edge of the button
		uint8_t cnt = 0; // counts samples in row
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
		for(; samples_window > 0 ; samples_window--){
 800248e:	e017      	b.n	80024c0 <MAIN_checkButtonState+0x50>
			if( edge ^ LL_GPIO_IsInputPinSet(tlacidlo_GPIO_Port, tlacidlo_Pin))
 8002490:	78bc      	ldrb	r4, [r7, #2]
 8002492:	2108      	movs	r1, #8
 8002494:	480e      	ldr	r0, [pc, #56]	; (80024d0 <MAIN_checkButtonState+0x60>)
 8002496:	f7ff feb5 	bl	8002204 <LL_GPIO_IsInputPinSet>
 800249a:	4603      	mov	r3, r0
 800249c:	429c      	cmp	r4, r3
 800249e:	d003      	beq.n	80024a8 <MAIN_checkButtonState+0x38>
				cnt++;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	3301      	adds	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e001      	b.n	80024ac <MAIN_checkButtonState+0x3c>
			else
				cnt = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

			if(cnt >= samples_required)
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d301      	bcc.n	80024ba <MAIN_checkButtonState+0x4a>
				return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e006      	b.n	80024c8 <MAIN_checkButtonState+0x58>
		for(; samples_window > 0 ; samples_window--){
 80024ba:	787b      	ldrb	r3, [r7, #1]
 80024bc:	3b01      	subs	r3, #1
 80024be:	707b      	strb	r3, [r7, #1]
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e4      	bne.n	8002490 <MAIN_checkButtonState+0x20>
		}
		return 0;
 80024c6:	2300      	movs	r3, #0
	}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	48000400 	.word	0x48000400

080024d4 <MAIN_updateData>:

	void MAIN_updateData(){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

		lis3mdl_get_mag(mag,(mag+1), (mag+2));
 80024d8:	4b48      	ldr	r3, [pc, #288]	; (80025fc <MAIN_updateData+0x128>)
 80024da:	4a49      	ldr	r2, [pc, #292]	; (8002600 <MAIN_updateData+0x12c>)
 80024dc:	4619      	mov	r1, r3
 80024de:	4849      	ldr	r0, [pc, #292]	; (8002604 <MAIN_updateData+0x130>)
 80024e0:	f7ff fc20 	bl	8001d24 <lis3mdl_get_mag>
		data[0] = adjustData(calcAzimuth(mag[0], mag[1]),minDataVal[0],maxDataVal[0]);
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <MAIN_updateData+0x130>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <MAIN_updateData+0x130>)
 80024ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80024f0:	eef0 0a47 	vmov.f32	s1, s14
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f8b6 	bl	8002668 <calcAzimuth>
 80024fc:	eef0 6a40 	vmov.f32	s13, s0
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <MAIN_updateData+0x134>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <MAIN_updateData+0x138>)
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	eeb0 1a47 	vmov.f32	s2, s14
 8002510:	eef0 0a67 	vmov.f32	s1, s15
 8002514:	eeb0 0a66 	vmov.f32	s0, s13
 8002518:	f000 f87c 	bl	8002614 <adjustData>
 800251c:	eef0 7a40 	vmov.f32	s15, s0
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <MAIN_updateData+0x13c>)
 8002522:	edc3 7a00 	vstr	s15, [r3]
		data[1] = adjustData(hts221_get_temp(),minDataVal[1],maxDataVal[1]);
 8002526:	f7fe ff6d 	bl	8001404 <hts221_get_temp>
 800252a:	eef0 6a40 	vmov.f32	s13, s0
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <MAIN_updateData+0x134>)
 8002530:	edd3 7a01 	vldr	s15, [r3, #4]
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <MAIN_updateData+0x138>)
 8002536:	ed93 7a01 	vldr	s14, [r3, #4]
 800253a:	eeb0 1a47 	vmov.f32	s2, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	eeb0 0a66 	vmov.f32	s0, s13
 8002546:	f000 f865 	bl	8002614 <adjustData>
 800254a:	eef0 7a40 	vmov.f32	s15, s0
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <MAIN_updateData+0x13c>)
 8002550:	edc3 7a01 	vstr	s15, [r3, #4]
		data[2] = adjustData(hts221_get_humidity(),minDataVal[2],maxDataVal[2]);
 8002554:	f7fe ffda 	bl	800150c <hts221_get_humidity>
 8002558:	eef0 6a40 	vmov.f32	s13, s0
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <MAIN_updateData+0x134>)
 800255e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <MAIN_updateData+0x138>)
 8002564:	ed93 7a02 	vldr	s14, [r3, #8]
 8002568:	eeb0 1a47 	vmov.f32	s2, s14
 800256c:	eef0 0a67 	vmov.f32	s1, s15
 8002570:	eeb0 0a66 	vmov.f32	s0, s13
 8002574:	f000 f84e 	bl	8002614 <adjustData>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <MAIN_updateData+0x13c>)
 800257e:	edc3 7a02 	vstr	s15, [r3, #8]
		data[3] = adjustData(lps25hb_get_press(),minDataVal[3],maxDataVal[3]);
 8002582:	f7ff fcc1 	bl	8001f08 <lps25hb_get_press>
 8002586:	eef0 6a40 	vmov.f32	s13, s0
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <MAIN_updateData+0x134>)
 800258c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MAIN_updateData+0x138>)
 8002592:	ed93 7a03 	vldr	s14, [r3, #12]
 8002596:	eeb0 1a47 	vmov.f32	s2, s14
 800259a:	eef0 0a67 	vmov.f32	s1, s15
 800259e:	eeb0 0a66 	vmov.f32	s0, s13
 80025a2:	f000 f837 	bl	8002614 <adjustData>
 80025a6:	eef0 7a40 	vmov.f32	s15, s0
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <MAIN_updateData+0x13c>)
 80025ac:	edc3 7a03 	vstr	s15, [r3, #12]
		data[4] = adjustData(calcAltitude(data[1], data[3]),minDataVal[4],maxDataVal[4]);
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <MAIN_updateData+0x13c>)
 80025b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MAIN_updateData+0x13c>)
 80025b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80025bc:	eef0 0a47 	vmov.f32	s1, s14
 80025c0:	eeb0 0a67 	vmov.f32	s0, s15
 80025c4:	f000 f898 	bl	80026f8 <calcAltitude>
 80025c8:	eef0 6a40 	vmov.f32	s13, s0
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MAIN_updateData+0x134>)
 80025ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MAIN_updateData+0x138>)
 80025d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80025d8:	eeb0 1a47 	vmov.f32	s2, s14
 80025dc:	eef0 0a67 	vmov.f32	s1, s15
 80025e0:	eeb0 0a66 	vmov.f32	s0, s13
 80025e4:	f000 f816 	bl	8002614 <adjustData>
 80025e8:	eef0 7a40 	vmov.f32	s15, s0
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MAIN_updateData+0x13c>)
 80025ee:	edc3 7a04 	vstr	s15, [r3, #16]

		writeDisplay();
 80025f2:	f7ff fe83 	bl	80022fc <writeDisplay>
	}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000260 	.word	0x20000260
 8002600:	20000264 	.word	0x20000264
 8002604:	2000025c 	.word	0x2000025c
 8002608:	20000038 	.word	0x20000038
 800260c:	2000004c 	.word	0x2000004c
 8002610:	200002a0 	.word	0x200002a0

08002614 <adjustData>:

	float adjustData(float value, float minValue, float maxValue){
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	ed87 0a03 	vstr	s0, [r7, #12]
 800261e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002622:	ed87 1a01 	vstr	s2, [r7, #4]
		// saturation of data

		if(value < minValue){
 8002626:	ed97 7a03 	vldr	s14, [r7, #12]
 800262a:	edd7 7a02 	vldr	s15, [r7, #8]
 800262e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	d501      	bpl.n	800263c <adjustData+0x28>
			value = minValue;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	60fb      	str	r3, [r7, #12]
		}

		if(value > maxValue){
 800263c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	dd01      	ble.n	8002652 <adjustData+0x3e>
			value = maxValue;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]
		}
		return value;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	ee07 3a90 	vmov	s15, r3
	}
 8002658:	eeb0 0a67 	vmov.f32	s0, s15
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <calcAzimuth>:

	float calcAzimuth(float x, float y){
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002672:	edc7 0a00 	vstr	s1, [r7]
		// x, y [gauss] (magnetic induction)

		return (float) 90.0f  + (atan2((double)y,(double)x)) * 180.0f/3.1415f;
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f7fd ff66 	bl	8000548 <__aeabi_f2d>
 800267c:	4604      	mov	r4, r0
 800267e:	460d      	mov	r5, r1
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fd ff61 	bl	8000548 <__aeabi_f2d>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	ec43 2b11 	vmov	d1, r2, r3
 800268e:	ec45 4b10 	vmov	d0, r4, r5
 8002692:	f003 fd12 	bl	80060ba <atan2>
 8002696:	ec51 0b10 	vmov	r0, r1, d0
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <calcAzimuth+0x88>)
 80026a0:	f7fd ffaa 	bl	80005f8 <__aeabi_dmul>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	4618      	mov	r0, r3
 80026aa:	4621      	mov	r1, r4
 80026ac:	a30e      	add	r3, pc, #56	; (adr r3, 80026e8 <calcAzimuth+0x80>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fe f8cb 	bl	800084c <__aeabi_ddiv>
 80026b6:	4603      	mov	r3, r0
 80026b8:	460c      	mov	r4, r1
 80026ba:	4618      	mov	r0, r3
 80026bc:	4621      	mov	r1, r4
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <calcAzimuth+0x8c>)
 80026c4:	f7fd fde2 	bl	800028c <__adddf3>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	4618      	mov	r0, r3
 80026ce:	4621      	mov	r1, r4
 80026d0:	f7fe fa6a 	bl	8000ba8 <__aeabi_d2f>
 80026d4:	4603      	mov	r3, r0
 80026d6:	ee07 3a90 	vmov	s15, r3
	}
 80026da:	eeb0 0a67 	vmov.f32	s0, s15
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	f3af 8000 	nop.w
 80026e8:	c0000000 	.word	0xc0000000
 80026ec:	400921ca 	.word	0x400921ca
 80026f0:	40668000 	.word	0x40668000
 80026f4:	40568000 	.word	0x40568000

080026f8 <calcAltitude>:

	float calcAltitude(float temperature, float pressure){
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002702:	edc7 0a00 	vstr	s1, [r7]
		// temperature [°C]
		// pressure [hPa]

		// https://keisan.casio.com/has10/SpecExec.cgi?id=system/2006/1224585971

		const float P0 = 1013.25;
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <calcAltitude+0x88>)
 8002708:	60fb      	str	r3, [r7, #12]
		return (float) (pow((double)(P0/pressure), (double)(1.0f/5.257f)) -1.0f) * (temperature + 273.15f)/0.0065f;
 800270a:	ed97 7a03 	vldr	s14, [r7, #12]
 800270e:	edd7 7a00 	vldr	s15, [r7]
 8002712:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002716:	ee16 0a90 	vmov	r0, s13
 800271a:	f7fd ff15 	bl	8000548 <__aeabi_f2d>
 800271e:	4603      	mov	r3, r0
 8002720:	460c      	mov	r4, r1
 8002722:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002778 <calcAltitude+0x80>
 8002726:	ec44 3b10 	vmov	d0, r3, r4
 800272a:	f003 fcc9 	bl	80060c0 <pow>
 800272e:	ec51 0b10 	vmov	r0, r1, d0
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <calcAltitude+0x8c>)
 8002738:	f7fd fda6 	bl	8000288 <__aeabi_dsub>
 800273c:	4603      	mov	r3, r0
 800273e:	460c      	mov	r4, r1
 8002740:	4618      	mov	r0, r3
 8002742:	4621      	mov	r1, r4
 8002744:	f7fe fa30 	bl	8000ba8 <__aeabi_d2f>
 8002748:	ee06 0a90 	vmov	s13, r0
 800274c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002750:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002788 <calcAltitude+0x90>
 8002754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800278c <calcAltitude+0x94>
 8002760:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002764:	eef0 7a66 	vmov.f32	s15, s13
	}
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}
 8002772:	bf00      	nop
 8002774:	f3af 8000 	nop.w
 8002778:	80000000 	.word	0x80000000
 800277c:	3fc85936 	.word	0x3fc85936
 8002780:	447d5000 	.word	0x447d5000
 8002784:	3ff00000 	.word	0x3ff00000
 8002788:	43889333 	.word	0x43889333
 800278c:	3bd4fdf4 	.word	0x3bd4fdf4

08002790 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40010400 	.word	0x40010400

080027bc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6153      	str	r3, [r2, #20]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010400 	.word	0x40010400

080027dc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f06f 0201 	mvn.w	r2, #1
 80027ea:	611a      	str	r2, [r3, #16]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <HardFault_Handler+0x4>

08002832 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <MemManage_Handler+0x4>

08002838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <BusFault_Handler+0x4>

0800283e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <UsageFault_Handler+0x4>

08002844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8002882:	2008      	movs	r0, #8
 8002884:	f7ff ff84 	bl	8002790 <LL_EXTI_IsActiveFlag_0_31>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00f      	beq.n	80028ae <EXTI3_IRQHandler+0x32>
	{
		if(MAIN_checkButtonState(tlacidlo_GPIO_Port,
 800288e:	2328      	movs	r3, #40	; 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2332      	movs	r3, #50	; 0x32
 8002894:	2201      	movs	r2, #1
 8002896:	2108      	movs	r1, #8
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <EXTI3_IRQHandler+0x40>)
 800289a:	f7ff fde9 	bl	8002470 <MAIN_checkButtonState>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <EXTI3_IRQHandler+0x2c>
								tlacidlo_Pin,
								BUTTON_EXTI_TRIGGER,
								BUTTON_EXTI_SAMPLES_WINDOW,
								BUTTON_EXTI_SAMPLES_REQUIRED))
		{
			MAIN_buttonShiftDataID();
 80028a4:	f7ff fdc6 	bl	8002434 <MAIN_buttonShiftDataID>
		}
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80028a8:	2008      	movs	r0, #8
 80028aa:	f7ff ff87 	bl	80027bc <LL_EXTI_ClearFlag_0_31>
	}
  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 80028ae:	2008      	movs	r0, #8
 80028b0:	f7ff ff6e 	bl	8002790 <LL_EXTI_IsActiveFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	48000400 	.word	0x48000400

080028c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80028c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80028c8:	f7ff ff96 	bl	80027f8 <LL_TIM_IsActiveFlag_UPDATE>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <TIM2_IRQHandler+0x1e>
		DISPLAY_displayCurStr();
 80028d2:	f7fe f9d5 	bl	8000c80 <DISPLAY_displayCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 80028d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80028da:	f7ff ff7f 	bl	80027dc <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80028e8:	4806      	ldr	r0, [pc, #24]	; (8002904 <TIM3_IRQHandler+0x20>)
 80028ea:	f7ff ff85 	bl	80027f8 <LL_TIM_IsActiveFlag_UPDATE>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 80028f4:	f7fe faa8 	bl	8000e48 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM3_IRQHandler+0x20>)
 80028fa:	f7ff ff6f 	bl	80027dc <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40000400 	.word	0x40000400

08002908 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_eventCallback();
 800290c:	f7ff f988 	bl	8001c20 <I2C_eventCallback>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <_sbrk+0x5c>)
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <_sbrk+0x60>)
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <_sbrk+0x64>)
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <_sbrk+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d207      	bcs.n	8002954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002944:	f001 fb3c 	bl	8003fc0 <__errno>
 8002948:	4602      	mov	r2, r0
 800294a:	230c      	movs	r3, #12
 800294c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e009      	b.n	8002968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <_sbrk+0x64>)
 8002964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20003000 	.word	0x20003000
 8002974:	00000400 	.word	0x00000400
 8002978:	20000278 	.word	0x20000278
 800297c:	200002b8 	.word	0x200002b8

08002980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <SystemInit+0x20>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <SystemInit+0x20>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <LL_APB1_GRP1_EnableClock>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <LL_TIM_EnableCounter>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	601a      	str	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_TIM_DisableARRPreload>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_TIM_OC_DisableFast>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d028      	beq.n	8002b8a <LL_TIM_OC_DisableFast+0x62>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d023      	beq.n	8002b86 <LL_TIM_OC_DisableFast+0x5e>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d01e      	beq.n	8002b82 <LL_TIM_OC_DisableFast+0x5a>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d019      	beq.n	8002b7e <LL_TIM_OC_DisableFast+0x56>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b50:	d013      	beq.n	8002b7a <LL_TIM_OC_DisableFast+0x52>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d00d      	beq.n	8002b76 <LL_TIM_OC_DisableFast+0x4e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d007      	beq.n	8002b72 <LL_TIM_OC_DisableFast+0x4a>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d101      	bne.n	8002b6e <LL_TIM_OC_DisableFast+0x46>
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	e00e      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b6e:	2308      	movs	r3, #8
 8002b70:	e00c      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b72:	2306      	movs	r3, #6
 8002b74:	e00a      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b76:	2305      	movs	r3, #5
 8002b78:	e008      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	e006      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e004      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e002      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_TIM_OC_DisableFast+0x64>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3318      	adds	r3, #24
 8002b92:	4619      	mov	r1, r3
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <LL_TIM_OC_DisableFast+0x9c>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	440b      	add	r3, r1
 8002b9c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <LL_TIM_OC_DisableFast+0xa0>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	2304      	movs	r3, #4
 8002bac:	408b      	lsls	r3, r1
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	08007744 	.word	0x08007744
 8002bc8:	08007750 	.word	0x08007750

08002bcc <LL_TIM_SetClockSource>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_TIM_SetTriggerOutput>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	605a      	str	r2, [r3, #4]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_TIM_DisableMasterSlaveMode>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2220      	movs	r2, #32
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 f9eb 	bl	8004054 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff ff1a 	bl	8002ab8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c84:	f7ff fe8e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fede 	bl	8002a50 <NVIC_EncodePriority>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4619      	mov	r1, r3
 8002c98:	201c      	movs	r0, #28
 8002c9a:	f7ff feaf 	bl	80029fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002c9e:	201c      	movs	r0, #28
 8002ca0:	f7ff fe8e 	bl	80029c0 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8002ca4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002ca8:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cc0:	f000 fdca 	bl	8003858 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002cc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cc8:	f7ff ff1e 	bl	8002b08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cd2:	f7ff ff7b 	bl	8002bcc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	461a      	mov	r2, r3
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cf4:	f000 fe22 	bl	800393c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cfe:	f7ff ff13 	bl	8002b28 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002d02:	2100      	movs	r1, #0
 8002d04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d08:	f7ff ff75 	bl	8002bf6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002d0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d10:	f7ff ff84 	bl	8002c1c <LL_TIM_DisableMasterSlaveMode>

  add_TIM2_Init();
 8002d14:	f000 f862 	bl	8002ddc <add_TIM2_Init>
}
 8002d18:	bf00      	nop
 8002d1a:	3738      	adds	r7, #56	; 0x38
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2220      	movs	r2, #32
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f989 	bl	8004054 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002d42:	2002      	movs	r0, #2
 8002d44:	f7ff feb8 	bl	8002ab8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d48:	f7ff fe2c 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fe7c 	bl	8002a50 <NVIC_EncodePriority>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	201d      	movs	r0, #29
 8002d5e:	f7ff fe4d 	bl	80029fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002d62:	201d      	movs	r0, #29
 8002d64:	f7ff fe2c 	bl	80029c0 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8002d68:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 8002d72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	4619      	mov	r1, r3
 8002d82:	4815      	ldr	r0, [pc, #84]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002d84:	f000 fd68 	bl	8003858 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002d88:	4813      	ldr	r0, [pc, #76]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002d8a:	f7ff febd 	bl	8002b08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002d92:	f7ff ff1b 	bl	8002bcc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002d96:	2310      	movs	r3, #16
 8002d98:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	461a      	mov	r2, r3
 8002dae:	2101      	movs	r1, #1
 8002db0:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002db2:	f000 fdc3 	bl	800393c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002db6:	2101      	movs	r1, #1
 8002db8:	4807      	ldr	r0, [pc, #28]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002dba:	f7ff feb5 	bl	8002b28 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002dc2:	f7ff ff18 	bl	8002bf6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MX_TIM3_Init+0xb8>)
 8002dc8:	f7ff ff28 	bl	8002c1c <LL_TIM_DisableMasterSlaveMode>

  add_TIM3_Init();
 8002dcc:	f000 f812 	bl	8002df4 <add_TIM3_Init>
}
 8002dd0:	bf00      	nop
 8002dd2:	3738      	adds	r7, #56	; 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40000400 	.word	0x40000400

08002ddc <add_TIM2_Init>:

/* USER CODE BEGIN 1 */
void add_TIM2_Init(void){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM2);
 8002de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de4:	f7ff ff2a 	bl	8002c3c <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8002de8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dec:	f7ff fe7c 	bl	8002ae8 <LL_TIM_EnableCounter>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <add_TIM3_Init>:

void add_TIM3_Init(void){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM3);
 8002df8:	4803      	ldr	r0, [pc, #12]	; (8002e08 <add_TIM3_Init+0x14>)
 8002dfa:	f7ff ff1f 	bl	8002c3c <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8002dfe:	4802      	ldr	r0, [pc, #8]	; (8002e08 <add_TIM3_Init+0x14>)
 8002e00:	f7ff fe72 	bl	8002ae8 <LL_TIM_EnableCounter>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40000400 	.word	0x40000400

08002e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e12:	490e      	ldr	r1, [pc, #56]	; (8002e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e14:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <LoopForever+0xe>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e28:	4c0b      	ldr	r4, [pc, #44]	; (8002e58 <LoopForever+0x16>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e36:	f7ff fda3 	bl	8002980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f001 f8c7 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e3e:	f7ff f9f7 	bl	8002230 <main>

08002e42 <LoopForever>:

LoopForever:
    b LoopForever
 8002e42:	e7fe      	b.n	8002e42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002e50:	08007a48 	.word	0x08007a48
  ldr r2, =_sbss
 8002e54:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002e58:	200002b8 	.word	0x200002b8

08002e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC1_2_IRQHandler>
	...

08002e60 <LL_EXTI_EnableIT_0_31>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40010400 	.word	0x40010400

08002e84 <LL_EXTI_EnableIT_32_63>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	620b      	str	r3, [r1, #32]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <LL_EXTI_DisableIT_0_31>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <LL_EXTI_DisableIT_0_31+0x24>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_EXTI_DisableIT_0_31+0x24>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <LL_EXTI_DisableIT_32_63>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	620b      	str	r3, [r1, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <LL_EXTI_EnableEvent_0_31>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40010400 	.word	0x40010400

08002f1c <LL_EXTI_EnableEvent_32_63>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40010400 	.word	0x40010400

08002f40 <LL_EXTI_DisableEvent_0_31>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40010400 	.word	0x40010400

08002f68 <LL_EXTI_DisableEvent_32_63>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010400 	.word	0x40010400

08002f90 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40010400 	.word	0x40010400

08002fb4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	4904      	ldr	r1, [pc, #16]	; (8002ffc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010400 	.word	0x40010400

08003000 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	43db      	mvns	r3, r3
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40010400 	.word	0x40010400

08003028 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	60cb      	str	r3, [r1, #12]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40010400 	.word	0x40010400

0800304c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4904      	ldr	r1, [pc, #16]	; (800306c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4313      	orrs	r3, r2
 800305e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40010400 	.word	0x40010400

08003070 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	43db      	mvns	r3, r3
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003082:	4013      	ands	r3, r2
 8003084:	60cb      	str	r3, [r1, #12]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010400 	.word	0x40010400

08003098 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010400 	.word	0x40010400

080030c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7a1b      	ldrb	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80c2 	beq.w	800325a <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d05b      	beq.n	8003196 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7a5b      	ldrb	r3, [r3, #9]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00e      	beq.n	8003104 <LL_EXTI_Init+0x44>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d017      	beq.n	800311a <LL_EXTI_Init+0x5a>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d120      	bne.n	8003130 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff ff24 	bl	8002f40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff feaf 	bl	8002e60 <LL_EXTI_EnableIT_0_31>
          break;
 8003102:	e018      	b.n	8003136 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fecd 	bl	8002ea8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fef0 	bl	8002ef8 <LL_EXTI_EnableEvent_0_31>
          break;
 8003118:	e00d      	b.n	8003136 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe9e 	bl	8002e60 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fee5 	bl	8002ef8 <LL_EXTI_EnableEvent_0_31>
          break;
 800312e:	e002      	b.n	8003136 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
          break;
 8003134:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7a9b      	ldrb	r3, [r3, #10]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02b      	beq.n	8003196 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7a9b      	ldrb	r3, [r3, #10]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d00e      	beq.n	8003164 <LL_EXTI_Init+0xa4>
 8003146:	2b03      	cmp	r3, #3
 8003148:	d017      	beq.n	800317a <LL_EXTI_Init+0xba>
 800314a:	2b01      	cmp	r3, #1
 800314c:	d120      	bne.n	8003190 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff8c 	bl	8003070 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff17 	bl	8002f90 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003162:	e019      	b.n	8003198 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff35 	bl	8002fd8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff58 	bl	8003028 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003178:	e00e      	b.n	8003198 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ff06 	bl	8002f90 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff4d 	bl	8003028 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800318e:	e003      	b.n	8003198 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
            break;
 8003194:	e000      	b.n	8003198 <LL_EXTI_Init+0xd8>
        }
      }
 8003196:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d071      	beq.n	8003284 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7a5b      	ldrb	r3, [r3, #9]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d00e      	beq.n	80031c6 <LL_EXTI_Init+0x106>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d017      	beq.n	80031dc <LL_EXTI_Init+0x11c>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d120      	bne.n	80031f2 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fed7 	bl	8002f68 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe60 	bl	8002e84 <LL_EXTI_EnableIT_32_63>
          break;
 80031c4:	e018      	b.n	80031f8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fe80 	bl	8002ed0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fea1 	bl	8002f1c <LL_EXTI_EnableEvent_32_63>
          break;
 80031da:	e00d      	b.n	80031f8 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fe4f 	bl	8002e84 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe96 	bl	8002f1c <LL_EXTI_EnableEvent_32_63>
          break;
 80031f0:	e002      	b.n	80031f8 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
          break;
 80031f6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7a9b      	ldrb	r3, [r3, #10]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d041      	beq.n	8003284 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7a9b      	ldrb	r3, [r3, #10]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d00e      	beq.n	8003226 <LL_EXTI_Init+0x166>
 8003208:	2b03      	cmp	r3, #3
 800320a:	d017      	beq.n	800323c <LL_EXTI_Init+0x17c>
 800320c:	2b01      	cmp	r3, #1
 800320e:	d120      	bne.n	8003252 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff3f 	bl	8003098 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fec8 	bl	8002fb4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003224:	e02f      	b.n	8003286 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fee8 	bl	8003000 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff09 	bl	800304c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800323a:	e024      	b.n	8003286 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff feb7 	bl	8002fb4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fefe 	bl	800304c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003250:	e019      	b.n	8003286 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
            break;
 8003256:	bf00      	nop
 8003258:	e015      	b.n	8003286 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fe22 	bl	8002ea8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fe69 	bl	8002f40 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fe2c 	bl	8002ed0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fe73 	bl	8002f68 <LL_EXTI_DisableEvent_32_63>
 8003282:	e000      	b.n	8003286 <LL_EXTI_Init+0x1c6>
      }
 8003284:	bf00      	nop
#endif
  }
  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <LL_GPIO_SetPinMode>:
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	613b      	str	r3, [r7, #16]
  return result;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2103      	movs	r1, #3
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	61bb      	str	r3, [r7, #24]
  return result;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_GPIO_SetPinOutputType>:
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_GPIO_SetPinSpeed>:
{
 800331e:	b480      	push	{r7}
 8003320:	b089      	sub	sp, #36	; 0x24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	613b      	str	r3, [r7, #16]
  return result;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2103      	movs	r1, #3
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	401a      	ands	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	61bb      	str	r3, [r7, #24]
  return result;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	fab3 f383 	clz	r3, r3
 8003360:	b2db      	uxtb	r3, r3
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	3724      	adds	r7, #36	; 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_GPIO_SetPinPull>:
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	613b      	str	r3, [r7, #16]
  return result;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2103      	movs	r1, #3
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	61bb      	str	r3, [r7, #24]
  return result;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	60da      	str	r2, [r3, #12]
}
 80033ce:	bf00      	nop
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_GPIO_SetAFPin_0_7>:
{
 80033da:	b480      	push	{r7}
 80033dc:	b089      	sub	sp, #36	; 0x24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	613b      	str	r3, [r7, #16]
  return result;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	210f      	movs	r1, #15
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	401a      	ands	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	61bb      	str	r3, [r7, #24]
  return result;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	3724      	adds	r7, #36	; 0x24
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_GPIO_SetAFPin_8_15>:
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	613b      	str	r3, [r7, #16]
  return result;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	210f      	movs	r1, #15
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	401a      	ands	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	61bb      	str	r3, [r7, #24]
  return result;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800348e:	bf00      	nop
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b088      	sub	sp, #32
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	613b      	str	r3, [r7, #16]
  return result;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80034bc:	e051      	b.n	8003562 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d043      	beq.n	800355c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d003      	beq.n	80034e4 <LL_GPIO_Init+0x4a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d10e      	bne.n	8003502 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	461a      	mov	r2, r3
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff16 	bl	800331e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fef6 	bl	80032ee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	461a      	mov	r2, r3
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff36 	bl	800337c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d11a      	bne.n	800354e <LL_GPIO_Init+0xb4>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	60bb      	str	r3, [r7, #8]
  return result;
 8003524:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b07      	cmp	r3, #7
 800352e:	d807      	bhi.n	8003540 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	461a      	mov	r2, r3
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff4e 	bl	80033da <LL_GPIO_SetAFPin_0_7>
 800353e:	e006      	b.n	800354e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	461a      	mov	r2, r3
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff75 	bl	8003438 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fe9a 	bl	8003290 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3301      	adds	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1a6      	bne.n	80034be <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <LL_I2C_Enable>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_I2C_Disable>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0201 	bic.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_I2C_ConfigFilters>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0219      	lsls	r1, r3, #8
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_I2C_SetOwnAddress1>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	430a      	orrs	r2, r1
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <LL_I2C_EnableOwnAddress1>:
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_I2C_DisableOwnAddress1>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_I2C_SetTiming>:
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	611a      	str	r2, [r3, #16]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_I2C_SetMode>:
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_I2C_AcknowledgeNextData>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	605a      	str	r2, [r3, #4]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff65 	bl	800359a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	461a      	mov	r2, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ff6d 	bl	80035ba <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ffb6 	bl	8003658 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff44 	bl	800357a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffa0 	bl	8003638 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6919      	ldr	r1, [r3, #16]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	461a      	mov	r2, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff70 	bl	80035e8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff81 	bl	8003618 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ffa9 	bl	8003674 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffb6 	bl	800369a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <LL_TIM_SetPrescaler>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_TIM_SetAutoReload>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_TIM_SetRepetitionCounter>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_TIM_OC_SetCompareCH1>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_TIM_OC_SetCompareCH2>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_TIM_OC_SetCompareCH3>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_TIM_OC_SetCompareCH4>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_TIM_OC_SetCompareCH5>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <LL_TIM_OC_SetCompareCH6>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	615a      	str	r2, [r3, #20]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <LL_TIM_Init+0xd0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d007      	beq.n	8003880 <LL_TIM_Init+0x28>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003876:	d003      	beq.n	8003880 <LL_TIM_Init+0x28>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a2c      	ldr	r2, [pc, #176]	; (800392c <LL_TIM_Init+0xd4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d106      	bne.n	800388e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <LL_TIM_Init+0xd0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <LL_TIM_Init+0x66>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d00f      	beq.n	80038be <LL_TIM_Init+0x66>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <LL_TIM_Init+0xd4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <LL_TIM_Init+0x66>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <LL_TIM_Init+0xd8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <LL_TIM_Init+0x66>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <LL_TIM_Init+0xdc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <LL_TIM_Init+0x66>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <LL_TIM_Init+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d106      	bne.n	80038cc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff3b 	bl	8003754 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff27 	bl	8003738 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <LL_TIM_Init+0xd0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <LL_TIM_Init+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <LL_TIM_Init+0xd8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <LL_TIM_Init+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <LL_TIM_Init+0xdc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <LL_TIM_Init+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <LL_TIM_Init+0xe0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d105      	bne.n	8003916 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff2d 	bl	8003770 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff8e 	bl	8003838 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40000400 	.word	0x40000400
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	d01f      	beq.n	8003994 <LL_TIM_OC_Init+0x58>
 8003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003958:	d804      	bhi.n	8003964 <LL_TIM_OC_Init+0x28>
 800395a:	2b01      	cmp	r3, #1
 800395c:	d00c      	beq.n	8003978 <LL_TIM_OC_Init+0x3c>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d011      	beq.n	8003986 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003962:	e033      	b.n	80039cc <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d022      	beq.n	80039b0 <LL_TIM_OC_Init+0x74>
 800396a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396e:	d026      	beq.n	80039be <LL_TIM_OC_Init+0x82>
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d015      	beq.n	80039a2 <LL_TIM_OC_Init+0x66>
      break;
 8003976:	e029      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f82c 	bl	80039d8 <OC1Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]
      break;
 8003984:	e022      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f89f 	bl	8003acc <OC2Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e01b      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f916 	bl	8003bc8 <OC3Config>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	e014      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f98d 	bl	8003cc4 <OC4Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	75fb      	strb	r3, [r7, #23]
      break;
 80039ae:	e00d      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9ec 	bl	8003d90 <OC5Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]
      break;
 80039bc:	e006      	b.n	80039cc <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fa43 	bl	8003e4c <OC6Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ca:	bf00      	nop
  }

  return result;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0202 	bic.w	r2, r3, #2
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <OC1Config+0xe4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <OC1Config+0x7e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <OC1Config+0xe8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <OC1Config+0x7e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <OC1Config+0xec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <OC1Config+0x7e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <OC1Config+0xf0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d11e      	bne.n	8003a94 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f023 0208 	bic.w	r2, r3, #8
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0204 	bic.w	r2, r3, #4
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fe70 	bl	800378c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800

08003acc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0210 	bic.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	0212      	lsls	r2, r2, #8
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0220 	bic.w	r2, r3, #32
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0210 	bic.w	r2, r3, #16
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <OC2Config+0xec>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <OC2Config+0x84>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <OC2Config+0xf0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <OC2Config+0x84>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <OC2Config+0xf4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <OC2Config+0x84>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <OC2Config+0xf8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d11f      	bne.n	8003b90 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	019b      	lsls	r3, r3, #6
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe00 	bl	80037a8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	021b      	lsls	r3, r3, #8
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <OC3Config+0xec>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <OC3Config+0x82>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <OC3Config+0xf0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <OC3Config+0x82>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <OC3Config+0xf4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <OC3Config+0x82>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <OC3Config+0xf8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d11f      	bne.n	8003c8a <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fd91 	bl	80037c4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800

08003cc4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	0212      	lsls	r2, r2, #8
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	031b      	lsls	r3, r3, #12
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	031b      	lsls	r3, r3, #12
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <OC4Config+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <OC4Config+0x84>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <OC4Config+0xc0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <OC4Config+0x84>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <OC4Config+0xc4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <OC4Config+0x84>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <OC4Config+0xc8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d107      	bne.n	8003d58 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	019b      	lsls	r3, r3, #6
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fd38 	bl	80037e0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <OC5Config+0xac>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <OC5Config+0x74>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <OC5Config+0xb0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <OC5Config+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <OC5Config+0xb4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <OC5Config+0x74>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <OC5Config+0xb8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fce9 	bl	80037fc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	0212      	lsls	r2, r2, #8
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	051b      	lsls	r3, r3, #20
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	051b      	lsls	r3, r3, #20
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <OC6Config+0xac>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <OC6Config+0x76>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <OC6Config+0xb0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <OC6Config+0x76>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <OC6Config+0xb4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <OC6Config+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <OC6Config+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d109      	bne.n	8003ed6 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	029b      	lsls	r3, r3, #10
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fc9a 	bl	800381c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	4a07      	ldr	r2, [pc, #28]	; (8003f38 <LL_InitTick+0x30>)
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <LL_InitTick+0x30>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f26:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <LL_InitTick+0x30>)
 8003f28:	2205      	movs	r2, #5
 8003f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000e010 	.word	0xe000e010

08003f3c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003f44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ffdd 	bl	8003f08 <LL_InitTick>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <LL_mDelay+0x44>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003f66:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d00c      	beq.n	8003f8a <LL_mDelay+0x32>
  {
    Delay++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3301      	adds	r3, #1
 8003f74:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003f76:	e008      	b.n	8003f8a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <LL_mDelay+0x44>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <LL_mDelay+0x32>
    {
      Delay--;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f3      	bne.n	8003f78 <LL_mDelay+0x20>
    }
  }
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000e010 	.word	0xe000e010

08003fa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <LL_SetSystemCoreClock+0x1c>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000060 	.word	0x20000060

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000064 	.word	0x20000064

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4e0d      	ldr	r6, [pc, #52]	; (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1ba4      	subs	r4, r4, r6
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2500      	movs	r5, #0
 8003fd8:	42a5      	cmp	r5, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4e0b      	ldr	r6, [pc, #44]	; (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	; (8004010 <__libc_init_array+0x44>)
 8003fe0:	f003 fb44 	bl	800766c <_init>
 8003fe4:	1ba4      	subs	r4, r4, r6
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2500      	movs	r5, #0
 8003fea:	42a5      	cmp	r5, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff4:	4798      	blx	r3
 8003ff6:	3501      	adds	r5, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ffe:	4798      	blx	r3
 8004000:	3501      	adds	r5, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	08007a40 	.word	0x08007a40
 8004008:	08007a40 	.word	0x08007a40
 800400c:	08007a40 	.word	0x08007a40
 8004010:	08007a44 	.word	0x08007a44

08004014 <__locale_ctype_ptr>:
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__locale_ctype_ptr+0x14>)
 8004016:	4a05      	ldr	r2, [pc, #20]	; (800402c <__locale_ctype_ptr+0x18>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf08      	it	eq
 8004020:	4613      	moveq	r3, r2
 8004022:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004026:	4770      	bx	lr
 8004028:	20000064 	.word	0x20000064
 800402c:	200000c8 	.word	0x200000c8

08004030 <__ascii_mbtowc>:
 8004030:	b082      	sub	sp, #8
 8004032:	b901      	cbnz	r1, 8004036 <__ascii_mbtowc+0x6>
 8004034:	a901      	add	r1, sp, #4
 8004036:	b142      	cbz	r2, 800404a <__ascii_mbtowc+0x1a>
 8004038:	b14b      	cbz	r3, 800404e <__ascii_mbtowc+0x1e>
 800403a:	7813      	ldrb	r3, [r2, #0]
 800403c:	600b      	str	r3, [r1, #0]
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	1c10      	adds	r0, r2, #0
 8004042:	bf18      	it	ne
 8004044:	2001      	movne	r0, #1
 8004046:	b002      	add	sp, #8
 8004048:	4770      	bx	lr
 800404a:	4610      	mov	r0, r2
 800404c:	e7fb      	b.n	8004046 <__ascii_mbtowc+0x16>
 800404e:	f06f 0001 	mvn.w	r0, #1
 8004052:	e7f8      	b.n	8004046 <__ascii_mbtowc+0x16>

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <__cvt>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	ec55 4b10 	vmov	r4, r5, d0
 800406c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800406e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004072:	2d00      	cmp	r5, #0
 8004074:	460e      	mov	r6, r1
 8004076:	4691      	mov	r9, r2
 8004078:	4619      	mov	r1, r3
 800407a:	bfb8      	it	lt
 800407c:	4622      	movlt	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	f027 0720 	bic.w	r7, r7, #32
 8004084:	bfbb      	ittet	lt
 8004086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800408a:	461d      	movlt	r5, r3
 800408c:	2300      	movge	r3, #0
 800408e:	232d      	movlt	r3, #45	; 0x2d
 8004090:	bfb8      	it	lt
 8004092:	4614      	movlt	r4, r2
 8004094:	2f46      	cmp	r7, #70	; 0x46
 8004096:	700b      	strb	r3, [r1, #0]
 8004098:	d004      	beq.n	80040a4 <__cvt+0x40>
 800409a:	2f45      	cmp	r7, #69	; 0x45
 800409c:	d100      	bne.n	80040a0 <__cvt+0x3c>
 800409e:	3601      	adds	r6, #1
 80040a0:	2102      	movs	r1, #2
 80040a2:	e000      	b.n	80040a6 <__cvt+0x42>
 80040a4:	2103      	movs	r1, #3
 80040a6:	ab03      	add	r3, sp, #12
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	ab02      	add	r3, sp, #8
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	4632      	mov	r2, r6
 80040b0:	4653      	mov	r3, sl
 80040b2:	ec45 4b10 	vmov	d0, r4, r5
 80040b6:	f000 fceb 	bl	8004a90 <_dtoa_r>
 80040ba:	2f47      	cmp	r7, #71	; 0x47
 80040bc:	4680      	mov	r8, r0
 80040be:	d102      	bne.n	80040c6 <__cvt+0x62>
 80040c0:	f019 0f01 	tst.w	r9, #1
 80040c4:	d026      	beq.n	8004114 <__cvt+0xb0>
 80040c6:	2f46      	cmp	r7, #70	; 0x46
 80040c8:	eb08 0906 	add.w	r9, r8, r6
 80040cc:	d111      	bne.n	80040f2 <__cvt+0x8e>
 80040ce:	f898 3000 	ldrb.w	r3, [r8]
 80040d2:	2b30      	cmp	r3, #48	; 0x30
 80040d4:	d10a      	bne.n	80040ec <__cvt+0x88>
 80040d6:	2200      	movs	r2, #0
 80040d8:	2300      	movs	r3, #0
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80040e2:	b918      	cbnz	r0, 80040ec <__cvt+0x88>
 80040e4:	f1c6 0601 	rsb	r6, r6, #1
 80040e8:	f8ca 6000 	str.w	r6, [sl]
 80040ec:	f8da 3000 	ldr.w	r3, [sl]
 80040f0:	4499      	add	r9, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	2300      	movs	r3, #0
 80040f6:	4620      	mov	r0, r4
 80040f8:	4629      	mov	r1, r5
 80040fa:	f7fc fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80040fe:	b938      	cbnz	r0, 8004110 <__cvt+0xac>
 8004100:	2230      	movs	r2, #48	; 0x30
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	454b      	cmp	r3, r9
 8004106:	d205      	bcs.n	8004114 <__cvt+0xb0>
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	9103      	str	r1, [sp, #12]
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e7f8      	b.n	8004102 <__cvt+0x9e>
 8004110:	f8cd 900c 	str.w	r9, [sp, #12]
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004118:	eba3 0308 	sub.w	r3, r3, r8
 800411c:	4640      	mov	r0, r8
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	b004      	add	sp, #16
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004126 <__exponent>:
 8004126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004128:	2900      	cmp	r1, #0
 800412a:	4604      	mov	r4, r0
 800412c:	bfba      	itte	lt
 800412e:	4249      	neglt	r1, r1
 8004130:	232d      	movlt	r3, #45	; 0x2d
 8004132:	232b      	movge	r3, #43	; 0x2b
 8004134:	2909      	cmp	r1, #9
 8004136:	f804 2b02 	strb.w	r2, [r4], #2
 800413a:	7043      	strb	r3, [r0, #1]
 800413c:	dd20      	ble.n	8004180 <__exponent+0x5a>
 800413e:	f10d 0307 	add.w	r3, sp, #7
 8004142:	461f      	mov	r7, r3
 8004144:	260a      	movs	r6, #10
 8004146:	fb91 f5f6 	sdiv	r5, r1, r6
 800414a:	fb06 1115 	mls	r1, r6, r5, r1
 800414e:	3130      	adds	r1, #48	; 0x30
 8004150:	2d09      	cmp	r5, #9
 8004152:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004156:	f103 32ff 	add.w	r2, r3, #4294967295
 800415a:	4629      	mov	r1, r5
 800415c:	dc09      	bgt.n	8004172 <__exponent+0x4c>
 800415e:	3130      	adds	r1, #48	; 0x30
 8004160:	3b02      	subs	r3, #2
 8004162:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004166:	42bb      	cmp	r3, r7
 8004168:	4622      	mov	r2, r4
 800416a:	d304      	bcc.n	8004176 <__exponent+0x50>
 800416c:	1a10      	subs	r0, r2, r0
 800416e:	b003      	add	sp, #12
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004172:	4613      	mov	r3, r2
 8004174:	e7e7      	b.n	8004146 <__exponent+0x20>
 8004176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800417a:	f804 2b01 	strb.w	r2, [r4], #1
 800417e:	e7f2      	b.n	8004166 <__exponent+0x40>
 8004180:	2330      	movs	r3, #48	; 0x30
 8004182:	4419      	add	r1, r3
 8004184:	7083      	strb	r3, [r0, #2]
 8004186:	1d02      	adds	r2, r0, #4
 8004188:	70c1      	strb	r1, [r0, #3]
 800418a:	e7ef      	b.n	800416c <__exponent+0x46>

0800418c <_printf_float>:
 800418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	b08d      	sub	sp, #52	; 0x34
 8004192:	460c      	mov	r4, r1
 8004194:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004198:	4616      	mov	r6, r2
 800419a:	461f      	mov	r7, r3
 800419c:	4605      	mov	r5, r0
 800419e:	f001 fa2f 	bl	8005600 <_localeconv_r>
 80041a2:	6803      	ldr	r3, [r0, #0]
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fc f812 	bl	80001d0 <strlen>
 80041ac:	2300      	movs	r3, #0
 80041ae:	930a      	str	r3, [sp, #40]	; 0x28
 80041b0:	f8d8 3000 	ldr.w	r3, [r8]
 80041b4:	9005      	str	r0, [sp, #20]
 80041b6:	3307      	adds	r3, #7
 80041b8:	f023 0307 	bic.w	r3, r3, #7
 80041bc:	f103 0208 	add.w	r2, r3, #8
 80041c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80041c4:	f8d4 b000 	ldr.w	fp, [r4]
 80041c8:	f8c8 2000 	str.w	r2, [r8]
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041dc:	9307      	str	r3, [sp, #28]
 80041de:	f8cd 8018 	str.w	r8, [sp, #24]
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295
 80041e6:	4ba7      	ldr	r3, [pc, #668]	; (8004484 <_printf_float+0x2f8>)
 80041e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ec:	f7fc fc9e 	bl	8000b2c <__aeabi_dcmpun>
 80041f0:	bb70      	cbnz	r0, 8004250 <_printf_float+0xc4>
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <_printf_float+0x2f8>)
 80041f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041fc:	f7fc fc78 	bl	8000af0 <__aeabi_dcmple>
 8004200:	bb30      	cbnz	r0, 8004250 <_printf_float+0xc4>
 8004202:	2200      	movs	r2, #0
 8004204:	2300      	movs	r3, #0
 8004206:	4640      	mov	r0, r8
 8004208:	4649      	mov	r1, r9
 800420a:	f7fc fc67 	bl	8000adc <__aeabi_dcmplt>
 800420e:	b110      	cbz	r0, 8004216 <_printf_float+0x8a>
 8004210:	232d      	movs	r3, #45	; 0x2d
 8004212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004216:	4a9c      	ldr	r2, [pc, #624]	; (8004488 <_printf_float+0x2fc>)
 8004218:	4b9c      	ldr	r3, [pc, #624]	; (800448c <_printf_float+0x300>)
 800421a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800421e:	bf8c      	ite	hi
 8004220:	4690      	movhi	r8, r2
 8004222:	4698      	movls	r8, r3
 8004224:	2303      	movs	r3, #3
 8004226:	f02b 0204 	bic.w	r2, fp, #4
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	6022      	str	r2, [r4, #0]
 800422e:	f04f 0900 	mov.w	r9, #0
 8004232:	9700      	str	r7, [sp, #0]
 8004234:	4633      	mov	r3, r6
 8004236:	aa0b      	add	r2, sp, #44	; 0x2c
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 f9e6 	bl	800460c <_printf_common>
 8004240:	3001      	adds	r0, #1
 8004242:	f040 808d 	bne.w	8004360 <_printf_float+0x1d4>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	b00d      	add	sp, #52	; 0x34
 800424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	4640      	mov	r0, r8
 8004256:	4649      	mov	r1, r9
 8004258:	f7fc fc68 	bl	8000b2c <__aeabi_dcmpun>
 800425c:	b110      	cbz	r0, 8004264 <_printf_float+0xd8>
 800425e:	4a8c      	ldr	r2, [pc, #560]	; (8004490 <_printf_float+0x304>)
 8004260:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <_printf_float+0x308>)
 8004262:	e7da      	b.n	800421a <_printf_float+0x8e>
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	1c4b      	adds	r3, r1, #1
 8004268:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800426c:	a80a      	add	r0, sp, #40	; 0x28
 800426e:	d13e      	bne.n	80042ee <_printf_float+0x162>
 8004270:	2306      	movs	r3, #6
 8004272:	6063      	str	r3, [r4, #4]
 8004274:	2300      	movs	r3, #0
 8004276:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800427a:	ab09      	add	r3, sp, #36	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	ec49 8b10 	vmov	d0, r8, r9
 8004282:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004286:	6022      	str	r2, [r4, #0]
 8004288:	f8cd a004 	str.w	sl, [sp, #4]
 800428c:	6861      	ldr	r1, [r4, #4]
 800428e:	4628      	mov	r0, r5
 8004290:	f7ff fee8 	bl	8004064 <__cvt>
 8004294:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004298:	2b47      	cmp	r3, #71	; 0x47
 800429a:	4680      	mov	r8, r0
 800429c:	d109      	bne.n	80042b2 <_printf_float+0x126>
 800429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a0:	1cd8      	adds	r0, r3, #3
 80042a2:	db02      	blt.n	80042aa <_printf_float+0x11e>
 80042a4:	6862      	ldr	r2, [r4, #4]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	dd47      	ble.n	800433a <_printf_float+0x1ae>
 80042aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80042ae:	fa5f fa8a 	uxtb.w	sl, sl
 80042b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80042b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042b8:	d824      	bhi.n	8004304 <_printf_float+0x178>
 80042ba:	3901      	subs	r1, #1
 80042bc:	4652      	mov	r2, sl
 80042be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042c2:	9109      	str	r1, [sp, #36]	; 0x24
 80042c4:	f7ff ff2f 	bl	8004126 <__exponent>
 80042c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ca:	1813      	adds	r3, r2, r0
 80042cc:	2a01      	cmp	r2, #1
 80042ce:	4681      	mov	r9, r0
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	dc02      	bgt.n	80042da <_printf_float+0x14e>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	07d1      	lsls	r1, r2, #31
 80042d8:	d501      	bpl.n	80042de <_printf_float+0x152>
 80042da:	3301      	adds	r3, #1
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0a5      	beq.n	8004232 <_printf_float+0xa6>
 80042e6:	232d      	movs	r3, #45	; 0x2d
 80042e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ec:	e7a1      	b.n	8004232 <_printf_float+0xa6>
 80042ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80042f2:	f000 8177 	beq.w	80045e4 <_printf_float+0x458>
 80042f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80042fa:	d1bb      	bne.n	8004274 <_printf_float+0xe8>
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d1b9      	bne.n	8004274 <_printf_float+0xe8>
 8004300:	2301      	movs	r3, #1
 8004302:	e7b6      	b.n	8004272 <_printf_float+0xe6>
 8004304:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004308:	d119      	bne.n	800433e <_printf_float+0x1b2>
 800430a:	2900      	cmp	r1, #0
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	dd0c      	ble.n	800432a <_printf_float+0x19e>
 8004310:	6121      	str	r1, [r4, #16]
 8004312:	b913      	cbnz	r3, 800431a <_printf_float+0x18e>
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	07d2      	lsls	r2, r2, #31
 8004318:	d502      	bpl.n	8004320 <_printf_float+0x194>
 800431a:	3301      	adds	r3, #1
 800431c:	440b      	add	r3, r1
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004322:	65a3      	str	r3, [r4, #88]	; 0x58
 8004324:	f04f 0900 	mov.w	r9, #0
 8004328:	e7d9      	b.n	80042de <_printf_float+0x152>
 800432a:	b913      	cbnz	r3, 8004332 <_printf_float+0x1a6>
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	07d0      	lsls	r0, r2, #31
 8004330:	d501      	bpl.n	8004336 <_printf_float+0x1aa>
 8004332:	3302      	adds	r3, #2
 8004334:	e7f3      	b.n	800431e <_printf_float+0x192>
 8004336:	2301      	movs	r3, #1
 8004338:	e7f1      	b.n	800431e <_printf_float+0x192>
 800433a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800433e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004342:	4293      	cmp	r3, r2
 8004344:	db05      	blt.n	8004352 <_printf_float+0x1c6>
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	07d1      	lsls	r1, r2, #31
 800434c:	d5e8      	bpl.n	8004320 <_printf_float+0x194>
 800434e:	3301      	adds	r3, #1
 8004350:	e7e5      	b.n	800431e <_printf_float+0x192>
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfd4      	ite	le
 8004356:	f1c3 0302 	rsble	r3, r3, #2
 800435a:	2301      	movgt	r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	e7de      	b.n	800431e <_printf_float+0x192>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	055a      	lsls	r2, r3, #21
 8004364:	d407      	bmi.n	8004376 <_printf_float+0x1ea>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	4642      	mov	r2, r8
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	d12b      	bne.n	80043cc <_printf_float+0x240>
 8004374:	e767      	b.n	8004246 <_printf_float+0xba>
 8004376:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800437a:	f240 80dc 	bls.w	8004536 <_printf_float+0x3aa>
 800437e:	2200      	movs	r2, #0
 8004380:	2300      	movs	r3, #0
 8004382:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004386:	f7fc fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800438a:	2800      	cmp	r0, #0
 800438c:	d033      	beq.n	80043f6 <_printf_float+0x26a>
 800438e:	2301      	movs	r3, #1
 8004390:	4a41      	ldr	r2, [pc, #260]	; (8004498 <_printf_float+0x30c>)
 8004392:	4631      	mov	r1, r6
 8004394:	4628      	mov	r0, r5
 8004396:	47b8      	blx	r7
 8004398:	3001      	adds	r0, #1
 800439a:	f43f af54 	beq.w	8004246 <_printf_float+0xba>
 800439e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043a2:	429a      	cmp	r2, r3
 80043a4:	db02      	blt.n	80043ac <_printf_float+0x220>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	07d8      	lsls	r0, r3, #31
 80043aa:	d50f      	bpl.n	80043cc <_printf_float+0x240>
 80043ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b8      	blx	r7
 80043b6:	3001      	adds	r0, #1
 80043b8:	f43f af45 	beq.w	8004246 <_printf_float+0xba>
 80043bc:	f04f 0800 	mov.w	r8, #0
 80043c0:	f104 091a 	add.w	r9, r4, #26
 80043c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	4543      	cmp	r3, r8
 80043ca:	dc09      	bgt.n	80043e0 <_printf_float+0x254>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	079b      	lsls	r3, r3, #30
 80043d0:	f100 8103 	bmi.w	80045da <_printf_float+0x44e>
 80043d4:	68e0      	ldr	r0, [r4, #12]
 80043d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043d8:	4298      	cmp	r0, r3
 80043da:	bfb8      	it	lt
 80043dc:	4618      	movlt	r0, r3
 80043de:	e734      	b.n	800424a <_printf_float+0xbe>
 80043e0:	2301      	movs	r3, #1
 80043e2:	464a      	mov	r2, r9
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	f43f af2b 	beq.w	8004246 <_printf_float+0xba>
 80043f0:	f108 0801 	add.w	r8, r8, #1
 80043f4:	e7e6      	b.n	80043c4 <_printf_float+0x238>
 80043f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dc2b      	bgt.n	8004454 <_printf_float+0x2c8>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4a26      	ldr	r2, [pc, #152]	; (8004498 <_printf_float+0x30c>)
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af1d 	beq.w	8004246 <_printf_float+0xba>
 800440c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440e:	b923      	cbnz	r3, 800441a <_printf_float+0x28e>
 8004410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004412:	b913      	cbnz	r3, 800441a <_printf_float+0x28e>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	07d9      	lsls	r1, r3, #31
 8004418:	d5d8      	bpl.n	80043cc <_printf_float+0x240>
 800441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	f43f af0e 	beq.w	8004246 <_printf_float+0xba>
 800442a:	f04f 0900 	mov.w	r9, #0
 800442e:	f104 0a1a 	add.w	sl, r4, #26
 8004432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004434:	425b      	negs	r3, r3
 8004436:	454b      	cmp	r3, r9
 8004438:	dc01      	bgt.n	800443e <_printf_float+0x2b2>
 800443a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443c:	e794      	b.n	8004368 <_printf_float+0x1dc>
 800443e:	2301      	movs	r3, #1
 8004440:	4652      	mov	r2, sl
 8004442:	4631      	mov	r1, r6
 8004444:	4628      	mov	r0, r5
 8004446:	47b8      	blx	r7
 8004448:	3001      	adds	r0, #1
 800444a:	f43f aefc 	beq.w	8004246 <_printf_float+0xba>
 800444e:	f109 0901 	add.w	r9, r9, #1
 8004452:	e7ee      	b.n	8004432 <_printf_float+0x2a6>
 8004454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004458:	429a      	cmp	r2, r3
 800445a:	bfa8      	it	ge
 800445c:	461a      	movge	r2, r3
 800445e:	2a00      	cmp	r2, #0
 8004460:	4691      	mov	r9, r2
 8004462:	dd07      	ble.n	8004474 <_printf_float+0x2e8>
 8004464:	4613      	mov	r3, r2
 8004466:	4631      	mov	r1, r6
 8004468:	4642      	mov	r2, r8
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f aee9 	beq.w	8004246 <_printf_float+0xba>
 8004474:	f104 031a 	add.w	r3, r4, #26
 8004478:	f04f 0b00 	mov.w	fp, #0
 800447c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004480:	9306      	str	r3, [sp, #24]
 8004482:	e015      	b.n	80044b0 <_printf_float+0x324>
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	08007767 	.word	0x08007767
 800448c:	08007763 	.word	0x08007763
 8004490:	0800776f 	.word	0x0800776f
 8004494:	0800776b 	.word	0x0800776b
 8004498:	08007773 	.word	0x08007773
 800449c:	2301      	movs	r3, #1
 800449e:	9a06      	ldr	r2, [sp, #24]
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f aecd 	beq.w	8004246 <_printf_float+0xba>
 80044ac:	f10b 0b01 	add.w	fp, fp, #1
 80044b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044b4:	ebaa 0309 	sub.w	r3, sl, r9
 80044b8:	455b      	cmp	r3, fp
 80044ba:	dcef      	bgt.n	800449c <_printf_float+0x310>
 80044bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c0:	429a      	cmp	r2, r3
 80044c2:	44d0      	add	r8, sl
 80044c4:	db15      	blt.n	80044f2 <_printf_float+0x366>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	07da      	lsls	r2, r3, #31
 80044ca:	d412      	bmi.n	80044f2 <_printf_float+0x366>
 80044cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044d0:	eba3 020a 	sub.w	r2, r3, sl
 80044d4:	eba3 0a01 	sub.w	sl, r3, r1
 80044d8:	4592      	cmp	sl, r2
 80044da:	bfa8      	it	ge
 80044dc:	4692      	movge	sl, r2
 80044de:	f1ba 0f00 	cmp.w	sl, #0
 80044e2:	dc0e      	bgt.n	8004502 <_printf_float+0x376>
 80044e4:	f04f 0800 	mov.w	r8, #0
 80044e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044ec:	f104 091a 	add.w	r9, r4, #26
 80044f0:	e019      	b.n	8004526 <_printf_float+0x39a>
 80044f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1e5      	bne.n	80044cc <_printf_float+0x340>
 8004500:	e6a1      	b.n	8004246 <_printf_float+0xba>
 8004502:	4653      	mov	r3, sl
 8004504:	4642      	mov	r2, r8
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	d1e9      	bne.n	80044e4 <_printf_float+0x358>
 8004510:	e699      	b.n	8004246 <_printf_float+0xba>
 8004512:	2301      	movs	r3, #1
 8004514:	464a      	mov	r2, r9
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae92 	beq.w	8004246 <_printf_float+0xba>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	eba3 030a 	sub.w	r3, r3, sl
 8004530:	4543      	cmp	r3, r8
 8004532:	dcee      	bgt.n	8004512 <_printf_float+0x386>
 8004534:	e74a      	b.n	80043cc <_printf_float+0x240>
 8004536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004538:	2a01      	cmp	r2, #1
 800453a:	dc01      	bgt.n	8004540 <_printf_float+0x3b4>
 800453c:	07db      	lsls	r3, r3, #31
 800453e:	d53a      	bpl.n	80045b6 <_printf_float+0x42a>
 8004540:	2301      	movs	r3, #1
 8004542:	4642      	mov	r2, r8
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	f43f ae7b 	beq.w	8004246 <_printf_float+0xba>
 8004550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004554:	4631      	mov	r1, r6
 8004556:	4628      	mov	r0, r5
 8004558:	47b8      	blx	r7
 800455a:	3001      	adds	r0, #1
 800455c:	f108 0801 	add.w	r8, r8, #1
 8004560:	f43f ae71 	beq.w	8004246 <_printf_float+0xba>
 8004564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004566:	2200      	movs	r2, #0
 8004568:	f103 3aff 	add.w	sl, r3, #4294967295
 800456c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004570:	2300      	movs	r3, #0
 8004572:	f7fc faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004576:	b9c8      	cbnz	r0, 80045ac <_printf_float+0x420>
 8004578:	4653      	mov	r3, sl
 800457a:	4642      	mov	r2, r8
 800457c:	4631      	mov	r1, r6
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	d10e      	bne.n	80045a4 <_printf_float+0x418>
 8004586:	e65e      	b.n	8004246 <_printf_float+0xba>
 8004588:	2301      	movs	r3, #1
 800458a:	4652      	mov	r2, sl
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	f43f ae57 	beq.w	8004246 <_printf_float+0xba>
 8004598:	f108 0801 	add.w	r8, r8, #1
 800459c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	4543      	cmp	r3, r8
 80045a2:	dcf1      	bgt.n	8004588 <_printf_float+0x3fc>
 80045a4:	464b      	mov	r3, r9
 80045a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045aa:	e6de      	b.n	800436a <_printf_float+0x1de>
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	f104 0a1a 	add.w	sl, r4, #26
 80045b4:	e7f2      	b.n	800459c <_printf_float+0x410>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e7df      	b.n	800457a <_printf_float+0x3ee>
 80045ba:	2301      	movs	r3, #1
 80045bc:	464a      	mov	r2, r9
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	f43f ae3e 	beq.w	8004246 <_printf_float+0xba>
 80045ca:	f108 0801 	add.w	r8, r8, #1
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	4543      	cmp	r3, r8
 80045d6:	dcf0      	bgt.n	80045ba <_printf_float+0x42e>
 80045d8:	e6fc      	b.n	80043d4 <_printf_float+0x248>
 80045da:	f04f 0800 	mov.w	r8, #0
 80045de:	f104 0919 	add.w	r9, r4, #25
 80045e2:	e7f4      	b.n	80045ce <_printf_float+0x442>
 80045e4:	2900      	cmp	r1, #0
 80045e6:	f43f ae8b 	beq.w	8004300 <_printf_float+0x174>
 80045ea:	2300      	movs	r3, #0
 80045ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80045f0:	ab09      	add	r3, sp, #36	; 0x24
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	ec49 8b10 	vmov	d0, r8, r9
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	f8cd a004 	str.w	sl, [sp, #4]
 80045fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004602:	4628      	mov	r0, r5
 8004604:	f7ff fd2e 	bl	8004064 <__cvt>
 8004608:	4680      	mov	r8, r0
 800460a:	e648      	b.n	800429e <_printf_float+0x112>

0800460c <_printf_common>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	4691      	mov	r9, r2
 8004612:	461f      	mov	r7, r3
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800461c:	4293      	cmp	r3, r2
 800461e:	bfb8      	it	lt
 8004620:	4613      	movlt	r3, r2
 8004622:	f8c9 3000 	str.w	r3, [r9]
 8004626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462a:	4606      	mov	r6, r0
 800462c:	460c      	mov	r4, r1
 800462e:	b112      	cbz	r2, 8004636 <_printf_common+0x2a>
 8004630:	3301      	adds	r3, #1
 8004632:	f8c9 3000 	str.w	r3, [r9]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0699      	lsls	r1, r3, #26
 800463a:	bf42      	ittt	mi
 800463c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004640:	3302      	addmi	r3, #2
 8004642:	f8c9 3000 	strmi.w	r3, [r9]
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	f015 0506 	ands.w	r5, r5, #6
 800464c:	d107      	bne.n	800465e <_printf_common+0x52>
 800464e:	f104 0a19 	add.w	sl, r4, #25
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	f8d9 2000 	ldr.w	r2, [r9]
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	42ab      	cmp	r3, r5
 800465c:	dc28      	bgt.n	80046b0 <_printf_common+0xa4>
 800465e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	3300      	adds	r3, #0
 8004666:	bf18      	it	ne
 8004668:	2301      	movne	r3, #1
 800466a:	0692      	lsls	r2, r2, #26
 800466c:	d42d      	bmi.n	80046ca <_printf_common+0xbe>
 800466e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004672:	4639      	mov	r1, r7
 8004674:	4630      	mov	r0, r6
 8004676:	47c0      	blx	r8
 8004678:	3001      	adds	r0, #1
 800467a:	d020      	beq.n	80046be <_printf_common+0xb2>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	68e5      	ldr	r5, [r4, #12]
 8004680:	f8d9 2000 	ldr.w	r2, [r9]
 8004684:	f003 0306 	and.w	r3, r3, #6
 8004688:	2b04      	cmp	r3, #4
 800468a:	bf08      	it	eq
 800468c:	1aad      	subeq	r5, r5, r2
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	bf0c      	ite	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	2500      	movne	r5, #0
 800469a:	4293      	cmp	r3, r2
 800469c:	bfc4      	itt	gt
 800469e:	1a9b      	subgt	r3, r3, r2
 80046a0:	18ed      	addgt	r5, r5, r3
 80046a2:	f04f 0900 	mov.w	r9, #0
 80046a6:	341a      	adds	r4, #26
 80046a8:	454d      	cmp	r5, r9
 80046aa:	d11a      	bne.n	80046e2 <_printf_common+0xd6>
 80046ac:	2000      	movs	r0, #0
 80046ae:	e008      	b.n	80046c2 <_printf_common+0xb6>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4652      	mov	r2, sl
 80046b4:	4639      	mov	r1, r7
 80046b6:	4630      	mov	r0, r6
 80046b8:	47c0      	blx	r8
 80046ba:	3001      	adds	r0, #1
 80046bc:	d103      	bne.n	80046c6 <_printf_common+0xba>
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c6:	3501      	adds	r5, #1
 80046c8:	e7c3      	b.n	8004652 <_printf_common+0x46>
 80046ca:	18e1      	adds	r1, r4, r3
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	2030      	movs	r0, #48	; 0x30
 80046d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046d4:	4422      	add	r2, r4
 80046d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046de:	3302      	adds	r3, #2
 80046e0:	e7c5      	b.n	800466e <_printf_common+0x62>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4622      	mov	r2, r4
 80046e6:	4639      	mov	r1, r7
 80046e8:	4630      	mov	r0, r6
 80046ea:	47c0      	blx	r8
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0e6      	beq.n	80046be <_printf_common+0xb2>
 80046f0:	f109 0901 	add.w	r9, r9, #1
 80046f4:	e7d8      	b.n	80046a8 <_printf_common+0x9c>
	...

080046f8 <_printf_i>:
 80046f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004700:	460c      	mov	r4, r1
 8004702:	7e09      	ldrb	r1, [r1, #24]
 8004704:	b085      	sub	sp, #20
 8004706:	296e      	cmp	r1, #110	; 0x6e
 8004708:	4617      	mov	r7, r2
 800470a:	4606      	mov	r6, r0
 800470c:	4698      	mov	r8, r3
 800470e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004710:	f000 80b3 	beq.w	800487a <_printf_i+0x182>
 8004714:	d822      	bhi.n	800475c <_printf_i+0x64>
 8004716:	2963      	cmp	r1, #99	; 0x63
 8004718:	d036      	beq.n	8004788 <_printf_i+0x90>
 800471a:	d80a      	bhi.n	8004732 <_printf_i+0x3a>
 800471c:	2900      	cmp	r1, #0
 800471e:	f000 80b9 	beq.w	8004894 <_printf_i+0x19c>
 8004722:	2958      	cmp	r1, #88	; 0x58
 8004724:	f000 8083 	beq.w	800482e <_printf_i+0x136>
 8004728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800472c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004730:	e032      	b.n	8004798 <_printf_i+0xa0>
 8004732:	2964      	cmp	r1, #100	; 0x64
 8004734:	d001      	beq.n	800473a <_printf_i+0x42>
 8004736:	2969      	cmp	r1, #105	; 0x69
 8004738:	d1f6      	bne.n	8004728 <_printf_i+0x30>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	6813      	ldr	r3, [r2, #0]
 800473e:	0605      	lsls	r5, r0, #24
 8004740:	f103 0104 	add.w	r1, r3, #4
 8004744:	d52a      	bpl.n	800479c <_printf_i+0xa4>
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da03      	bge.n	8004756 <_printf_i+0x5e>
 800474e:	222d      	movs	r2, #45	; 0x2d
 8004750:	425b      	negs	r3, r3
 8004752:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004756:	486f      	ldr	r0, [pc, #444]	; (8004914 <_printf_i+0x21c>)
 8004758:	220a      	movs	r2, #10
 800475a:	e039      	b.n	80047d0 <_printf_i+0xd8>
 800475c:	2973      	cmp	r1, #115	; 0x73
 800475e:	f000 809d 	beq.w	800489c <_printf_i+0x1a4>
 8004762:	d808      	bhi.n	8004776 <_printf_i+0x7e>
 8004764:	296f      	cmp	r1, #111	; 0x6f
 8004766:	d020      	beq.n	80047aa <_printf_i+0xb2>
 8004768:	2970      	cmp	r1, #112	; 0x70
 800476a:	d1dd      	bne.n	8004728 <_printf_i+0x30>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	f043 0320 	orr.w	r3, r3, #32
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	e003      	b.n	800477e <_printf_i+0x86>
 8004776:	2975      	cmp	r1, #117	; 0x75
 8004778:	d017      	beq.n	80047aa <_printf_i+0xb2>
 800477a:	2978      	cmp	r1, #120	; 0x78
 800477c:	d1d4      	bne.n	8004728 <_printf_i+0x30>
 800477e:	2378      	movs	r3, #120	; 0x78
 8004780:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004784:	4864      	ldr	r0, [pc, #400]	; (8004918 <_printf_i+0x220>)
 8004786:	e055      	b.n	8004834 <_printf_i+0x13c>
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	1d19      	adds	r1, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6011      	str	r1, [r2, #0]
 8004790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004798:	2301      	movs	r3, #1
 800479a:	e08c      	b.n	80048b6 <_printf_i+0x1be>
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6011      	str	r1, [r2, #0]
 80047a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047a4:	bf18      	it	ne
 80047a6:	b21b      	sxthne	r3, r3
 80047a8:	e7cf      	b.n	800474a <_printf_i+0x52>
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1d18      	adds	r0, r3, #4
 80047b0:	6010      	str	r0, [r2, #0]
 80047b2:	0628      	lsls	r0, r5, #24
 80047b4:	d501      	bpl.n	80047ba <_printf_i+0xc2>
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	e002      	b.n	80047c0 <_printf_i+0xc8>
 80047ba:	0668      	lsls	r0, r5, #25
 80047bc:	d5fb      	bpl.n	80047b6 <_printf_i+0xbe>
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	4854      	ldr	r0, [pc, #336]	; (8004914 <_printf_i+0x21c>)
 80047c2:	296f      	cmp	r1, #111	; 0x6f
 80047c4:	bf14      	ite	ne
 80047c6:	220a      	movne	r2, #10
 80047c8:	2208      	moveq	r2, #8
 80047ca:	2100      	movs	r1, #0
 80047cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d0:	6865      	ldr	r5, [r4, #4]
 80047d2:	60a5      	str	r5, [r4, #8]
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	f2c0 8095 	blt.w	8004904 <_printf_i+0x20c>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	f021 0104 	bic.w	r1, r1, #4
 80047e0:	6021      	str	r1, [r4, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d13d      	bne.n	8004862 <_printf_i+0x16a>
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	f040 808e 	bne.w	8004908 <_printf_i+0x210>
 80047ec:	4665      	mov	r5, ip
 80047ee:	2a08      	cmp	r2, #8
 80047f0:	d10b      	bne.n	800480a <_printf_i+0x112>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	07db      	lsls	r3, r3, #31
 80047f6:	d508      	bpl.n	800480a <_printf_i+0x112>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	6862      	ldr	r2, [r4, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bfde      	ittt	le
 8004800:	2330      	movle	r3, #48	; 0x30
 8004802:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004806:	f105 35ff 	addle.w	r5, r5, #4294967295
 800480a:	ebac 0305 	sub.w	r3, ip, r5
 800480e:	6123      	str	r3, [r4, #16]
 8004810:	f8cd 8000 	str.w	r8, [sp]
 8004814:	463b      	mov	r3, r7
 8004816:	aa03      	add	r2, sp, #12
 8004818:	4621      	mov	r1, r4
 800481a:	4630      	mov	r0, r6
 800481c:	f7ff fef6 	bl	800460c <_printf_common>
 8004820:	3001      	adds	r0, #1
 8004822:	d14d      	bne.n	80048c0 <_printf_i+0x1c8>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	b005      	add	sp, #20
 800482a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800482e:	4839      	ldr	r0, [pc, #228]	; (8004914 <_printf_i+0x21c>)
 8004830:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	6821      	ldr	r1, [r4, #0]
 8004838:	1d1d      	adds	r5, r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6015      	str	r5, [r2, #0]
 800483e:	060a      	lsls	r2, r1, #24
 8004840:	d50b      	bpl.n	800485a <_printf_i+0x162>
 8004842:	07ca      	lsls	r2, r1, #31
 8004844:	bf44      	itt	mi
 8004846:	f041 0120 	orrmi.w	r1, r1, #32
 800484a:	6021      	strmi	r1, [r4, #0]
 800484c:	b91b      	cbnz	r3, 8004856 <_printf_i+0x15e>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	f022 0220 	bic.w	r2, r2, #32
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	2210      	movs	r2, #16
 8004858:	e7b7      	b.n	80047ca <_printf_i+0xd2>
 800485a:	064d      	lsls	r5, r1, #25
 800485c:	bf48      	it	mi
 800485e:	b29b      	uxthmi	r3, r3
 8004860:	e7ef      	b.n	8004842 <_printf_i+0x14a>
 8004862:	4665      	mov	r5, ip
 8004864:	fbb3 f1f2 	udiv	r1, r3, r2
 8004868:	fb02 3311 	mls	r3, r2, r1, r3
 800486c:	5cc3      	ldrb	r3, [r0, r3]
 800486e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004872:	460b      	mov	r3, r1
 8004874:	2900      	cmp	r1, #0
 8004876:	d1f5      	bne.n	8004864 <_printf_i+0x16c>
 8004878:	e7b9      	b.n	80047ee <_printf_i+0xf6>
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	6961      	ldr	r1, [r4, #20]
 8004880:	1d18      	adds	r0, r3, #4
 8004882:	6010      	str	r0, [r2, #0]
 8004884:	0628      	lsls	r0, r5, #24
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	d501      	bpl.n	800488e <_printf_i+0x196>
 800488a:	6019      	str	r1, [r3, #0]
 800488c:	e002      	b.n	8004894 <_printf_i+0x19c>
 800488e:	066a      	lsls	r2, r5, #25
 8004890:	d5fb      	bpl.n	800488a <_printf_i+0x192>
 8004892:	8019      	strh	r1, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	4665      	mov	r5, ip
 800489a:	e7b9      	b.n	8004810 <_printf_i+0x118>
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	1d19      	adds	r1, r3, #4
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	681d      	ldr	r5, [r3, #0]
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	2100      	movs	r1, #0
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7fb fc99 	bl	80001e0 <memchr>
 80048ae:	b108      	cbz	r0, 80048b4 <_printf_i+0x1bc>
 80048b0:	1b40      	subs	r0, r0, r5
 80048b2:	6060      	str	r0, [r4, #4]
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	2300      	movs	r3, #0
 80048ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048be:	e7a7      	b.n	8004810 <_printf_i+0x118>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4639      	mov	r1, r7
 80048c6:	4630      	mov	r0, r6
 80048c8:	47c0      	blx	r8
 80048ca:	3001      	adds	r0, #1
 80048cc:	d0aa      	beq.n	8004824 <_printf_i+0x12c>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	079b      	lsls	r3, r3, #30
 80048d2:	d413      	bmi.n	80048fc <_printf_i+0x204>
 80048d4:	68e0      	ldr	r0, [r4, #12]
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	4298      	cmp	r0, r3
 80048da:	bfb8      	it	lt
 80048dc:	4618      	movlt	r0, r3
 80048de:	e7a3      	b.n	8004828 <_printf_i+0x130>
 80048e0:	2301      	movs	r3, #1
 80048e2:	464a      	mov	r2, r9
 80048e4:	4639      	mov	r1, r7
 80048e6:	4630      	mov	r0, r6
 80048e8:	47c0      	blx	r8
 80048ea:	3001      	adds	r0, #1
 80048ec:	d09a      	beq.n	8004824 <_printf_i+0x12c>
 80048ee:	3501      	adds	r5, #1
 80048f0:	68e3      	ldr	r3, [r4, #12]
 80048f2:	9a03      	ldr	r2, [sp, #12]
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	42ab      	cmp	r3, r5
 80048f8:	dcf2      	bgt.n	80048e0 <_printf_i+0x1e8>
 80048fa:	e7eb      	b.n	80048d4 <_printf_i+0x1dc>
 80048fc:	2500      	movs	r5, #0
 80048fe:	f104 0919 	add.w	r9, r4, #25
 8004902:	e7f5      	b.n	80048f0 <_printf_i+0x1f8>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ac      	bne.n	8004862 <_printf_i+0x16a>
 8004908:	7803      	ldrb	r3, [r0, #0]
 800490a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800490e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004912:	e76c      	b.n	80047ee <_printf_i+0xf6>
 8004914:	08007775 	.word	0x08007775
 8004918:	08007786 	.word	0x08007786

0800491c <siprintf>:
 800491c:	b40e      	push	{r1, r2, r3}
 800491e:	b500      	push	{lr}
 8004920:	b09c      	sub	sp, #112	; 0x70
 8004922:	ab1d      	add	r3, sp, #116	; 0x74
 8004924:	9002      	str	r0, [sp, #8]
 8004926:	9006      	str	r0, [sp, #24]
 8004928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800492c:	4809      	ldr	r0, [pc, #36]	; (8004954 <siprintf+0x38>)
 800492e:	9107      	str	r1, [sp, #28]
 8004930:	9104      	str	r1, [sp, #16]
 8004932:	4909      	ldr	r1, [pc, #36]	; (8004958 <siprintf+0x3c>)
 8004934:	f853 2b04 	ldr.w	r2, [r3], #4
 8004938:	9105      	str	r1, [sp, #20]
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	a902      	add	r1, sp, #8
 8004940:	f001 fa6a 	bl	8005e18 <_svfiprintf_r>
 8004944:	9b02      	ldr	r3, [sp, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	b01c      	add	sp, #112	; 0x70
 800494c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004950:	b003      	add	sp, #12
 8004952:	4770      	bx	lr
 8004954:	20000064 	.word	0x20000064
 8004958:	ffff0208 	.word	0xffff0208

0800495c <__ascii_wctomb>:
 800495c:	b149      	cbz	r1, 8004972 <__ascii_wctomb+0x16>
 800495e:	2aff      	cmp	r2, #255	; 0xff
 8004960:	bf85      	ittet	hi
 8004962:	238a      	movhi	r3, #138	; 0x8a
 8004964:	6003      	strhi	r3, [r0, #0]
 8004966:	700a      	strbls	r2, [r1, #0]
 8004968:	f04f 30ff 	movhi.w	r0, #4294967295
 800496c:	bf98      	it	ls
 800496e:	2001      	movls	r0, #1
 8004970:	4770      	bx	lr
 8004972:	4608      	mov	r0, r1
 8004974:	4770      	bx	lr

08004976 <quorem>:
 8004976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6903      	ldr	r3, [r0, #16]
 800497c:	690c      	ldr	r4, [r1, #16]
 800497e:	42a3      	cmp	r3, r4
 8004980:	4680      	mov	r8, r0
 8004982:	f2c0 8082 	blt.w	8004a8a <quorem+0x114>
 8004986:	3c01      	subs	r4, #1
 8004988:	f101 0714 	add.w	r7, r1, #20
 800498c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004990:	f100 0614 	add.w	r6, r0, #20
 8004994:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004998:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800499c:	eb06 030c 	add.w	r3, r6, ip
 80049a0:	3501      	adds	r5, #1
 80049a2:	eb07 090c 	add.w	r9, r7, ip
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80049ac:	b395      	cbz	r5, 8004a14 <quorem+0x9e>
 80049ae:	f04f 0a00 	mov.w	sl, #0
 80049b2:	4638      	mov	r0, r7
 80049b4:	46b6      	mov	lr, r6
 80049b6:	46d3      	mov	fp, sl
 80049b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80049bc:	b293      	uxth	r3, r2
 80049be:	fb05 a303 	mla	r3, r5, r3, sl
 80049c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ebab 0303 	sub.w	r3, fp, r3
 80049cc:	0c12      	lsrs	r2, r2, #16
 80049ce:	f8de b000 	ldr.w	fp, [lr]
 80049d2:	fb05 a202 	mla	r2, r5, r2, sl
 80049d6:	fa13 f38b 	uxtah	r3, r3, fp
 80049da:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80049de:	fa1f fb82 	uxth.w	fp, r2
 80049e2:	f8de 2000 	ldr.w	r2, [lr]
 80049e6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049f4:	4581      	cmp	r9, r0
 80049f6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049fa:	f84e 3b04 	str.w	r3, [lr], #4
 80049fe:	d2db      	bcs.n	80049b8 <quorem+0x42>
 8004a00:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a04:	b933      	cbnz	r3, 8004a14 <quorem+0x9e>
 8004a06:	9b01      	ldr	r3, [sp, #4]
 8004a08:	3b04      	subs	r3, #4
 8004a0a:	429e      	cmp	r6, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	d330      	bcc.n	8004a72 <quorem+0xfc>
 8004a10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a14:	4640      	mov	r0, r8
 8004a16:	f001 f829 	bl	8005a6c <__mcmp>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	db25      	blt.n	8004a6a <quorem+0xf4>
 8004a1e:	3501      	adds	r5, #1
 8004a20:	4630      	mov	r0, r6
 8004a22:	f04f 0c00 	mov.w	ip, #0
 8004a26:	f857 2b04 	ldr.w	r2, [r7], #4
 8004a2a:	f8d0 e000 	ldr.w	lr, [r0]
 8004a2e:	b293      	uxth	r3, r2
 8004a30:	ebac 0303 	sub.w	r3, ip, r3
 8004a34:	0c12      	lsrs	r2, r2, #16
 8004a36:	fa13 f38e 	uxtah	r3, r3, lr
 8004a3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a48:	45b9      	cmp	r9, r7
 8004a4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a4e:	f840 3b04 	str.w	r3, [r0], #4
 8004a52:	d2e8      	bcs.n	8004a26 <quorem+0xb0>
 8004a54:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a58:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a5c:	b92a      	cbnz	r2, 8004a6a <quorem+0xf4>
 8004a5e:	3b04      	subs	r3, #4
 8004a60:	429e      	cmp	r6, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	d30b      	bcc.n	8004a7e <quorem+0x108>
 8004a66:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	b003      	add	sp, #12
 8004a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	3b04      	subs	r3, #4
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	d1ca      	bne.n	8004a10 <quorem+0x9a>
 8004a7a:	3c01      	subs	r4, #1
 8004a7c:	e7c5      	b.n	8004a0a <quorem+0x94>
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d1ef      	bne.n	8004a66 <quorem+0xf0>
 8004a86:	3c01      	subs	r4, #1
 8004a88:	e7ea      	b.n	8004a60 <quorem+0xea>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7ee      	b.n	8004a6c <quorem+0xf6>
	...

08004a90 <_dtoa_r>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	ec57 6b10 	vmov	r6, r7, d0
 8004a98:	b097      	sub	sp, #92	; 0x5c
 8004a9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a9c:	9106      	str	r1, [sp, #24]
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8004aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8004aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004aa8:	e9cd 6700 	strd	r6, r7, [sp]
 8004aac:	b93d      	cbnz	r5, 8004abe <_dtoa_r+0x2e>
 8004aae:	2010      	movs	r0, #16
 8004ab0:	f000 fdb4 	bl	800561c <malloc>
 8004ab4:	6260      	str	r0, [r4, #36]	; 0x24
 8004ab6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aba:	6005      	str	r5, [r0, #0]
 8004abc:	60c5      	str	r5, [r0, #12]
 8004abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	b151      	cbz	r1, 8004ada <_dtoa_r+0x4a>
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	604a      	str	r2, [r1, #4]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4093      	lsls	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 fdeb 	bl	80056aa <_Bfree>
 8004ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	1e3b      	subs	r3, r7, #0
 8004adc:	bfbb      	ittet	lt
 8004ade:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ae2:	9301      	strlt	r3, [sp, #4]
 8004ae4:	2300      	movge	r3, #0
 8004ae6:	2201      	movlt	r2, #1
 8004ae8:	bfac      	ite	ge
 8004aea:	f8c8 3000 	strge.w	r3, [r8]
 8004aee:	f8c8 2000 	strlt.w	r2, [r8]
 8004af2:	4baf      	ldr	r3, [pc, #700]	; (8004db0 <_dtoa_r+0x320>)
 8004af4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004af8:	ea33 0308 	bics.w	r3, r3, r8
 8004afc:	d114      	bne.n	8004b28 <_dtoa_r+0x98>
 8004afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	9b00      	ldr	r3, [sp, #0]
 8004b08:	b923      	cbnz	r3, 8004b14 <_dtoa_r+0x84>
 8004b0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f000 8542 	beq.w	8005598 <_dtoa_r+0xb08>
 8004b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004dc4 <_dtoa_r+0x334>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8544 	beq.w	80055a8 <_dtoa_r+0xb18>
 8004b20:	f10b 0303 	add.w	r3, fp, #3
 8004b24:	f000 bd3e 	b.w	80055a4 <_dtoa_r+0xb14>
 8004b28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	4630      	mov	r0, r6
 8004b32:	4639      	mov	r1, r7
 8004b34:	f7fb ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b38:	4681      	mov	r9, r0
 8004b3a:	b168      	cbz	r0, 8004b58 <_dtoa_r+0xc8>
 8004b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b3e:	2301      	movs	r3, #1
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8524 	beq.w	8005592 <_dtoa_r+0xb02>
 8004b4a:	4b9a      	ldr	r3, [pc, #616]	; (8004db4 <_dtoa_r+0x324>)
 8004b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	f000 bd28 	b.w	80055a8 <_dtoa_r+0xb18>
 8004b58:	aa14      	add	r2, sp, #80	; 0x50
 8004b5a:	a915      	add	r1, sp, #84	; 0x54
 8004b5c:	ec47 6b10 	vmov	d0, r6, r7
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fffa 	bl	8005b5a <__d2b>
 8004b66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b6a:	9004      	str	r0, [sp, #16]
 8004b6c:	2d00      	cmp	r5, #0
 8004b6e:	d07c      	beq.n	8004c6a <_dtoa_r+0x1da>
 8004b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004b78:	46b2      	mov	sl, r6
 8004b7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004b86:	2200      	movs	r2, #0
 8004b88:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <_dtoa_r+0x328>)
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	f7fb fb7b 	bl	8000288 <__aeabi_dsub>
 8004b92:	a381      	add	r3, pc, #516	; (adr r3, 8004d98 <_dtoa_r+0x308>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	a380      	add	r3, pc, #512	; (adr r3, 8004da0 <_dtoa_r+0x310>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb fb73 	bl	800028c <__adddf3>
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	4628      	mov	r0, r5
 8004baa:	460f      	mov	r7, r1
 8004bac:	f7fb fcba 	bl	8000524 <__aeabi_i2d>
 8004bb0:	a37d      	add	r3, pc, #500	; (adr r3, 8004da8 <_dtoa_r+0x318>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fd1f 	bl	80005f8 <__aeabi_dmul>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fb63 	bl	800028c <__adddf3>
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	f7fb ffc5 	bl	8000b58 <__aeabi_d2iz>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb ff80 	bl	8000adc <__aeabi_dcmplt>
 8004bdc:	b148      	cbz	r0, 8004bf2 <_dtoa_r+0x162>
 8004bde:	4650      	mov	r0, sl
 8004be0:	f7fb fca0 	bl	8000524 <__aeabi_i2d>
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	f7fb ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bec:	b908      	cbnz	r0, 8004bf2 <_dtoa_r+0x162>
 8004bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bf2:	f1ba 0f16 	cmp.w	sl, #22
 8004bf6:	d859      	bhi.n	8004cac <_dtoa_r+0x21c>
 8004bf8:	4970      	ldr	r1, [pc, #448]	; (8004dbc <_dtoa_r+0x32c>)
 8004bfa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c06:	f7fb ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d050      	beq.n	8004cb0 <_dtoa_r+0x220>
 8004c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c12:	2300      	movs	r3, #0
 8004c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c18:	1b5d      	subs	r5, r3, r5
 8004c1a:	f1b5 0801 	subs.w	r8, r5, #1
 8004c1e:	bf49      	itett	mi
 8004c20:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c24:	2300      	movpl	r3, #0
 8004c26:	9305      	strmi	r3, [sp, #20]
 8004c28:	f04f 0800 	movmi.w	r8, #0
 8004c2c:	bf58      	it	pl
 8004c2e:	9305      	strpl	r3, [sp, #20]
 8004c30:	f1ba 0f00 	cmp.w	sl, #0
 8004c34:	db3e      	blt.n	8004cb4 <_dtoa_r+0x224>
 8004c36:	2300      	movs	r3, #0
 8004c38:	44d0      	add	r8, sl
 8004c3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	9b06      	ldr	r3, [sp, #24]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	f200 8090 	bhi.w	8004d68 <_dtoa_r+0x2d8>
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	bfc4      	itt	gt
 8004c4c:	3b04      	subgt	r3, #4
 8004c4e:	9306      	strgt	r3, [sp, #24]
 8004c50:	9b06      	ldr	r3, [sp, #24]
 8004c52:	f1a3 0302 	sub.w	r3, r3, #2
 8004c56:	bfcc      	ite	gt
 8004c58:	2500      	movgt	r5, #0
 8004c5a:	2501      	movle	r5, #1
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	f200 808f 	bhi.w	8004d80 <_dtoa_r+0x2f0>
 8004c62:	e8df f003 	tbb	[pc, r3]
 8004c66:	7f7d      	.short	0x7f7d
 8004c68:	7131      	.short	0x7131
 8004c6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004c6e:	441d      	add	r5, r3
 8004c70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004c74:	2820      	cmp	r0, #32
 8004c76:	dd13      	ble.n	8004ca0 <_dtoa_r+0x210>
 8004c78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004c7c:	9b00      	ldr	r3, [sp, #0]
 8004c7e:	fa08 f800 	lsl.w	r8, r8, r0
 8004c82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c86:	fa23 f000 	lsr.w	r0, r3, r0
 8004c8a:	ea48 0000 	orr.w	r0, r8, r0
 8004c8e:	f7fb fc39 	bl	8000504 <__aeabi_ui2d>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4682      	mov	sl, r0
 8004c96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004c9a:	3d01      	subs	r5, #1
 8004c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c9e:	e772      	b.n	8004b86 <_dtoa_r+0xf6>
 8004ca0:	9b00      	ldr	r3, [sp, #0]
 8004ca2:	f1c0 0020 	rsb	r0, r0, #32
 8004ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8004caa:	e7f0      	b.n	8004c8e <_dtoa_r+0x1fe>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7b1      	b.n	8004c14 <_dtoa_r+0x184>
 8004cb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cb2:	e7b0      	b.n	8004c16 <_dtoa_r+0x186>
 8004cb4:	9b05      	ldr	r3, [sp, #20]
 8004cb6:	eba3 030a 	sub.w	r3, r3, sl
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	f1ca 0300 	rsb	r3, sl, #0
 8004cc0:	9307      	str	r3, [sp, #28]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8004cc6:	e7bb      	b.n	8004c40 <_dtoa_r+0x1b0>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	930a      	str	r3, [sp, #40]	; 0x28
 8004ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dd59      	ble.n	8004d86 <_dtoa_r+0x2f6>
 8004cd2:	9302      	str	r3, [sp, #8]
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cd8:	2200      	movs	r2, #0
 8004cda:	6072      	str	r2, [r6, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	f102 0014 	add.w	r0, r2, #20
 8004ce2:	4298      	cmp	r0, r3
 8004ce4:	6871      	ldr	r1, [r6, #4]
 8004ce6:	d953      	bls.n	8004d90 <_dtoa_r+0x300>
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 fcaa 	bl	8005642 <_Balloc>
 8004cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf0:	6030      	str	r0, [r6, #0]
 8004cf2:	f1b9 0f0e 	cmp.w	r9, #14
 8004cf6:	f8d3 b000 	ldr.w	fp, [r3]
 8004cfa:	f200 80e6 	bhi.w	8004eca <_dtoa_r+0x43a>
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	f000 80e3 	beq.w	8004eca <_dtoa_r+0x43a>
 8004d04:	ed9d 7b00 	vldr	d7, [sp]
 8004d08:	f1ba 0f00 	cmp.w	sl, #0
 8004d0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004d10:	dd74      	ble.n	8004dfc <_dtoa_r+0x36c>
 8004d12:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <_dtoa_r+0x32c>)
 8004d14:	f00a 030f 	and.w	r3, sl, #15
 8004d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d1c:	ed93 7b00 	vldr	d7, [r3]
 8004d20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004d24:	06f0      	lsls	r0, r6, #27
 8004d26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d2a:	d565      	bpl.n	8004df8 <_dtoa_r+0x368>
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <_dtoa_r+0x330>)
 8004d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d36:	f7fb fd89 	bl	800084c <__aeabi_ddiv>
 8004d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8004d3e:	f006 060f 	and.w	r6, r6, #15
 8004d42:	2503      	movs	r5, #3
 8004d44:	4f1e      	ldr	r7, [pc, #120]	; (8004dc0 <_dtoa_r+0x330>)
 8004d46:	e04c      	b.n	8004de2 <_dtoa_r+0x352>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d4e:	4453      	add	r3, sl
 8004d50:	f103 0901 	add.w	r9, r3, #1
 8004d54:	9302      	str	r3, [sp, #8]
 8004d56:	464b      	mov	r3, r9
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	bfb8      	it	lt
 8004d5c:	2301      	movlt	r3, #1
 8004d5e:	e7ba      	b.n	8004cd6 <_dtoa_r+0x246>
 8004d60:	2300      	movs	r3, #0
 8004d62:	e7b2      	b.n	8004cca <_dtoa_r+0x23a>
 8004d64:	2300      	movs	r3, #0
 8004d66:	e7f0      	b.n	8004d4a <_dtoa_r+0x2ba>
 8004d68:	2501      	movs	r5, #1
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9306      	str	r3, [sp, #24]
 8004d6e:	950a      	str	r5, [sp, #40]	; 0x28
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	4699      	mov	r9, r3
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2312      	movs	r3, #18
 8004d7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d7e:	e7aa      	b.n	8004cd6 <_dtoa_r+0x246>
 8004d80:	2301      	movs	r3, #1
 8004d82:	930a      	str	r3, [sp, #40]	; 0x28
 8004d84:	e7f4      	b.n	8004d70 <_dtoa_r+0x2e0>
 8004d86:	2301      	movs	r3, #1
 8004d88:	9302      	str	r3, [sp, #8]
 8004d8a:	4699      	mov	r9, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	e7f5      	b.n	8004d7c <_dtoa_r+0x2ec>
 8004d90:	3101      	adds	r1, #1
 8004d92:	6071      	str	r1, [r6, #4]
 8004d94:	0052      	lsls	r2, r2, #1
 8004d96:	e7a2      	b.n	8004cde <_dtoa_r+0x24e>
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	7ff00000 	.word	0x7ff00000
 8004db4:	08007774 	.word	0x08007774
 8004db8:	3ff80000 	.word	0x3ff80000
 8004dbc:	080078d0 	.word	0x080078d0
 8004dc0:	080078a8 	.word	0x080078a8
 8004dc4:	080078a1 	.word	0x080078a1
 8004dc8:	07f1      	lsls	r1, r6, #31
 8004dca:	d508      	bpl.n	8004dde <_dtoa_r+0x34e>
 8004dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd4:	f7fb fc10 	bl	80005f8 <__aeabi_dmul>
 8004dd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ddc:	3501      	adds	r5, #1
 8004dde:	1076      	asrs	r6, r6, #1
 8004de0:	3708      	adds	r7, #8
 8004de2:	2e00      	cmp	r6, #0
 8004de4:	d1f0      	bne.n	8004dc8 <_dtoa_r+0x338>
 8004de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dee:	f7fb fd2d 	bl	800084c <__aeabi_ddiv>
 8004df2:	e9cd 0100 	strd	r0, r1, [sp]
 8004df6:	e01a      	b.n	8004e2e <_dtoa_r+0x39e>
 8004df8:	2502      	movs	r5, #2
 8004dfa:	e7a3      	b.n	8004d44 <_dtoa_r+0x2b4>
 8004dfc:	f000 80a0 	beq.w	8004f40 <_dtoa_r+0x4b0>
 8004e00:	f1ca 0600 	rsb	r6, sl, #0
 8004e04:	4b9f      	ldr	r3, [pc, #636]	; (8005084 <_dtoa_r+0x5f4>)
 8004e06:	4fa0      	ldr	r7, [pc, #640]	; (8005088 <_dtoa_r+0x5f8>)
 8004e08:	f006 020f 	and.w	r2, r6, #15
 8004e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e18:	f7fb fbee 	bl	80005f8 <__aeabi_dmul>
 8004e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e20:	1136      	asrs	r6, r6, #4
 8004e22:	2300      	movs	r3, #0
 8004e24:	2502      	movs	r5, #2
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d17f      	bne.n	8004f2a <_dtoa_r+0x49a>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e1      	bne.n	8004df2 <_dtoa_r+0x362>
 8004e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8087 	beq.w	8004f44 <_dtoa_r+0x4b4>
 8004e36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	4b93      	ldr	r3, [pc, #588]	; (800508c <_dtoa_r+0x5fc>)
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb fe4b 	bl	8000adc <__aeabi_dcmplt>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d07c      	beq.n	8004f44 <_dtoa_r+0x4b4>
 8004e4a:	f1b9 0f00 	cmp.w	r9, #0
 8004e4e:	d079      	beq.n	8004f44 <_dtoa_r+0x4b4>
 8004e50:	9b02      	ldr	r3, [sp, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dd35      	ble.n	8004ec2 <_dtoa_r+0x432>
 8004e56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e5a:	9308      	str	r3, [sp, #32]
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	2200      	movs	r2, #0
 8004e60:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <_dtoa_r+0x600>)
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7fb fbc8 	bl	80005f8 <__aeabi_dmul>
 8004e68:	e9cd 0100 	strd	r0, r1, [sp]
 8004e6c:	9f02      	ldr	r7, [sp, #8]
 8004e6e:	3501      	adds	r5, #1
 8004e70:	4628      	mov	r0, r5
 8004e72:	f7fb fb57 	bl	8000524 <__aeabi_i2d>
 8004e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e7a:	f7fb fbbd 	bl	80005f8 <__aeabi_dmul>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4b84      	ldr	r3, [pc, #528]	; (8005094 <_dtoa_r+0x604>)
 8004e82:	f7fb fa03 	bl	800028c <__adddf3>
 8004e86:	4605      	mov	r5, r0
 8004e88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	d15d      	bne.n	8004f4c <_dtoa_r+0x4bc>
 8004e90:	2200      	movs	r2, #0
 8004e92:	4b81      	ldr	r3, [pc, #516]	; (8005098 <_dtoa_r+0x608>)
 8004e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e98:	f7fb f9f6 	bl	8000288 <__aeabi_dsub>
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	4633      	mov	r3, r6
 8004ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ea4:	f7fb fe38 	bl	8000b18 <__aeabi_dcmpgt>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f040 8288 	bne.w	80053be <_dtoa_r+0x92e>
 8004eae:	462a      	mov	r2, r5
 8004eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb8:	f7fb fe10 	bl	8000adc <__aeabi_dcmplt>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f040 827c 	bne.w	80053ba <_dtoa_r+0x92a>
 8004ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ec6:	e9cd 2300 	strd	r2, r3, [sp]
 8004eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f2c0 8150 	blt.w	8005172 <_dtoa_r+0x6e2>
 8004ed2:	f1ba 0f0e 	cmp.w	sl, #14
 8004ed6:	f300 814c 	bgt.w	8005172 <_dtoa_r+0x6e2>
 8004eda:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <_dtoa_r+0x5f4>)
 8004edc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ee0:	ed93 7b00 	vldr	d7, [r3]
 8004ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004eec:	f280 80d8 	bge.w	80050a0 <_dtoa_r+0x610>
 8004ef0:	f1b9 0f00 	cmp.w	r9, #0
 8004ef4:	f300 80d4 	bgt.w	80050a0 <_dtoa_r+0x610>
 8004ef8:	f040 825e 	bne.w	80053b8 <_dtoa_r+0x928>
 8004efc:	2200      	movs	r2, #0
 8004efe:	4b66      	ldr	r3, [pc, #408]	; (8005098 <_dtoa_r+0x608>)
 8004f00:	ec51 0b17 	vmov	r0, r1, d7
 8004f04:	f7fb fb78 	bl	80005f8 <__aeabi_dmul>
 8004f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f0c:	f7fb fdfa 	bl	8000b04 <__aeabi_dcmpge>
 8004f10:	464f      	mov	r7, r9
 8004f12:	464e      	mov	r6, r9
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f040 8234 	bne.w	8005382 <_dtoa_r+0x8f2>
 8004f1a:	2331      	movs	r3, #49	; 0x31
 8004f1c:	f10b 0501 	add.w	r5, fp, #1
 8004f20:	f88b 3000 	strb.w	r3, [fp]
 8004f24:	f10a 0a01 	add.w	sl, sl, #1
 8004f28:	e22f      	b.n	800538a <_dtoa_r+0x8fa>
 8004f2a:	07f2      	lsls	r2, r6, #31
 8004f2c:	d505      	bpl.n	8004f3a <_dtoa_r+0x4aa>
 8004f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f32:	f7fb fb61 	bl	80005f8 <__aeabi_dmul>
 8004f36:	3501      	adds	r5, #1
 8004f38:	2301      	movs	r3, #1
 8004f3a:	1076      	asrs	r6, r6, #1
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	e772      	b.n	8004e26 <_dtoa_r+0x396>
 8004f40:	2502      	movs	r5, #2
 8004f42:	e774      	b.n	8004e2e <_dtoa_r+0x39e>
 8004f44:	f8cd a020 	str.w	sl, [sp, #32]
 8004f48:	464f      	mov	r7, r9
 8004f4a:	e791      	b.n	8004e70 <_dtoa_r+0x3e0>
 8004f4c:	4b4d      	ldr	r3, [pc, #308]	; (8005084 <_dtoa_r+0x5f4>)
 8004f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d047      	beq.n	8004fec <_dtoa_r+0x55c>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	2000      	movs	r0, #0
 8004f62:	494e      	ldr	r1, [pc, #312]	; (800509c <_dtoa_r+0x60c>)
 8004f64:	f7fb fc72 	bl	800084c <__aeabi_ddiv>
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4633      	mov	r3, r6
 8004f6c:	f7fb f98c 	bl	8000288 <__aeabi_dsub>
 8004f70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f74:	465d      	mov	r5, fp
 8004f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f7a:	f7fb fded 	bl	8000b58 <__aeabi_d2iz>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	f7fb fad0 	bl	8000524 <__aeabi_i2d>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f8c:	f7fb f97c 	bl	8000288 <__aeabi_dsub>
 8004f90:	3630      	adds	r6, #48	; 0x30
 8004f92:	f805 6b01 	strb.w	r6, [r5], #1
 8004f96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f9e:	f7fb fd9d 	bl	8000adc <__aeabi_dcmplt>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d163      	bne.n	800506e <_dtoa_r+0x5de>
 8004fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004faa:	2000      	movs	r0, #0
 8004fac:	4937      	ldr	r1, [pc, #220]	; (800508c <_dtoa_r+0x5fc>)
 8004fae:	f7fb f96b 	bl	8000288 <__aeabi_dsub>
 8004fb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fb6:	f7fb fd91 	bl	8000adc <__aeabi_dcmplt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	f040 80b7 	bne.w	800512e <_dtoa_r+0x69e>
 8004fc0:	eba5 030b 	sub.w	r3, r5, fp
 8004fc4:	429f      	cmp	r7, r3
 8004fc6:	f77f af7c 	ble.w	8004ec2 <_dtoa_r+0x432>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <_dtoa_r+0x600>)
 8004fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd2:	f7fb fb11 	bl	80005f8 <__aeabi_dmul>
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <_dtoa_r+0x600>)
 8004fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fe2:	f7fb fb09 	bl	80005f8 <__aeabi_dmul>
 8004fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8004fea:	e7c4      	b.n	8004f76 <_dtoa_r+0x4e6>
 8004fec:	462a      	mov	r2, r5
 8004fee:	4633      	mov	r3, r6
 8004ff0:	f7fb fb02 	bl	80005f8 <__aeabi_dmul>
 8004ff4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ff8:	eb0b 0507 	add.w	r5, fp, r7
 8004ffc:	465e      	mov	r6, fp
 8004ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005002:	f7fb fda9 	bl	8000b58 <__aeabi_d2iz>
 8005006:	4607      	mov	r7, r0
 8005008:	f7fb fa8c 	bl	8000524 <__aeabi_i2d>
 800500c:	3730      	adds	r7, #48	; 0x30
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005016:	f7fb f937 	bl	8000288 <__aeabi_dsub>
 800501a:	f806 7b01 	strb.w	r7, [r6], #1
 800501e:	42ae      	cmp	r6, r5
 8005020:	e9cd 0100 	strd	r0, r1, [sp]
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	d126      	bne.n	8005078 <_dtoa_r+0x5e8>
 800502a:	4b1c      	ldr	r3, [pc, #112]	; (800509c <_dtoa_r+0x60c>)
 800502c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005030:	f7fb f92c 	bl	800028c <__adddf3>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800503c:	f7fb fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 8005040:	2800      	cmp	r0, #0
 8005042:	d174      	bne.n	800512e <_dtoa_r+0x69e>
 8005044:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005048:	2000      	movs	r0, #0
 800504a:	4914      	ldr	r1, [pc, #80]	; (800509c <_dtoa_r+0x60c>)
 800504c:	f7fb f91c 	bl	8000288 <__aeabi_dsub>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005058:	f7fb fd40 	bl	8000adc <__aeabi_dcmplt>
 800505c:	2800      	cmp	r0, #0
 800505e:	f43f af30 	beq.w	8004ec2 <_dtoa_r+0x432>
 8005062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005066:	2b30      	cmp	r3, #48	; 0x30
 8005068:	f105 32ff 	add.w	r2, r5, #4294967295
 800506c:	d002      	beq.n	8005074 <_dtoa_r+0x5e4>
 800506e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005072:	e04a      	b.n	800510a <_dtoa_r+0x67a>
 8005074:	4615      	mov	r5, r2
 8005076:	e7f4      	b.n	8005062 <_dtoa_r+0x5d2>
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <_dtoa_r+0x600>)
 800507a:	f7fb fabd 	bl	80005f8 <__aeabi_dmul>
 800507e:	e9cd 0100 	strd	r0, r1, [sp]
 8005082:	e7bc      	b.n	8004ffe <_dtoa_r+0x56e>
 8005084:	080078d0 	.word	0x080078d0
 8005088:	080078a8 	.word	0x080078a8
 800508c:	3ff00000 	.word	0x3ff00000
 8005090:	40240000 	.word	0x40240000
 8005094:	401c0000 	.word	0x401c0000
 8005098:	40140000 	.word	0x40140000
 800509c:	3fe00000 	.word	0x3fe00000
 80050a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050a4:	465d      	mov	r5, fp
 80050a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050aa:	4630      	mov	r0, r6
 80050ac:	4639      	mov	r1, r7
 80050ae:	f7fb fbcd 	bl	800084c <__aeabi_ddiv>
 80050b2:	f7fb fd51 	bl	8000b58 <__aeabi_d2iz>
 80050b6:	4680      	mov	r8, r0
 80050b8:	f7fb fa34 	bl	8000524 <__aeabi_i2d>
 80050bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050c0:	f7fb fa9a 	bl	80005f8 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80050d0:	f7fb f8da 	bl	8000288 <__aeabi_dsub>
 80050d4:	f805 6b01 	strb.w	r6, [r5], #1
 80050d8:	eba5 060b 	sub.w	r6, r5, fp
 80050dc:	45b1      	cmp	r9, r6
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	d139      	bne.n	8005158 <_dtoa_r+0x6c8>
 80050e4:	f7fb f8d2 	bl	800028c <__adddf3>
 80050e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ec:	4606      	mov	r6, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	f7fb fd12 	bl	8000b18 <__aeabi_dcmpgt>
 80050f4:	b9c8      	cbnz	r0, 800512a <_dtoa_r+0x69a>
 80050f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050fa:	4630      	mov	r0, r6
 80050fc:	4639      	mov	r1, r7
 80050fe:	f7fb fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005102:	b110      	cbz	r0, 800510a <_dtoa_r+0x67a>
 8005104:	f018 0f01 	tst.w	r8, #1
 8005108:	d10f      	bne.n	800512a <_dtoa_r+0x69a>
 800510a:	9904      	ldr	r1, [sp, #16]
 800510c:	4620      	mov	r0, r4
 800510e:	f000 facc 	bl	80056aa <_Bfree>
 8005112:	2300      	movs	r3, #0
 8005114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005116:	702b      	strb	r3, [r5, #0]
 8005118:	f10a 0301 	add.w	r3, sl, #1
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8241 	beq.w	80055a8 <_dtoa_r+0xb18>
 8005126:	601d      	str	r5, [r3, #0]
 8005128:	e23e      	b.n	80055a8 <_dtoa_r+0xb18>
 800512a:	f8cd a020 	str.w	sl, [sp, #32]
 800512e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005132:	2a39      	cmp	r2, #57	; 0x39
 8005134:	f105 33ff 	add.w	r3, r5, #4294967295
 8005138:	d108      	bne.n	800514c <_dtoa_r+0x6bc>
 800513a:	459b      	cmp	fp, r3
 800513c:	d10a      	bne.n	8005154 <_dtoa_r+0x6c4>
 800513e:	9b08      	ldr	r3, [sp, #32]
 8005140:	3301      	adds	r3, #1
 8005142:	9308      	str	r3, [sp, #32]
 8005144:	2330      	movs	r3, #48	; 0x30
 8005146:	f88b 3000 	strb.w	r3, [fp]
 800514a:	465b      	mov	r3, fp
 800514c:	781a      	ldrb	r2, [r3, #0]
 800514e:	3201      	adds	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e78c      	b.n	800506e <_dtoa_r+0x5de>
 8005154:	461d      	mov	r5, r3
 8005156:	e7ea      	b.n	800512e <_dtoa_r+0x69e>
 8005158:	2200      	movs	r2, #0
 800515a:	4b9b      	ldr	r3, [pc, #620]	; (80053c8 <_dtoa_r+0x938>)
 800515c:	f7fb fa4c 	bl	80005f8 <__aeabi_dmul>
 8005160:	2200      	movs	r2, #0
 8005162:	2300      	movs	r3, #0
 8005164:	4606      	mov	r6, r0
 8005166:	460f      	mov	r7, r1
 8005168:	f7fb fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800516c:	2800      	cmp	r0, #0
 800516e:	d09a      	beq.n	80050a6 <_dtoa_r+0x616>
 8005170:	e7cb      	b.n	800510a <_dtoa_r+0x67a>
 8005172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005174:	2a00      	cmp	r2, #0
 8005176:	f000 808b 	beq.w	8005290 <_dtoa_r+0x800>
 800517a:	9a06      	ldr	r2, [sp, #24]
 800517c:	2a01      	cmp	r2, #1
 800517e:	dc6e      	bgt.n	800525e <_dtoa_r+0x7ce>
 8005180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005182:	2a00      	cmp	r2, #0
 8005184:	d067      	beq.n	8005256 <_dtoa_r+0x7c6>
 8005186:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800518a:	9f07      	ldr	r7, [sp, #28]
 800518c:	9d05      	ldr	r5, [sp, #20]
 800518e:	9a05      	ldr	r2, [sp, #20]
 8005190:	2101      	movs	r1, #1
 8005192:	441a      	add	r2, r3
 8005194:	4620      	mov	r0, r4
 8005196:	9205      	str	r2, [sp, #20]
 8005198:	4498      	add	r8, r3
 800519a:	f000 fb26 	bl	80057ea <__i2b>
 800519e:	4606      	mov	r6, r0
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	dd0c      	ble.n	80051be <_dtoa_r+0x72e>
 80051a4:	f1b8 0f00 	cmp.w	r8, #0
 80051a8:	dd09      	ble.n	80051be <_dtoa_r+0x72e>
 80051aa:	4545      	cmp	r5, r8
 80051ac:	9a05      	ldr	r2, [sp, #20]
 80051ae:	462b      	mov	r3, r5
 80051b0:	bfa8      	it	ge
 80051b2:	4643      	movge	r3, r8
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	9205      	str	r2, [sp, #20]
 80051b8:	1aed      	subs	r5, r5, r3
 80051ba:	eba8 0803 	sub.w	r8, r8, r3
 80051be:	9b07      	ldr	r3, [sp, #28]
 80051c0:	b1eb      	cbz	r3, 80051fe <_dtoa_r+0x76e>
 80051c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d067      	beq.n	8005298 <_dtoa_r+0x808>
 80051c8:	b18f      	cbz	r7, 80051ee <_dtoa_r+0x75e>
 80051ca:	4631      	mov	r1, r6
 80051cc:	463a      	mov	r2, r7
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fbaa 	bl	8005928 <__pow5mult>
 80051d4:	9a04      	ldr	r2, [sp, #16]
 80051d6:	4601      	mov	r1, r0
 80051d8:	4606      	mov	r6, r0
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 fb0e 	bl	80057fc <__multiply>
 80051e0:	9904      	ldr	r1, [sp, #16]
 80051e2:	9008      	str	r0, [sp, #32]
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 fa60 	bl	80056aa <_Bfree>
 80051ea:	9b08      	ldr	r3, [sp, #32]
 80051ec:	9304      	str	r3, [sp, #16]
 80051ee:	9b07      	ldr	r3, [sp, #28]
 80051f0:	1bda      	subs	r2, r3, r7
 80051f2:	d004      	beq.n	80051fe <_dtoa_r+0x76e>
 80051f4:	9904      	ldr	r1, [sp, #16]
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 fb96 	bl	8005928 <__pow5mult>
 80051fc:	9004      	str	r0, [sp, #16]
 80051fe:	2101      	movs	r1, #1
 8005200:	4620      	mov	r0, r4
 8005202:	f000 faf2 	bl	80057ea <__i2b>
 8005206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005208:	4607      	mov	r7, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 81d0 	beq.w	80055b0 <_dtoa_r+0xb20>
 8005210:	461a      	mov	r2, r3
 8005212:	4601      	mov	r1, r0
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fb87 	bl	8005928 <__pow5mult>
 800521a:	9b06      	ldr	r3, [sp, #24]
 800521c:	2b01      	cmp	r3, #1
 800521e:	4607      	mov	r7, r0
 8005220:	dc40      	bgt.n	80052a4 <_dtoa_r+0x814>
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d139      	bne.n	800529c <_dtoa_r+0x80c>
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800522e:	2b00      	cmp	r3, #0
 8005230:	d136      	bne.n	80052a0 <_dtoa_r+0x810>
 8005232:	9b01      	ldr	r3, [sp, #4]
 8005234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005238:	0d1b      	lsrs	r3, r3, #20
 800523a:	051b      	lsls	r3, r3, #20
 800523c:	b12b      	cbz	r3, 800524a <_dtoa_r+0x7ba>
 800523e:	9b05      	ldr	r3, [sp, #20]
 8005240:	3301      	adds	r3, #1
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f108 0801 	add.w	r8, r8, #1
 8005248:	2301      	movs	r3, #1
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d12a      	bne.n	80052a8 <_dtoa_r+0x818>
 8005252:	2001      	movs	r0, #1
 8005254:	e030      	b.n	80052b8 <_dtoa_r+0x828>
 8005256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005258:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800525c:	e795      	b.n	800518a <_dtoa_r+0x6fa>
 800525e:	9b07      	ldr	r3, [sp, #28]
 8005260:	f109 37ff 	add.w	r7, r9, #4294967295
 8005264:	42bb      	cmp	r3, r7
 8005266:	bfbf      	itttt	lt
 8005268:	9b07      	ldrlt	r3, [sp, #28]
 800526a:	9707      	strlt	r7, [sp, #28]
 800526c:	1afa      	sublt	r2, r7, r3
 800526e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005270:	bfbb      	ittet	lt
 8005272:	189b      	addlt	r3, r3, r2
 8005274:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005276:	1bdf      	subge	r7, r3, r7
 8005278:	2700      	movlt	r7, #0
 800527a:	f1b9 0f00 	cmp.w	r9, #0
 800527e:	bfb5      	itete	lt
 8005280:	9b05      	ldrlt	r3, [sp, #20]
 8005282:	9d05      	ldrge	r5, [sp, #20]
 8005284:	eba3 0509 	sublt.w	r5, r3, r9
 8005288:	464b      	movge	r3, r9
 800528a:	bfb8      	it	lt
 800528c:	2300      	movlt	r3, #0
 800528e:	e77e      	b.n	800518e <_dtoa_r+0x6fe>
 8005290:	9f07      	ldr	r7, [sp, #28]
 8005292:	9d05      	ldr	r5, [sp, #20]
 8005294:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005296:	e783      	b.n	80051a0 <_dtoa_r+0x710>
 8005298:	9a07      	ldr	r2, [sp, #28]
 800529a:	e7ab      	b.n	80051f4 <_dtoa_r+0x764>
 800529c:	2300      	movs	r3, #0
 800529e:	e7d4      	b.n	800524a <_dtoa_r+0x7ba>
 80052a0:	9b00      	ldr	r3, [sp, #0]
 80052a2:	e7d2      	b.n	800524a <_dtoa_r+0x7ba>
 80052a4:	2300      	movs	r3, #0
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80052ae:	6918      	ldr	r0, [r3, #16]
 80052b0:	f000 fa4d 	bl	800574e <__hi0bits>
 80052b4:	f1c0 0020 	rsb	r0, r0, #32
 80052b8:	4440      	add	r0, r8
 80052ba:	f010 001f 	ands.w	r0, r0, #31
 80052be:	d047      	beq.n	8005350 <_dtoa_r+0x8c0>
 80052c0:	f1c0 0320 	rsb	r3, r0, #32
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	dd3b      	ble.n	8005340 <_dtoa_r+0x8b0>
 80052c8:	9b05      	ldr	r3, [sp, #20]
 80052ca:	f1c0 001c 	rsb	r0, r0, #28
 80052ce:	4403      	add	r3, r0
 80052d0:	9305      	str	r3, [sp, #20]
 80052d2:	4405      	add	r5, r0
 80052d4:	4480      	add	r8, r0
 80052d6:	9b05      	ldr	r3, [sp, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dd05      	ble.n	80052e8 <_dtoa_r+0x858>
 80052dc:	461a      	mov	r2, r3
 80052de:	9904      	ldr	r1, [sp, #16]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fb6f 	bl	80059c4 <__lshift>
 80052e6:	9004      	str	r0, [sp, #16]
 80052e8:	f1b8 0f00 	cmp.w	r8, #0
 80052ec:	dd05      	ble.n	80052fa <_dtoa_r+0x86a>
 80052ee:	4639      	mov	r1, r7
 80052f0:	4642      	mov	r2, r8
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fb66 	bl	80059c4 <__lshift>
 80052f8:	4607      	mov	r7, r0
 80052fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052fc:	b353      	cbz	r3, 8005354 <_dtoa_r+0x8c4>
 80052fe:	4639      	mov	r1, r7
 8005300:	9804      	ldr	r0, [sp, #16]
 8005302:	f000 fbb3 	bl	8005a6c <__mcmp>
 8005306:	2800      	cmp	r0, #0
 8005308:	da24      	bge.n	8005354 <_dtoa_r+0x8c4>
 800530a:	2300      	movs	r3, #0
 800530c:	220a      	movs	r2, #10
 800530e:	9904      	ldr	r1, [sp, #16]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f9e1 	bl	80056d8 <__multadd>
 8005316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005318:	9004      	str	r0, [sp, #16]
 800531a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 814d 	beq.w	80055be <_dtoa_r+0xb2e>
 8005324:	2300      	movs	r3, #0
 8005326:	4631      	mov	r1, r6
 8005328:	220a      	movs	r2, #10
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f9d4 	bl	80056d8 <__multadd>
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	4606      	mov	r6, r0
 8005336:	dc4f      	bgt.n	80053d8 <_dtoa_r+0x948>
 8005338:	9b06      	ldr	r3, [sp, #24]
 800533a:	2b02      	cmp	r3, #2
 800533c:	dd4c      	ble.n	80053d8 <_dtoa_r+0x948>
 800533e:	e011      	b.n	8005364 <_dtoa_r+0x8d4>
 8005340:	d0c9      	beq.n	80052d6 <_dtoa_r+0x846>
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	331c      	adds	r3, #28
 8005346:	441a      	add	r2, r3
 8005348:	9205      	str	r2, [sp, #20]
 800534a:	441d      	add	r5, r3
 800534c:	4498      	add	r8, r3
 800534e:	e7c2      	b.n	80052d6 <_dtoa_r+0x846>
 8005350:	4603      	mov	r3, r0
 8005352:	e7f6      	b.n	8005342 <_dtoa_r+0x8b2>
 8005354:	f1b9 0f00 	cmp.w	r9, #0
 8005358:	dc38      	bgt.n	80053cc <_dtoa_r+0x93c>
 800535a:	9b06      	ldr	r3, [sp, #24]
 800535c:	2b02      	cmp	r3, #2
 800535e:	dd35      	ble.n	80053cc <_dtoa_r+0x93c>
 8005360:	f8cd 9008 	str.w	r9, [sp, #8]
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	b963      	cbnz	r3, 8005382 <_dtoa_r+0x8f2>
 8005368:	4639      	mov	r1, r7
 800536a:	2205      	movs	r2, #5
 800536c:	4620      	mov	r0, r4
 800536e:	f000 f9b3 	bl	80056d8 <__multadd>
 8005372:	4601      	mov	r1, r0
 8005374:	4607      	mov	r7, r0
 8005376:	9804      	ldr	r0, [sp, #16]
 8005378:	f000 fb78 	bl	8005a6c <__mcmp>
 800537c:	2800      	cmp	r0, #0
 800537e:	f73f adcc 	bgt.w	8004f1a <_dtoa_r+0x48a>
 8005382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005384:	465d      	mov	r5, fp
 8005386:	ea6f 0a03 	mvn.w	sl, r3
 800538a:	f04f 0900 	mov.w	r9, #0
 800538e:	4639      	mov	r1, r7
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f98a 	bl	80056aa <_Bfree>
 8005396:	2e00      	cmp	r6, #0
 8005398:	f43f aeb7 	beq.w	800510a <_dtoa_r+0x67a>
 800539c:	f1b9 0f00 	cmp.w	r9, #0
 80053a0:	d005      	beq.n	80053ae <_dtoa_r+0x91e>
 80053a2:	45b1      	cmp	r9, r6
 80053a4:	d003      	beq.n	80053ae <_dtoa_r+0x91e>
 80053a6:	4649      	mov	r1, r9
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f97e 	bl	80056aa <_Bfree>
 80053ae:	4631      	mov	r1, r6
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f97a 	bl	80056aa <_Bfree>
 80053b6:	e6a8      	b.n	800510a <_dtoa_r+0x67a>
 80053b8:	2700      	movs	r7, #0
 80053ba:	463e      	mov	r6, r7
 80053bc:	e7e1      	b.n	8005382 <_dtoa_r+0x8f2>
 80053be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80053c2:	463e      	mov	r6, r7
 80053c4:	e5a9      	b.n	8004f1a <_dtoa_r+0x48a>
 80053c6:	bf00      	nop
 80053c8:	40240000 	.word	0x40240000
 80053cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80fa 	beq.w	80055cc <_dtoa_r+0xb3c>
 80053d8:	2d00      	cmp	r5, #0
 80053da:	dd05      	ble.n	80053e8 <_dtoa_r+0x958>
 80053dc:	4631      	mov	r1, r6
 80053de:	462a      	mov	r2, r5
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 faef 	bl	80059c4 <__lshift>
 80053e6:	4606      	mov	r6, r0
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04c      	beq.n	8005488 <_dtoa_r+0x9f8>
 80053ee:	6871      	ldr	r1, [r6, #4]
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 f926 	bl	8005642 <_Balloc>
 80053f6:	6932      	ldr	r2, [r6, #16]
 80053f8:	3202      	adds	r2, #2
 80053fa:	4605      	mov	r5, r0
 80053fc:	0092      	lsls	r2, r2, #2
 80053fe:	f106 010c 	add.w	r1, r6, #12
 8005402:	300c      	adds	r0, #12
 8005404:	f000 f912 	bl	800562c <memcpy>
 8005408:	2201      	movs	r2, #1
 800540a:	4629      	mov	r1, r5
 800540c:	4620      	mov	r0, r4
 800540e:	f000 fad9 	bl	80059c4 <__lshift>
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	f8cd b014 	str.w	fp, [sp, #20]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	46b1      	mov	r9, r6
 800541e:	9307      	str	r3, [sp, #28]
 8005420:	4606      	mov	r6, r0
 8005422:	4639      	mov	r1, r7
 8005424:	9804      	ldr	r0, [sp, #16]
 8005426:	f7ff faa6 	bl	8004976 <quorem>
 800542a:	4649      	mov	r1, r9
 800542c:	4605      	mov	r5, r0
 800542e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005432:	9804      	ldr	r0, [sp, #16]
 8005434:	f000 fb1a 	bl	8005a6c <__mcmp>
 8005438:	4632      	mov	r2, r6
 800543a:	9000      	str	r0, [sp, #0]
 800543c:	4639      	mov	r1, r7
 800543e:	4620      	mov	r0, r4
 8005440:	f000 fb2e 	bl	8005aa0 <__mdiff>
 8005444:	68c3      	ldr	r3, [r0, #12]
 8005446:	4602      	mov	r2, r0
 8005448:	bb03      	cbnz	r3, 800548c <_dtoa_r+0x9fc>
 800544a:	4601      	mov	r1, r0
 800544c:	9008      	str	r0, [sp, #32]
 800544e:	9804      	ldr	r0, [sp, #16]
 8005450:	f000 fb0c 	bl	8005a6c <__mcmp>
 8005454:	9a08      	ldr	r2, [sp, #32]
 8005456:	4603      	mov	r3, r0
 8005458:	4611      	mov	r1, r2
 800545a:	4620      	mov	r0, r4
 800545c:	9308      	str	r3, [sp, #32]
 800545e:	f000 f924 	bl	80056aa <_Bfree>
 8005462:	9b08      	ldr	r3, [sp, #32]
 8005464:	b9a3      	cbnz	r3, 8005490 <_dtoa_r+0xa00>
 8005466:	9a06      	ldr	r2, [sp, #24]
 8005468:	b992      	cbnz	r2, 8005490 <_dtoa_r+0xa00>
 800546a:	9a07      	ldr	r2, [sp, #28]
 800546c:	b982      	cbnz	r2, 8005490 <_dtoa_r+0xa00>
 800546e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005472:	d029      	beq.n	80054c8 <_dtoa_r+0xa38>
 8005474:	9b00      	ldr	r3, [sp, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	dd01      	ble.n	800547e <_dtoa_r+0x9ee>
 800547a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800547e:	9b05      	ldr	r3, [sp, #20]
 8005480:	1c5d      	adds	r5, r3, #1
 8005482:	f883 8000 	strb.w	r8, [r3]
 8005486:	e782      	b.n	800538e <_dtoa_r+0x8fe>
 8005488:	4630      	mov	r0, r6
 800548a:	e7c2      	b.n	8005412 <_dtoa_r+0x982>
 800548c:	2301      	movs	r3, #1
 800548e:	e7e3      	b.n	8005458 <_dtoa_r+0x9c8>
 8005490:	9a00      	ldr	r2, [sp, #0]
 8005492:	2a00      	cmp	r2, #0
 8005494:	db04      	blt.n	80054a0 <_dtoa_r+0xa10>
 8005496:	d125      	bne.n	80054e4 <_dtoa_r+0xa54>
 8005498:	9a06      	ldr	r2, [sp, #24]
 800549a:	bb1a      	cbnz	r2, 80054e4 <_dtoa_r+0xa54>
 800549c:	9a07      	ldr	r2, [sp, #28]
 800549e:	bb0a      	cbnz	r2, 80054e4 <_dtoa_r+0xa54>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	ddec      	ble.n	800547e <_dtoa_r+0x9ee>
 80054a4:	2201      	movs	r2, #1
 80054a6:	9904      	ldr	r1, [sp, #16]
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fa8b 	bl	80059c4 <__lshift>
 80054ae:	4639      	mov	r1, r7
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	f000 fadb 	bl	8005a6c <__mcmp>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	dc03      	bgt.n	80054c2 <_dtoa_r+0xa32>
 80054ba:	d1e0      	bne.n	800547e <_dtoa_r+0x9ee>
 80054bc:	f018 0f01 	tst.w	r8, #1
 80054c0:	d0dd      	beq.n	800547e <_dtoa_r+0x9ee>
 80054c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054c6:	d1d8      	bne.n	800547a <_dtoa_r+0x9ea>
 80054c8:	9b05      	ldr	r3, [sp, #20]
 80054ca:	9a05      	ldr	r2, [sp, #20]
 80054cc:	1c5d      	adds	r5, r3, #1
 80054ce:	2339      	movs	r3, #57	; 0x39
 80054d0:	7013      	strb	r3, [r2, #0]
 80054d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054d6:	2b39      	cmp	r3, #57	; 0x39
 80054d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80054dc:	d04f      	beq.n	800557e <_dtoa_r+0xaee>
 80054de:	3301      	adds	r3, #1
 80054e0:	7013      	strb	r3, [r2, #0]
 80054e2:	e754      	b.n	800538e <_dtoa_r+0x8fe>
 80054e4:	9a05      	ldr	r2, [sp, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f102 0501 	add.w	r5, r2, #1
 80054ec:	dd06      	ble.n	80054fc <_dtoa_r+0xa6c>
 80054ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054f2:	d0e9      	beq.n	80054c8 <_dtoa_r+0xa38>
 80054f4:	f108 0801 	add.w	r8, r8, #1
 80054f8:	9b05      	ldr	r3, [sp, #20]
 80054fa:	e7c2      	b.n	8005482 <_dtoa_r+0x9f2>
 80054fc:	9a02      	ldr	r2, [sp, #8]
 80054fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005502:	eba5 030b 	sub.w	r3, r5, fp
 8005506:	4293      	cmp	r3, r2
 8005508:	d021      	beq.n	800554e <_dtoa_r+0xabe>
 800550a:	2300      	movs	r3, #0
 800550c:	220a      	movs	r2, #10
 800550e:	9904      	ldr	r1, [sp, #16]
 8005510:	4620      	mov	r0, r4
 8005512:	f000 f8e1 	bl	80056d8 <__multadd>
 8005516:	45b1      	cmp	r9, r6
 8005518:	9004      	str	r0, [sp, #16]
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f04f 020a 	mov.w	r2, #10
 8005522:	4649      	mov	r1, r9
 8005524:	4620      	mov	r0, r4
 8005526:	d105      	bne.n	8005534 <_dtoa_r+0xaa4>
 8005528:	f000 f8d6 	bl	80056d8 <__multadd>
 800552c:	4681      	mov	r9, r0
 800552e:	4606      	mov	r6, r0
 8005530:	9505      	str	r5, [sp, #20]
 8005532:	e776      	b.n	8005422 <_dtoa_r+0x992>
 8005534:	f000 f8d0 	bl	80056d8 <__multadd>
 8005538:	4631      	mov	r1, r6
 800553a:	4681      	mov	r9, r0
 800553c:	2300      	movs	r3, #0
 800553e:	220a      	movs	r2, #10
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f8c9 	bl	80056d8 <__multadd>
 8005546:	4606      	mov	r6, r0
 8005548:	e7f2      	b.n	8005530 <_dtoa_r+0xaa0>
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	2201      	movs	r2, #1
 8005550:	9904      	ldr	r1, [sp, #16]
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fa36 	bl	80059c4 <__lshift>
 8005558:	4639      	mov	r1, r7
 800555a:	9004      	str	r0, [sp, #16]
 800555c:	f000 fa86 	bl	8005a6c <__mcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	dcb6      	bgt.n	80054d2 <_dtoa_r+0xa42>
 8005564:	d102      	bne.n	800556c <_dtoa_r+0xadc>
 8005566:	f018 0f01 	tst.w	r8, #1
 800556a:	d1b2      	bne.n	80054d2 <_dtoa_r+0xa42>
 800556c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	f105 32ff 	add.w	r2, r5, #4294967295
 8005576:	f47f af0a 	bne.w	800538e <_dtoa_r+0x8fe>
 800557a:	4615      	mov	r5, r2
 800557c:	e7f6      	b.n	800556c <_dtoa_r+0xadc>
 800557e:	4593      	cmp	fp, r2
 8005580:	d105      	bne.n	800558e <_dtoa_r+0xafe>
 8005582:	2331      	movs	r3, #49	; 0x31
 8005584:	f10a 0a01 	add.w	sl, sl, #1
 8005588:	f88b 3000 	strb.w	r3, [fp]
 800558c:	e6ff      	b.n	800538e <_dtoa_r+0x8fe>
 800558e:	4615      	mov	r5, r2
 8005590:	e79f      	b.n	80054d2 <_dtoa_r+0xa42>
 8005592:	f8df b064 	ldr.w	fp, [pc, #100]	; 80055f8 <_dtoa_r+0xb68>
 8005596:	e007      	b.n	80055a8 <_dtoa_r+0xb18>
 8005598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800559a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80055fc <_dtoa_r+0xb6c>
 800559e:	b11b      	cbz	r3, 80055a8 <_dtoa_r+0xb18>
 80055a0:	f10b 0308 	add.w	r3, fp, #8
 80055a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4658      	mov	r0, fp
 80055aa:	b017      	add	sp, #92	; 0x5c
 80055ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b0:	9b06      	ldr	r3, [sp, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	f77f ae35 	ble.w	8005222 <_dtoa_r+0x792>
 80055b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	e649      	b.n	8005252 <_dtoa_r+0x7c2>
 80055be:	9b02      	ldr	r3, [sp, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dc03      	bgt.n	80055cc <_dtoa_r+0xb3c>
 80055c4:	9b06      	ldr	r3, [sp, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f73f aecc 	bgt.w	8005364 <_dtoa_r+0x8d4>
 80055cc:	465d      	mov	r5, fp
 80055ce:	4639      	mov	r1, r7
 80055d0:	9804      	ldr	r0, [sp, #16]
 80055d2:	f7ff f9d0 	bl	8004976 <quorem>
 80055d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055da:	f805 8b01 	strb.w	r8, [r5], #1
 80055de:	9a02      	ldr	r2, [sp, #8]
 80055e0:	eba5 030b 	sub.w	r3, r5, fp
 80055e4:	429a      	cmp	r2, r3
 80055e6:	ddb0      	ble.n	800554a <_dtoa_r+0xaba>
 80055e8:	2300      	movs	r3, #0
 80055ea:	220a      	movs	r2, #10
 80055ec:	9904      	ldr	r1, [sp, #16]
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 f872 	bl	80056d8 <__multadd>
 80055f4:	9004      	str	r0, [sp, #16]
 80055f6:	e7ea      	b.n	80055ce <_dtoa_r+0xb3e>
 80055f8:	08007773 	.word	0x08007773
 80055fc:	08007898 	.word	0x08007898

08005600 <_localeconv_r>:
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <_localeconv_r+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a18      	ldr	r0, [r3, #32]
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <_localeconv_r+0x18>)
 8005608:	2800      	cmp	r0, #0
 800560a:	bf08      	it	eq
 800560c:	4618      	moveq	r0, r3
 800560e:	30f0      	adds	r0, #240	; 0xf0
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000064 	.word	0x20000064
 8005618:	200000c8 	.word	0x200000c8

0800561c <malloc>:
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <malloc+0xc>)
 800561e:	4601      	mov	r1, r0
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	f000 bb45 	b.w	8005cb0 <_malloc_r>
 8005626:	bf00      	nop
 8005628:	20000064 	.word	0x20000064

0800562c <memcpy>:
 800562c:	b510      	push	{r4, lr}
 800562e:	1e43      	subs	r3, r0, #1
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	d100      	bne.n	8005638 <memcpy+0xc>
 8005636:	bd10      	pop	{r4, pc}
 8005638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005640:	e7f7      	b.n	8005632 <memcpy+0x6>

08005642 <_Balloc>:
 8005642:	b570      	push	{r4, r5, r6, lr}
 8005644:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005646:	4604      	mov	r4, r0
 8005648:	460e      	mov	r6, r1
 800564a:	b93d      	cbnz	r5, 800565c <_Balloc+0x1a>
 800564c:	2010      	movs	r0, #16
 800564e:	f7ff ffe5 	bl	800561c <malloc>
 8005652:	6260      	str	r0, [r4, #36]	; 0x24
 8005654:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005658:	6005      	str	r5, [r0, #0]
 800565a:	60c5      	str	r5, [r0, #12]
 800565c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800565e:	68eb      	ldr	r3, [r5, #12]
 8005660:	b183      	cbz	r3, 8005684 <_Balloc+0x42>
 8005662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800566a:	b9b8      	cbnz	r0, 800569c <_Balloc+0x5a>
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f506 	lsl.w	r5, r1, r6
 8005672:	1d6a      	adds	r2, r5, #5
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fabe 	bl	8005bf8 <_calloc_r>
 800567c:	b160      	cbz	r0, 8005698 <_Balloc+0x56>
 800567e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005682:	e00e      	b.n	80056a2 <_Balloc+0x60>
 8005684:	2221      	movs	r2, #33	; 0x21
 8005686:	2104      	movs	r1, #4
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fab5 	bl	8005bf8 <_calloc_r>
 800568e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005690:	60e8      	str	r0, [r5, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <_Balloc+0x20>
 8005698:	2000      	movs	r0, #0
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	6802      	ldr	r2, [r0, #0]
 800569e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056a2:	2300      	movs	r3, #0
 80056a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056a8:	e7f7      	b.n	800569a <_Balloc+0x58>

080056aa <_Bfree>:
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056ae:	4606      	mov	r6, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	b93c      	cbnz	r4, 80056c4 <_Bfree+0x1a>
 80056b4:	2010      	movs	r0, #16
 80056b6:	f7ff ffb1 	bl	800561c <malloc>
 80056ba:	6270      	str	r0, [r6, #36]	; 0x24
 80056bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056c0:	6004      	str	r4, [r0, #0]
 80056c2:	60c4      	str	r4, [r0, #12]
 80056c4:	b13d      	cbz	r5, 80056d6 <_Bfree+0x2c>
 80056c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056c8:	686a      	ldr	r2, [r5, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d0:	6029      	str	r1, [r5, #0]
 80056d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <__multadd>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	690d      	ldr	r5, [r1, #16]
 80056de:	461f      	mov	r7, r3
 80056e0:	4606      	mov	r6, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	f101 0c14 	add.w	ip, r1, #20
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8dc 0000 	ldr.w	r0, [ip]
 80056ee:	b281      	uxth	r1, r0
 80056f0:	fb02 7101 	mla	r1, r2, r1, r7
 80056f4:	0c0f      	lsrs	r7, r1, #16
 80056f6:	0c00      	lsrs	r0, r0, #16
 80056f8:	fb02 7000 	mla	r0, r2, r0, r7
 80056fc:	b289      	uxth	r1, r1
 80056fe:	3301      	adds	r3, #1
 8005700:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005704:	429d      	cmp	r5, r3
 8005706:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800570a:	f84c 1b04 	str.w	r1, [ip], #4
 800570e:	dcec      	bgt.n	80056ea <__multadd+0x12>
 8005710:	b1d7      	cbz	r7, 8005748 <__multadd+0x70>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	42ab      	cmp	r3, r5
 8005716:	dc12      	bgt.n	800573e <__multadd+0x66>
 8005718:	6861      	ldr	r1, [r4, #4]
 800571a:	4630      	mov	r0, r6
 800571c:	3101      	adds	r1, #1
 800571e:	f7ff ff90 	bl	8005642 <_Balloc>
 8005722:	6922      	ldr	r2, [r4, #16]
 8005724:	3202      	adds	r2, #2
 8005726:	f104 010c 	add.w	r1, r4, #12
 800572a:	4680      	mov	r8, r0
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	300c      	adds	r0, #12
 8005730:	f7ff ff7c 	bl	800562c <memcpy>
 8005734:	4621      	mov	r1, r4
 8005736:	4630      	mov	r0, r6
 8005738:	f7ff ffb7 	bl	80056aa <_Bfree>
 800573c:	4644      	mov	r4, r8
 800573e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005742:	3501      	adds	r5, #1
 8005744:	615f      	str	r7, [r3, #20]
 8005746:	6125      	str	r5, [r4, #16]
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800574e <__hi0bits>:
 800574e:	0c02      	lsrs	r2, r0, #16
 8005750:	0412      	lsls	r2, r2, #16
 8005752:	4603      	mov	r3, r0
 8005754:	b9b2      	cbnz	r2, 8005784 <__hi0bits+0x36>
 8005756:	0403      	lsls	r3, r0, #16
 8005758:	2010      	movs	r0, #16
 800575a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800575e:	bf04      	itt	eq
 8005760:	021b      	lsleq	r3, r3, #8
 8005762:	3008      	addeq	r0, #8
 8005764:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005768:	bf04      	itt	eq
 800576a:	011b      	lsleq	r3, r3, #4
 800576c:	3004      	addeq	r0, #4
 800576e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005772:	bf04      	itt	eq
 8005774:	009b      	lsleq	r3, r3, #2
 8005776:	3002      	addeq	r0, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	db06      	blt.n	800578a <__hi0bits+0x3c>
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	d503      	bpl.n	8005788 <__hi0bits+0x3a>
 8005780:	3001      	adds	r0, #1
 8005782:	4770      	bx	lr
 8005784:	2000      	movs	r0, #0
 8005786:	e7e8      	b.n	800575a <__hi0bits+0xc>
 8005788:	2020      	movs	r0, #32
 800578a:	4770      	bx	lr

0800578c <__lo0bits>:
 800578c:	6803      	ldr	r3, [r0, #0]
 800578e:	f013 0207 	ands.w	r2, r3, #7
 8005792:	4601      	mov	r1, r0
 8005794:	d00b      	beq.n	80057ae <__lo0bits+0x22>
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d423      	bmi.n	80057e2 <__lo0bits+0x56>
 800579a:	0798      	lsls	r0, r3, #30
 800579c:	bf49      	itett	mi
 800579e:	085b      	lsrmi	r3, r3, #1
 80057a0:	089b      	lsrpl	r3, r3, #2
 80057a2:	2001      	movmi	r0, #1
 80057a4:	600b      	strmi	r3, [r1, #0]
 80057a6:	bf5c      	itt	pl
 80057a8:	600b      	strpl	r3, [r1, #0]
 80057aa:	2002      	movpl	r0, #2
 80057ac:	4770      	bx	lr
 80057ae:	b298      	uxth	r0, r3
 80057b0:	b9a8      	cbnz	r0, 80057de <__lo0bits+0x52>
 80057b2:	0c1b      	lsrs	r3, r3, #16
 80057b4:	2010      	movs	r0, #16
 80057b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057ba:	bf04      	itt	eq
 80057bc:	0a1b      	lsreq	r3, r3, #8
 80057be:	3008      	addeq	r0, #8
 80057c0:	071a      	lsls	r2, r3, #28
 80057c2:	bf04      	itt	eq
 80057c4:	091b      	lsreq	r3, r3, #4
 80057c6:	3004      	addeq	r0, #4
 80057c8:	079a      	lsls	r2, r3, #30
 80057ca:	bf04      	itt	eq
 80057cc:	089b      	lsreq	r3, r3, #2
 80057ce:	3002      	addeq	r0, #2
 80057d0:	07da      	lsls	r2, r3, #31
 80057d2:	d402      	bmi.n	80057da <__lo0bits+0x4e>
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	d006      	beq.n	80057e6 <__lo0bits+0x5a>
 80057d8:	3001      	adds	r0, #1
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	4770      	bx	lr
 80057de:	4610      	mov	r0, r2
 80057e0:	e7e9      	b.n	80057b6 <__lo0bits+0x2a>
 80057e2:	2000      	movs	r0, #0
 80057e4:	4770      	bx	lr
 80057e6:	2020      	movs	r0, #32
 80057e8:	4770      	bx	lr

080057ea <__i2b>:
 80057ea:	b510      	push	{r4, lr}
 80057ec:	460c      	mov	r4, r1
 80057ee:	2101      	movs	r1, #1
 80057f0:	f7ff ff27 	bl	8005642 <_Balloc>
 80057f4:	2201      	movs	r2, #1
 80057f6:	6144      	str	r4, [r0, #20]
 80057f8:	6102      	str	r2, [r0, #16]
 80057fa:	bd10      	pop	{r4, pc}

080057fc <__multiply>:
 80057fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4614      	mov	r4, r2
 8005802:	690a      	ldr	r2, [r1, #16]
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	bfb8      	it	lt
 800580a:	460b      	movlt	r3, r1
 800580c:	4688      	mov	r8, r1
 800580e:	bfbc      	itt	lt
 8005810:	46a0      	movlt	r8, r4
 8005812:	461c      	movlt	r4, r3
 8005814:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005818:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800581c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005824:	eb07 0609 	add.w	r6, r7, r9
 8005828:	42b3      	cmp	r3, r6
 800582a:	bfb8      	it	lt
 800582c:	3101      	addlt	r1, #1
 800582e:	f7ff ff08 	bl	8005642 <_Balloc>
 8005832:	f100 0514 	add.w	r5, r0, #20
 8005836:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800583a:	462b      	mov	r3, r5
 800583c:	2200      	movs	r2, #0
 800583e:	4573      	cmp	r3, lr
 8005840:	d316      	bcc.n	8005870 <__multiply+0x74>
 8005842:	f104 0214 	add.w	r2, r4, #20
 8005846:	f108 0114 	add.w	r1, r8, #20
 800584a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800584e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	9201      	str	r2, [sp, #4]
 8005858:	4293      	cmp	r3, r2
 800585a:	d80c      	bhi.n	8005876 <__multiply+0x7a>
 800585c:	2e00      	cmp	r6, #0
 800585e:	dd03      	ble.n	8005868 <__multiply+0x6c>
 8005860:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05d      	beq.n	8005924 <__multiply+0x128>
 8005868:	6106      	str	r6, [r0, #16]
 800586a:	b003      	add	sp, #12
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005870:	f843 2b04 	str.w	r2, [r3], #4
 8005874:	e7e3      	b.n	800583e <__multiply+0x42>
 8005876:	f8b2 b000 	ldrh.w	fp, [r2]
 800587a:	f1bb 0f00 	cmp.w	fp, #0
 800587e:	d023      	beq.n	80058c8 <__multiply+0xcc>
 8005880:	4689      	mov	r9, r1
 8005882:	46ac      	mov	ip, r5
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	f859 4b04 	ldr.w	r4, [r9], #4
 800588c:	f8dc a000 	ldr.w	sl, [ip]
 8005890:	b2a3      	uxth	r3, r4
 8005892:	fa1f fa8a 	uxth.w	sl, sl
 8005896:	fb0b a303 	mla	r3, fp, r3, sl
 800589a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800589e:	f8dc 4000 	ldr.w	r4, [ip]
 80058a2:	4443      	add	r3, r8
 80058a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058a8:	fb0b 840a 	mla	r4, fp, sl, r8
 80058ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058b0:	46e2      	mov	sl, ip
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058b8:	454f      	cmp	r7, r9
 80058ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058be:	f84a 3b04 	str.w	r3, [sl], #4
 80058c2:	d82b      	bhi.n	800591c <__multiply+0x120>
 80058c4:	f8cc 8004 	str.w	r8, [ip, #4]
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058ce:	3204      	adds	r2, #4
 80058d0:	f1ba 0f00 	cmp.w	sl, #0
 80058d4:	d020      	beq.n	8005918 <__multiply+0x11c>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	4689      	mov	r9, r1
 80058da:	46a8      	mov	r8, r5
 80058dc:	f04f 0b00 	mov.w	fp, #0
 80058e0:	f8b9 c000 	ldrh.w	ip, [r9]
 80058e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80058e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80058ec:	445c      	add	r4, fp
 80058ee:	46c4      	mov	ip, r8
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058f6:	f84c 3b04 	str.w	r3, [ip], #4
 80058fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80058fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	fb0a b303 	mla	r3, sl, r3, fp
 8005908:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800590c:	454f      	cmp	r7, r9
 800590e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005912:	d805      	bhi.n	8005920 <__multiply+0x124>
 8005914:	f8c8 3004 	str.w	r3, [r8, #4]
 8005918:	3504      	adds	r5, #4
 800591a:	e79b      	b.n	8005854 <__multiply+0x58>
 800591c:	46d4      	mov	ip, sl
 800591e:	e7b3      	b.n	8005888 <__multiply+0x8c>
 8005920:	46e0      	mov	r8, ip
 8005922:	e7dd      	b.n	80058e0 <__multiply+0xe4>
 8005924:	3e01      	subs	r6, #1
 8005926:	e799      	b.n	800585c <__multiply+0x60>

08005928 <__pow5mult>:
 8005928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800592c:	4615      	mov	r5, r2
 800592e:	f012 0203 	ands.w	r2, r2, #3
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	d007      	beq.n	8005948 <__pow5mult+0x20>
 8005938:	3a01      	subs	r2, #1
 800593a:	4c21      	ldr	r4, [pc, #132]	; (80059c0 <__pow5mult+0x98>)
 800593c:	2300      	movs	r3, #0
 800593e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005942:	f7ff fec9 	bl	80056d8 <__multadd>
 8005946:	4607      	mov	r7, r0
 8005948:	10ad      	asrs	r5, r5, #2
 800594a:	d035      	beq.n	80059b8 <__pow5mult+0x90>
 800594c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800594e:	b93c      	cbnz	r4, 8005960 <__pow5mult+0x38>
 8005950:	2010      	movs	r0, #16
 8005952:	f7ff fe63 	bl	800561c <malloc>
 8005956:	6270      	str	r0, [r6, #36]	; 0x24
 8005958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800595c:	6004      	str	r4, [r0, #0]
 800595e:	60c4      	str	r4, [r0, #12]
 8005960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005968:	b94c      	cbnz	r4, 800597e <__pow5mult+0x56>
 800596a:	f240 2171 	movw	r1, #625	; 0x271
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff ff3b 	bl	80057ea <__i2b>
 8005974:	2300      	movs	r3, #0
 8005976:	f8c8 0008 	str.w	r0, [r8, #8]
 800597a:	4604      	mov	r4, r0
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	07eb      	lsls	r3, r5, #31
 8005984:	d50a      	bpl.n	800599c <__pow5mult+0x74>
 8005986:	4639      	mov	r1, r7
 8005988:	4622      	mov	r2, r4
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff36 	bl	80057fc <__multiply>
 8005990:	4639      	mov	r1, r7
 8005992:	4681      	mov	r9, r0
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff fe88 	bl	80056aa <_Bfree>
 800599a:	464f      	mov	r7, r9
 800599c:	106d      	asrs	r5, r5, #1
 800599e:	d00b      	beq.n	80059b8 <__pow5mult+0x90>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	b938      	cbnz	r0, 80059b4 <__pow5mult+0x8c>
 80059a4:	4622      	mov	r2, r4
 80059a6:	4621      	mov	r1, r4
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff ff27 	bl	80057fc <__multiply>
 80059ae:	6020      	str	r0, [r4, #0]
 80059b0:	f8c0 8000 	str.w	r8, [r0]
 80059b4:	4604      	mov	r4, r0
 80059b6:	e7e4      	b.n	8005982 <__pow5mult+0x5a>
 80059b8:	4638      	mov	r0, r7
 80059ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059be:	bf00      	nop
 80059c0:	08007998 	.word	0x08007998

080059c4 <__lshift>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	460c      	mov	r4, r1
 80059ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6849      	ldr	r1, [r1, #4]
 80059d2:	eb0a 0903 	add.w	r9, sl, r3
 80059d6:	68a3      	ldr	r3, [r4, #8]
 80059d8:	4607      	mov	r7, r0
 80059da:	4616      	mov	r6, r2
 80059dc:	f109 0501 	add.w	r5, r9, #1
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	db32      	blt.n	8005a4a <__lshift+0x86>
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff fe2c 	bl	8005642 <_Balloc>
 80059ea:	2300      	movs	r3, #0
 80059ec:	4680      	mov	r8, r0
 80059ee:	f100 0114 	add.w	r1, r0, #20
 80059f2:	461a      	mov	r2, r3
 80059f4:	4553      	cmp	r3, sl
 80059f6:	db2b      	blt.n	8005a50 <__lshift+0x8c>
 80059f8:	6920      	ldr	r0, [r4, #16]
 80059fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059fe:	f104 0314 	add.w	r3, r4, #20
 8005a02:	f016 021f 	ands.w	r2, r6, #31
 8005a06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a0e:	d025      	beq.n	8005a5c <__lshift+0x98>
 8005a10:	f1c2 0e20 	rsb	lr, r2, #32
 8005a14:	2000      	movs	r0, #0
 8005a16:	681e      	ldr	r6, [r3, #0]
 8005a18:	468a      	mov	sl, r1
 8005a1a:	4096      	lsls	r6, r2
 8005a1c:	4330      	orrs	r0, r6
 8005a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a22:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a26:	459c      	cmp	ip, r3
 8005a28:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a2c:	d814      	bhi.n	8005a58 <__lshift+0x94>
 8005a2e:	6048      	str	r0, [r1, #4]
 8005a30:	b108      	cbz	r0, 8005a36 <__lshift+0x72>
 8005a32:	f109 0502 	add.w	r5, r9, #2
 8005a36:	3d01      	subs	r5, #1
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f7ff fe33 	bl	80056aa <_Bfree>
 8005a44:	4640      	mov	r0, r8
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	3101      	adds	r1, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	e7c7      	b.n	80059e0 <__lshift+0x1c>
 8005a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a54:	3301      	adds	r3, #1
 8005a56:	e7cd      	b.n	80059f4 <__lshift+0x30>
 8005a58:	4651      	mov	r1, sl
 8005a5a:	e7dc      	b.n	8005a16 <__lshift+0x52>
 8005a5c:	3904      	subs	r1, #4
 8005a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a66:	459c      	cmp	ip, r3
 8005a68:	d8f9      	bhi.n	8005a5e <__lshift+0x9a>
 8005a6a:	e7e4      	b.n	8005a36 <__lshift+0x72>

08005a6c <__mcmp>:
 8005a6c:	6903      	ldr	r3, [r0, #16]
 8005a6e:	690a      	ldr	r2, [r1, #16]
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	b530      	push	{r4, r5, lr}
 8005a74:	d10c      	bne.n	8005a90 <__mcmp+0x24>
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	3014      	adds	r0, #20
 8005a7a:	3114      	adds	r1, #20
 8005a7c:	1884      	adds	r4, r0, r2
 8005a7e:	4411      	add	r1, r2
 8005a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a88:	4295      	cmp	r5, r2
 8005a8a:	d003      	beq.n	8005a94 <__mcmp+0x28>
 8005a8c:	d305      	bcc.n	8005a9a <__mcmp+0x2e>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd30      	pop	{r4, r5, pc}
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d3f3      	bcc.n	8005a80 <__mcmp+0x14>
 8005a98:	e7fa      	b.n	8005a90 <__mcmp+0x24>
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	e7f7      	b.n	8005a90 <__mcmp+0x24>

08005aa0 <__mdiff>:
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4614      	mov	r4, r2
 8005aae:	f7ff ffdd 	bl	8005a6c <__mcmp>
 8005ab2:	1e06      	subs	r6, r0, #0
 8005ab4:	d108      	bne.n	8005ac8 <__mdiff+0x28>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff fdc2 	bl	8005642 <_Balloc>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	bfa4      	itt	ge
 8005aca:	4623      	movge	r3, r4
 8005acc:	462c      	movge	r4, r5
 8005ace:	4638      	mov	r0, r7
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	bfa6      	itte	ge
 8005ad4:	461d      	movge	r5, r3
 8005ad6:	2600      	movge	r6, #0
 8005ad8:	2601      	movlt	r6, #1
 8005ada:	f7ff fdb2 	bl	8005642 <_Balloc>
 8005ade:	692b      	ldr	r3, [r5, #16]
 8005ae0:	60c6      	str	r6, [r0, #12]
 8005ae2:	6926      	ldr	r6, [r4, #16]
 8005ae4:	f105 0914 	add.w	r9, r5, #20
 8005ae8:	f104 0214 	add.w	r2, r4, #20
 8005aec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005af0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005af4:	f100 0514 	add.w	r5, r0, #20
 8005af8:	f04f 0e00 	mov.w	lr, #0
 8005afc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b00:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b04:	fa1e f18a 	uxtah	r1, lr, sl
 8005b08:	b2a3      	uxth	r3, r4
 8005b0a:	1ac9      	subs	r1, r1, r3
 8005b0c:	0c23      	lsrs	r3, r4, #16
 8005b0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b16:	b289      	uxth	r1, r1
 8005b18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b1c:	45c8      	cmp	r8, r9
 8005b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b22:	4694      	mov	ip, r2
 8005b24:	f845 3b04 	str.w	r3, [r5], #4
 8005b28:	d8e8      	bhi.n	8005afc <__mdiff+0x5c>
 8005b2a:	45bc      	cmp	ip, r7
 8005b2c:	d304      	bcc.n	8005b38 <__mdiff+0x98>
 8005b2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b32:	b183      	cbz	r3, 8005b56 <__mdiff+0xb6>
 8005b34:	6106      	str	r6, [r0, #16]
 8005b36:	e7c5      	b.n	8005ac4 <__mdiff+0x24>
 8005b38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b3c:	fa1e f381 	uxtah	r3, lr, r1
 8005b40:	141a      	asrs	r2, r3, #16
 8005b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b50:	f845 3b04 	str.w	r3, [r5], #4
 8005b54:	e7e9      	b.n	8005b2a <__mdiff+0x8a>
 8005b56:	3e01      	subs	r6, #1
 8005b58:	e7e9      	b.n	8005b2e <__mdiff+0x8e>

08005b5a <__d2b>:
 8005b5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	2101      	movs	r1, #1
 8005b62:	ec59 8b10 	vmov	r8, r9, d0
 8005b66:	4615      	mov	r5, r2
 8005b68:	f7ff fd6b 	bl	8005642 <_Balloc>
 8005b6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b70:	4607      	mov	r7, r0
 8005b72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b76:	bb34      	cbnz	r4, 8005bc6 <__d2b+0x6c>
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	f1b8 0300 	subs.w	r3, r8, #0
 8005b7e:	d027      	beq.n	8005bd0 <__d2b+0x76>
 8005b80:	a802      	add	r0, sp, #8
 8005b82:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005b86:	f7ff fe01 	bl	800578c <__lo0bits>
 8005b8a:	9900      	ldr	r1, [sp, #0]
 8005b8c:	b1f0      	cbz	r0, 8005bcc <__d2b+0x72>
 8005b8e:	9a01      	ldr	r2, [sp, #4]
 8005b90:	f1c0 0320 	rsb	r3, r0, #32
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	40c2      	lsrs	r2, r0
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	9201      	str	r2, [sp, #4]
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2102      	movne	r1, #2
 8005baa:	2101      	moveq	r1, #1
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	b1c4      	cbz	r4, 8005be2 <__d2b+0x88>
 8005bb0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bb4:	4404      	add	r4, r0
 8005bb6:	6034      	str	r4, [r6, #0]
 8005bb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bbc:	6028      	str	r0, [r5, #0]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	b003      	add	sp, #12
 8005bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bca:	e7d5      	b.n	8005b78 <__d2b+0x1e>
 8005bcc:	6179      	str	r1, [r7, #20]
 8005bce:	e7e7      	b.n	8005ba0 <__d2b+0x46>
 8005bd0:	a801      	add	r0, sp, #4
 8005bd2:	f7ff fddb 	bl	800578c <__lo0bits>
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	6139      	str	r1, [r7, #16]
 8005bde:	3020      	adds	r0, #32
 8005be0:	e7e5      	b.n	8005bae <__d2b+0x54>
 8005be2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005be6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bea:	6030      	str	r0, [r6, #0]
 8005bec:	6918      	ldr	r0, [r3, #16]
 8005bee:	f7ff fdae 	bl	800574e <__hi0bits>
 8005bf2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005bf6:	e7e1      	b.n	8005bbc <__d2b+0x62>

08005bf8 <_calloc_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	fb02 f401 	mul.w	r4, r2, r1
 8005bfe:	4621      	mov	r1, r4
 8005c00:	f000 f856 	bl	8005cb0 <_malloc_r>
 8005c04:	4605      	mov	r5, r0
 8005c06:	b118      	cbz	r0, 8005c10 <_calloc_r+0x18>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f7fe fa22 	bl	8004054 <memset>
 8005c10:	4628      	mov	r0, r5
 8005c12:	bd38      	pop	{r3, r4, r5, pc}

08005c14 <_free_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4605      	mov	r5, r0
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	d045      	beq.n	8005ca8 <_free_r+0x94>
 8005c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c20:	1f0c      	subs	r4, r1, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfb8      	it	lt
 8005c26:	18e4      	addlt	r4, r4, r3
 8005c28:	f000 fa17 	bl	800605a <__malloc_lock>
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <_free_r+0x98>)
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	4610      	mov	r0, r2
 8005c32:	b933      	cbnz	r3, 8005c42 <_free_r+0x2e>
 8005c34:	6063      	str	r3, [r4, #4]
 8005c36:	6014      	str	r4, [r2, #0]
 8005c38:	4628      	mov	r0, r5
 8005c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c3e:	f000 ba0d 	b.w	800605c <__malloc_unlock>
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	d90c      	bls.n	8005c60 <_free_r+0x4c>
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	1862      	adds	r2, r4, r1
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	bf04      	itt	eq
 8005c4e:	681a      	ldreq	r2, [r3, #0]
 8005c50:	685b      	ldreq	r3, [r3, #4]
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	bf04      	itt	eq
 8005c56:	1852      	addeq	r2, r2, r1
 8005c58:	6022      	streq	r2, [r4, #0]
 8005c5a:	6004      	str	r4, [r0, #0]
 8005c5c:	e7ec      	b.n	8005c38 <_free_r+0x24>
 8005c5e:	4613      	mov	r3, r2
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	b10a      	cbz	r2, 8005c68 <_free_r+0x54>
 8005c64:	42a2      	cmp	r2, r4
 8005c66:	d9fa      	bls.n	8005c5e <_free_r+0x4a>
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	1858      	adds	r0, r3, r1
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d10b      	bne.n	8005c88 <_free_r+0x74>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	4401      	add	r1, r0
 8005c74:	1858      	adds	r0, r3, r1
 8005c76:	4282      	cmp	r2, r0
 8005c78:	6019      	str	r1, [r3, #0]
 8005c7a:	d1dd      	bne.n	8005c38 <_free_r+0x24>
 8005c7c:	6810      	ldr	r0, [r2, #0]
 8005c7e:	6852      	ldr	r2, [r2, #4]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	4401      	add	r1, r0
 8005c84:	6019      	str	r1, [r3, #0]
 8005c86:	e7d7      	b.n	8005c38 <_free_r+0x24>
 8005c88:	d902      	bls.n	8005c90 <_free_r+0x7c>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	e7d3      	b.n	8005c38 <_free_r+0x24>
 8005c90:	6820      	ldr	r0, [r4, #0]
 8005c92:	1821      	adds	r1, r4, r0
 8005c94:	428a      	cmp	r2, r1
 8005c96:	bf04      	itt	eq
 8005c98:	6811      	ldreq	r1, [r2, #0]
 8005c9a:	6852      	ldreq	r2, [r2, #4]
 8005c9c:	6062      	str	r2, [r4, #4]
 8005c9e:	bf04      	itt	eq
 8005ca0:	1809      	addeq	r1, r1, r0
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	605c      	str	r4, [r3, #4]
 8005ca6:	e7c7      	b.n	8005c38 <_free_r+0x24>
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	bf00      	nop
 8005cac:	2000027c 	.word	0x2000027c

08005cb0 <_malloc_r>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	1ccd      	adds	r5, r1, #3
 8005cb4:	f025 0503 	bic.w	r5, r5, #3
 8005cb8:	3508      	adds	r5, #8
 8005cba:	2d0c      	cmp	r5, #12
 8005cbc:	bf38      	it	cc
 8005cbe:	250c      	movcc	r5, #12
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	db01      	blt.n	8005cca <_malloc_r+0x1a>
 8005cc6:	42a9      	cmp	r1, r5
 8005cc8:	d903      	bls.n	8005cd2 <_malloc_r+0x22>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	2000      	movs	r0, #0
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	f000 f9c2 	bl	800605a <__malloc_lock>
 8005cd6:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <_malloc_r+0xac>)
 8005cd8:	6814      	ldr	r4, [r2, #0]
 8005cda:	4621      	mov	r1, r4
 8005cdc:	b991      	cbnz	r1, 8005d04 <_malloc_r+0x54>
 8005cde:	4c20      	ldr	r4, [pc, #128]	; (8005d60 <_malloc_r+0xb0>)
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	b91b      	cbnz	r3, 8005cec <_malloc_r+0x3c>
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f98f 	bl	8006008 <_sbrk_r>
 8005cea:	6020      	str	r0, [r4, #0]
 8005cec:	4629      	mov	r1, r5
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f000 f98a 	bl	8006008 <_sbrk_r>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d124      	bne.n	8005d42 <_malloc_r+0x92>
 8005cf8:	230c      	movs	r3, #12
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f000 f9ad 	bl	800605c <__malloc_unlock>
 8005d02:	e7e4      	b.n	8005cce <_malloc_r+0x1e>
 8005d04:	680b      	ldr	r3, [r1, #0]
 8005d06:	1b5b      	subs	r3, r3, r5
 8005d08:	d418      	bmi.n	8005d3c <_malloc_r+0x8c>
 8005d0a:	2b0b      	cmp	r3, #11
 8005d0c:	d90f      	bls.n	8005d2e <_malloc_r+0x7e>
 8005d0e:	600b      	str	r3, [r1, #0]
 8005d10:	50cd      	str	r5, [r1, r3]
 8005d12:	18cc      	adds	r4, r1, r3
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 f9a1 	bl	800605c <__malloc_unlock>
 8005d1a:	f104 000b 	add.w	r0, r4, #11
 8005d1e:	1d23      	adds	r3, r4, #4
 8005d20:	f020 0007 	bic.w	r0, r0, #7
 8005d24:	1ac3      	subs	r3, r0, r3
 8005d26:	d0d3      	beq.n	8005cd0 <_malloc_r+0x20>
 8005d28:	425a      	negs	r2, r3
 8005d2a:	50e2      	str	r2, [r4, r3]
 8005d2c:	e7d0      	b.n	8005cd0 <_malloc_r+0x20>
 8005d2e:	428c      	cmp	r4, r1
 8005d30:	684b      	ldr	r3, [r1, #4]
 8005d32:	bf16      	itet	ne
 8005d34:	6063      	strne	r3, [r4, #4]
 8005d36:	6013      	streq	r3, [r2, #0]
 8005d38:	460c      	movne	r4, r1
 8005d3a:	e7eb      	b.n	8005d14 <_malloc_r+0x64>
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	6849      	ldr	r1, [r1, #4]
 8005d40:	e7cc      	b.n	8005cdc <_malloc_r+0x2c>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d005      	beq.n	8005d58 <_malloc_r+0xa8>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f000 f95a 	bl	8006008 <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d0cf      	beq.n	8005cf8 <_malloc_r+0x48>
 8005d58:	6025      	str	r5, [r4, #0]
 8005d5a:	e7db      	b.n	8005d14 <_malloc_r+0x64>
 8005d5c:	2000027c 	.word	0x2000027c
 8005d60:	20000280 	.word	0x20000280

08005d64 <__ssputs_r>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	688e      	ldr	r6, [r1, #8]
 8005d6a:	429e      	cmp	r6, r3
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4690      	mov	r8, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	d837      	bhi.n	8005de6 <__ssputs_r+0x82>
 8005d76:	898a      	ldrh	r2, [r1, #12]
 8005d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d7c:	d031      	beq.n	8005de2 <__ssputs_r+0x7e>
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	6909      	ldr	r1, [r1, #16]
 8005d82:	1a6f      	subs	r7, r5, r1
 8005d84:	6965      	ldr	r5, [r4, #20]
 8005d86:	2302      	movs	r3, #2
 8005d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d90:	f109 0301 	add.w	r3, r9, #1
 8005d94:	443b      	add	r3, r7
 8005d96:	429d      	cmp	r5, r3
 8005d98:	bf38      	it	cc
 8005d9a:	461d      	movcc	r5, r3
 8005d9c:	0553      	lsls	r3, r2, #21
 8005d9e:	d530      	bpl.n	8005e02 <__ssputs_r+0x9e>
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7ff ff85 	bl	8005cb0 <_malloc_r>
 8005da6:	4606      	mov	r6, r0
 8005da8:	b950      	cbnz	r0, 8005dc0 <__ssputs_r+0x5c>
 8005daa:	230c      	movs	r3, #12
 8005dac:	f8ca 3000 	str.w	r3, [sl]
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	463a      	mov	r2, r7
 8005dc2:	6921      	ldr	r1, [r4, #16]
 8005dc4:	f7ff fc32 	bl	800562c <memcpy>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	6126      	str	r6, [r4, #16]
 8005dd6:	6165      	str	r5, [r4, #20]
 8005dd8:	443e      	add	r6, r7
 8005dda:	1bed      	subs	r5, r5, r7
 8005ddc:	6026      	str	r6, [r4, #0]
 8005dde:	60a5      	str	r5, [r4, #8]
 8005de0:	464e      	mov	r6, r9
 8005de2:	454e      	cmp	r6, r9
 8005de4:	d900      	bls.n	8005de8 <__ssputs_r+0x84>
 8005de6:	464e      	mov	r6, r9
 8005de8:	4632      	mov	r2, r6
 8005dea:	4641      	mov	r1, r8
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	f000 f91b 	bl	8006028 <memmove>
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	1b9b      	subs	r3, r3, r6
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	441e      	add	r6, r3
 8005dfc:	6026      	str	r6, [r4, #0]
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e7dc      	b.n	8005dbc <__ssputs_r+0x58>
 8005e02:	462a      	mov	r2, r5
 8005e04:	f000 f92b 	bl	800605e <_realloc_r>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d1e2      	bne.n	8005dd4 <__ssputs_r+0x70>
 8005e0e:	6921      	ldr	r1, [r4, #16]
 8005e10:	4650      	mov	r0, sl
 8005e12:	f7ff feff 	bl	8005c14 <_free_r>
 8005e16:	e7c8      	b.n	8005daa <__ssputs_r+0x46>

08005e18 <_svfiprintf_r>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	898b      	ldrh	r3, [r1, #12]
 8005e20:	061f      	lsls	r7, r3, #24
 8005e22:	b09d      	sub	sp, #116	; 0x74
 8005e24:	4680      	mov	r8, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	4616      	mov	r6, r2
 8005e2a:	d50f      	bpl.n	8005e4c <_svfiprintf_r+0x34>
 8005e2c:	690b      	ldr	r3, [r1, #16]
 8005e2e:	b96b      	cbnz	r3, 8005e4c <_svfiprintf_r+0x34>
 8005e30:	2140      	movs	r1, #64	; 0x40
 8005e32:	f7ff ff3d 	bl	8005cb0 <_malloc_r>
 8005e36:	6020      	str	r0, [r4, #0]
 8005e38:	6120      	str	r0, [r4, #16]
 8005e3a:	b928      	cbnz	r0, 8005e48 <_svfiprintf_r+0x30>
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	f8c8 3000 	str.w	r3, [r8]
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	e0c8      	b.n	8005fda <_svfiprintf_r+0x1c2>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	6163      	str	r3, [r4, #20]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e50:	2320      	movs	r3, #32
 8005e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e56:	2330      	movs	r3, #48	; 0x30
 8005e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e5c:	9503      	str	r5, [sp, #12]
 8005e5e:	f04f 0b01 	mov.w	fp, #1
 8005e62:	4637      	mov	r7, r6
 8005e64:	463d      	mov	r5, r7
 8005e66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e6a:	b10b      	cbz	r3, 8005e70 <_svfiprintf_r+0x58>
 8005e6c:	2b25      	cmp	r3, #37	; 0x25
 8005e6e:	d13e      	bne.n	8005eee <_svfiprintf_r+0xd6>
 8005e70:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e74:	d00b      	beq.n	8005e8e <_svfiprintf_r+0x76>
 8005e76:	4653      	mov	r3, sl
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	f7ff ff71 	bl	8005d64 <__ssputs_r>
 8005e82:	3001      	adds	r0, #1
 8005e84:	f000 80a4 	beq.w	8005fd0 <_svfiprintf_r+0x1b8>
 8005e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8a:	4453      	add	r3, sl
 8005e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8e:	783b      	ldrb	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 809d 	beq.w	8005fd0 <_svfiprintf_r+0x1b8>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8005eaa:	462f      	mov	r7, r5
 8005eac:	2205      	movs	r2, #5
 8005eae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005eb2:	4850      	ldr	r0, [pc, #320]	; (8005ff4 <_svfiprintf_r+0x1dc>)
 8005eb4:	f7fa f994 	bl	80001e0 <memchr>
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	b9d0      	cbnz	r0, 8005ef2 <_svfiprintf_r+0xda>
 8005ebc:	06d9      	lsls	r1, r3, #27
 8005ebe:	bf44      	itt	mi
 8005ec0:	2220      	movmi	r2, #32
 8005ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ec6:	071a      	lsls	r2, r3, #28
 8005ec8:	bf44      	itt	mi
 8005eca:	222b      	movmi	r2, #43	; 0x2b
 8005ecc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ed0:	782a      	ldrb	r2, [r5, #0]
 8005ed2:	2a2a      	cmp	r2, #42	; 0x2a
 8005ed4:	d015      	beq.n	8005f02 <_svfiprintf_r+0xea>
 8005ed6:	9a07      	ldr	r2, [sp, #28]
 8005ed8:	462f      	mov	r7, r5
 8005eda:	2000      	movs	r0, #0
 8005edc:	250a      	movs	r5, #10
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee4:	3b30      	subs	r3, #48	; 0x30
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d94d      	bls.n	8005f86 <_svfiprintf_r+0x16e>
 8005eea:	b1b8      	cbz	r0, 8005f1c <_svfiprintf_r+0x104>
 8005eec:	e00f      	b.n	8005f0e <_svfiprintf_r+0xf6>
 8005eee:	462f      	mov	r7, r5
 8005ef0:	e7b8      	b.n	8005e64 <_svfiprintf_r+0x4c>
 8005ef2:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <_svfiprintf_r+0x1dc>)
 8005ef4:	1a80      	subs	r0, r0, r2
 8005ef6:	fa0b f000 	lsl.w	r0, fp, r0
 8005efa:	4318      	orrs	r0, r3
 8005efc:	9004      	str	r0, [sp, #16]
 8005efe:	463d      	mov	r5, r7
 8005f00:	e7d3      	b.n	8005eaa <_svfiprintf_r+0x92>
 8005f02:	9a03      	ldr	r2, [sp, #12]
 8005f04:	1d11      	adds	r1, r2, #4
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	9103      	str	r1, [sp, #12]
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	db01      	blt.n	8005f12 <_svfiprintf_r+0xfa>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e004      	b.n	8005f1c <_svfiprintf_r+0x104>
 8005f12:	4252      	negs	r2, r2
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	9207      	str	r2, [sp, #28]
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	783b      	ldrb	r3, [r7, #0]
 8005f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f20:	d10c      	bne.n	8005f3c <_svfiprintf_r+0x124>
 8005f22:	787b      	ldrb	r3, [r7, #1]
 8005f24:	2b2a      	cmp	r3, #42	; 0x2a
 8005f26:	d133      	bne.n	8005f90 <_svfiprintf_r+0x178>
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	9203      	str	r2, [sp, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfb8      	it	lt
 8005f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f38:	3702      	adds	r7, #2
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	4d2e      	ldr	r5, [pc, #184]	; (8005ff8 <_svfiprintf_r+0x1e0>)
 8005f3e:	7839      	ldrb	r1, [r7, #0]
 8005f40:	2203      	movs	r2, #3
 8005f42:	4628      	mov	r0, r5
 8005f44:	f7fa f94c 	bl	80001e0 <memchr>
 8005f48:	b138      	cbz	r0, 8005f5a <_svfiprintf_r+0x142>
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	1b40      	subs	r0, r0, r5
 8005f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f52:	9b04      	ldr	r3, [sp, #16]
 8005f54:	4303      	orrs	r3, r0
 8005f56:	3701      	adds	r7, #1
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	7839      	ldrb	r1, [r7, #0]
 8005f5c:	4827      	ldr	r0, [pc, #156]	; (8005ffc <_svfiprintf_r+0x1e4>)
 8005f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f62:	2206      	movs	r2, #6
 8005f64:	1c7e      	adds	r6, r7, #1
 8005f66:	f7fa f93b 	bl	80001e0 <memchr>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d038      	beq.n	8005fe0 <_svfiprintf_r+0x1c8>
 8005f6e:	4b24      	ldr	r3, [pc, #144]	; (8006000 <_svfiprintf_r+0x1e8>)
 8005f70:	bb13      	cbnz	r3, 8005fb8 <_svfiprintf_r+0x1a0>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	3307      	adds	r3, #7
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	9303      	str	r3, [sp, #12]
 8005f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f80:	444b      	add	r3, r9
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	e76d      	b.n	8005e62 <_svfiprintf_r+0x4a>
 8005f86:	fb05 3202 	mla	r2, r5, r2, r3
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	e7a6      	b.n	8005ede <_svfiprintf_r+0xc6>
 8005f90:	2300      	movs	r3, #0
 8005f92:	3701      	adds	r7, #1
 8005f94:	9305      	str	r3, [sp, #20]
 8005f96:	4619      	mov	r1, r3
 8005f98:	250a      	movs	r5, #10
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa0:	3a30      	subs	r2, #48	; 0x30
 8005fa2:	2a09      	cmp	r2, #9
 8005fa4:	d903      	bls.n	8005fae <_svfiprintf_r+0x196>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0c8      	beq.n	8005f3c <_svfiprintf_r+0x124>
 8005faa:	9105      	str	r1, [sp, #20]
 8005fac:	e7c6      	b.n	8005f3c <_svfiprintf_r+0x124>
 8005fae:	fb05 2101 	mla	r1, r5, r1, r2
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	e7f0      	b.n	8005f9a <_svfiprintf_r+0x182>
 8005fb8:	ab03      	add	r3, sp, #12
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4b11      	ldr	r3, [pc, #68]	; (8006004 <_svfiprintf_r+0x1ec>)
 8005fc0:	a904      	add	r1, sp, #16
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7fe f8e2 	bl	800418c <_printf_float>
 8005fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fcc:	4681      	mov	r9, r0
 8005fce:	d1d6      	bne.n	8005f7e <_svfiprintf_r+0x166>
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	065b      	lsls	r3, r3, #25
 8005fd4:	f53f af35 	bmi.w	8005e42 <_svfiprintf_r+0x2a>
 8005fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fda:	b01d      	add	sp, #116	; 0x74
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	ab03      	add	r3, sp, #12
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <_svfiprintf_r+0x1ec>)
 8005fe8:	a904      	add	r1, sp, #16
 8005fea:	4640      	mov	r0, r8
 8005fec:	f7fe fb84 	bl	80046f8 <_printf_i>
 8005ff0:	e7ea      	b.n	8005fc8 <_svfiprintf_r+0x1b0>
 8005ff2:	bf00      	nop
 8005ff4:	080079a4 	.word	0x080079a4
 8005ff8:	080079aa 	.word	0x080079aa
 8005ffc:	080079ae 	.word	0x080079ae
 8006000:	0800418d 	.word	0x0800418d
 8006004:	08005d65 	.word	0x08005d65

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4c06      	ldr	r4, [pc, #24]	; (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4605      	mov	r5, r0
 8006010:	4608      	mov	r0, r1
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	f7fc fc7e 	bl	8002914 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200002b4 	.word	0x200002b4

08006028 <memmove>:
 8006028:	4288      	cmp	r0, r1
 800602a:	b510      	push	{r4, lr}
 800602c:	eb01 0302 	add.w	r3, r1, r2
 8006030:	d807      	bhi.n	8006042 <memmove+0x1a>
 8006032:	1e42      	subs	r2, r0, #1
 8006034:	4299      	cmp	r1, r3
 8006036:	d00a      	beq.n	800604e <memmove+0x26>
 8006038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800603c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006040:	e7f8      	b.n	8006034 <memmove+0xc>
 8006042:	4283      	cmp	r3, r0
 8006044:	d9f5      	bls.n	8006032 <memmove+0xa>
 8006046:	1881      	adds	r1, r0, r2
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	42d3      	cmn	r3, r2
 800604c:	d100      	bne.n	8006050 <memmove+0x28>
 800604e:	bd10      	pop	{r4, pc}
 8006050:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006054:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006058:	e7f7      	b.n	800604a <memmove+0x22>

0800605a <__malloc_lock>:
 800605a:	4770      	bx	lr

0800605c <__malloc_unlock>:
 800605c:	4770      	bx	lr

0800605e <_realloc_r>:
 800605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006060:	4607      	mov	r7, r0
 8006062:	4614      	mov	r4, r2
 8006064:	460e      	mov	r6, r1
 8006066:	b921      	cbnz	r1, 8006072 <_realloc_r+0x14>
 8006068:	4611      	mov	r1, r2
 800606a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800606e:	f7ff be1f 	b.w	8005cb0 <_malloc_r>
 8006072:	b922      	cbnz	r2, 800607e <_realloc_r+0x20>
 8006074:	f7ff fdce 	bl	8005c14 <_free_r>
 8006078:	4625      	mov	r5, r4
 800607a:	4628      	mov	r0, r5
 800607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607e:	f000 f814 	bl	80060aa <_malloc_usable_size_r>
 8006082:	42a0      	cmp	r0, r4
 8006084:	d20f      	bcs.n	80060a6 <_realloc_r+0x48>
 8006086:	4621      	mov	r1, r4
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fe11 	bl	8005cb0 <_malloc_r>
 800608e:	4605      	mov	r5, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	d0f2      	beq.n	800607a <_realloc_r+0x1c>
 8006094:	4631      	mov	r1, r6
 8006096:	4622      	mov	r2, r4
 8006098:	f7ff fac8 	bl	800562c <memcpy>
 800609c:	4631      	mov	r1, r6
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff fdb8 	bl	8005c14 <_free_r>
 80060a4:	e7e9      	b.n	800607a <_realloc_r+0x1c>
 80060a6:	4635      	mov	r5, r6
 80060a8:	e7e7      	b.n	800607a <_realloc_r+0x1c>

080060aa <_malloc_usable_size_r>:
 80060aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ae:	1f18      	subs	r0, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bfbc      	itt	lt
 80060b4:	580b      	ldrlt	r3, [r1, r0]
 80060b6:	18c0      	addlt	r0, r0, r3
 80060b8:	4770      	bx	lr

080060ba <atan2>:
 80060ba:	f000 b971 	b.w	80063a0 <__ieee754_atan2>
	...

080060c0 <pow>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	ed2d 8b04 	vpush	{d8-d9}
 80060c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800639c <pow+0x2dc>
 80060cc:	b08d      	sub	sp, #52	; 0x34
 80060ce:	ec57 6b10 	vmov	r6, r7, d0
 80060d2:	ec55 4b11 	vmov	r4, r5, d1
 80060d6:	f000 fa43 	bl	8006560 <__ieee754_pow>
 80060da:	f999 3000 	ldrsb.w	r3, [r9]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	eeb0 8a40 	vmov.f32	s16, s0
 80060e6:	eef0 8a60 	vmov.f32	s17, s1
 80060ea:	46c8      	mov	r8, r9
 80060ec:	d05f      	beq.n	80061ae <pow+0xee>
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	f7fa fd19 	bl	8000b2c <__aeabi_dcmpun>
 80060fa:	4683      	mov	fp, r0
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d156      	bne.n	80061ae <pow+0xee>
 8006100:	4632      	mov	r2, r6
 8006102:	463b      	mov	r3, r7
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fd10 	bl	8000b2c <__aeabi_dcmpun>
 800610c:	9001      	str	r0, [sp, #4]
 800610e:	b1e8      	cbz	r0, 800614c <pow+0x8c>
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800611c:	2800      	cmp	r0, #0
 800611e:	d046      	beq.n	80061ae <pow+0xee>
 8006120:	2301      	movs	r3, #1
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	4b96      	ldr	r3, [pc, #600]	; (8006380 <pow+0x2c0>)
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	4b96      	ldr	r3, [pc, #600]	; (8006384 <pow+0x2c4>)
 800612a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800612e:	2200      	movs	r2, #0
 8006130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006134:	9b00      	ldr	r3, [sp, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800613c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006140:	d033      	beq.n	80061aa <pow+0xea>
 8006142:	a802      	add	r0, sp, #8
 8006144:	f001 f97d 	bl	8007442 <matherr>
 8006148:	bb48      	cbnz	r0, 800619e <pow+0xde>
 800614a:	e05d      	b.n	8006208 <pow+0x148>
 800614c:	f04f 0a00 	mov.w	sl, #0
 8006150:	f04f 0b00 	mov.w	fp, #0
 8006154:	4652      	mov	r2, sl
 8006156:	465b      	mov	r3, fp
 8006158:	4630      	mov	r0, r6
 800615a:	4639      	mov	r1, r7
 800615c:	f7fa fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006160:	ec4b ab19 	vmov	d9, sl, fp
 8006164:	2800      	cmp	r0, #0
 8006166:	d054      	beq.n	8006212 <pow+0x152>
 8006168:	4652      	mov	r2, sl
 800616a:	465b      	mov	r3, fp
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	f7fa fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006174:	4680      	mov	r8, r0
 8006176:	b318      	cbz	r0, 80061c0 <pow+0x100>
 8006178:	2301      	movs	r3, #1
 800617a:	9302      	str	r3, [sp, #8]
 800617c:	4b80      	ldr	r3, [pc, #512]	; (8006380 <pow+0x2c0>)
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	930a      	str	r3, [sp, #40]	; 0x28
 8006184:	9b00      	ldr	r3, [sp, #0]
 8006186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800618a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800618e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0d5      	beq.n	8006142 <pow+0x82>
 8006196:	4b7b      	ldr	r3, [pc, #492]	; (8006384 <pow+0x2c4>)
 8006198:	2200      	movs	r2, #0
 800619a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a0:	b11b      	cbz	r3, 80061aa <pow+0xea>
 80061a2:	f7fd ff0d 	bl	8003fc0 <__errno>
 80061a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80061ae:	eeb0 0a48 	vmov.f32	s0, s16
 80061b2:	eef0 0a68 	vmov.f32	s1, s17
 80061b6:	b00d      	add	sp, #52	; 0x34
 80061b8:	ecbd 8b04 	vpop	{d8-d9}
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	ec45 4b10 	vmov	d0, r4, r5
 80061c4:	f001 f935 	bl	8007432 <finite>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0f0      	beq.n	80061ae <pow+0xee>
 80061cc:	4652      	mov	r2, sl
 80061ce:	465b      	mov	r3, fp
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa fc82 	bl	8000adc <__aeabi_dcmplt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0e8      	beq.n	80061ae <pow+0xee>
 80061dc:	2301      	movs	r3, #1
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	4b67      	ldr	r3, [pc, #412]	; (8006380 <pow+0x2c0>)
 80061e2:	9303      	str	r3, [sp, #12]
 80061e4:	f999 3000 	ldrsb.w	r3, [r9]
 80061e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80061ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80061f4:	b913      	cbnz	r3, 80061fc <pow+0x13c>
 80061f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80061fa:	e7a2      	b.n	8006142 <pow+0x82>
 80061fc:	4962      	ldr	r1, [pc, #392]	; (8006388 <pow+0x2c8>)
 80061fe:	2000      	movs	r0, #0
 8006200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d19c      	bne.n	8006142 <pow+0x82>
 8006208:	f7fd feda 	bl	8003fc0 <__errno>
 800620c:	2321      	movs	r3, #33	; 0x21
 800620e:	6003      	str	r3, [r0, #0]
 8006210:	e7c5      	b.n	800619e <pow+0xde>
 8006212:	eeb0 0a48 	vmov.f32	s0, s16
 8006216:	eef0 0a68 	vmov.f32	s1, s17
 800621a:	f001 f90a 	bl	8007432 <finite>
 800621e:	9000      	str	r0, [sp, #0]
 8006220:	2800      	cmp	r0, #0
 8006222:	f040 8081 	bne.w	8006328 <pow+0x268>
 8006226:	ec47 6b10 	vmov	d0, r6, r7
 800622a:	f001 f902 	bl	8007432 <finite>
 800622e:	2800      	cmp	r0, #0
 8006230:	d07a      	beq.n	8006328 <pow+0x268>
 8006232:	ec45 4b10 	vmov	d0, r4, r5
 8006236:	f001 f8fc 	bl	8007432 <finite>
 800623a:	2800      	cmp	r0, #0
 800623c:	d074      	beq.n	8006328 <pow+0x268>
 800623e:	ec53 2b18 	vmov	r2, r3, d8
 8006242:	ee18 0a10 	vmov	r0, s16
 8006246:	4619      	mov	r1, r3
 8006248:	f7fa fc70 	bl	8000b2c <__aeabi_dcmpun>
 800624c:	f999 9000 	ldrsb.w	r9, [r9]
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <pow+0x2c0>)
 8006252:	b1b0      	cbz	r0, 8006282 <pow+0x1c2>
 8006254:	2201      	movs	r2, #1
 8006256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800625a:	9b00      	ldr	r3, [sp, #0]
 800625c:	930a      	str	r3, [sp, #40]	; 0x28
 800625e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006262:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006266:	f1b9 0f00 	cmp.w	r9, #0
 800626a:	d0c4      	beq.n	80061f6 <pow+0x136>
 800626c:	4652      	mov	r2, sl
 800626e:	465b      	mov	r3, fp
 8006270:	4650      	mov	r0, sl
 8006272:	4659      	mov	r1, fp
 8006274:	f7fa faea 	bl	800084c <__aeabi_ddiv>
 8006278:	f1b9 0f02 	cmp.w	r9, #2
 800627c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006280:	e7c1      	b.n	8006206 <pow+0x146>
 8006282:	2203      	movs	r2, #3
 8006284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006288:	900a      	str	r0, [sp, #40]	; 0x28
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	2200      	movs	r2, #0
 8006290:	4b3e      	ldr	r3, [pc, #248]	; (800638c <pow+0x2cc>)
 8006292:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800629a:	f7fa f9ad 	bl	80005f8 <__aeabi_dmul>
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	d124      	bne.n	80062f2 <pow+0x232>
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <pow+0x2d0>)
 80062aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80062ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062b2:	4630      	mov	r0, r6
 80062b4:	4652      	mov	r2, sl
 80062b6:	465b      	mov	r3, fp
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fc0f 	bl	8000adc <__aeabi_dcmplt>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d056      	beq.n	8006370 <pow+0x2b0>
 80062c2:	ec45 4b10 	vmov	d0, r4, r5
 80062c6:	f001 f8c7 	bl	8007458 <rint>
 80062ca:	4622      	mov	r2, r4
 80062cc:	462b      	mov	r3, r5
 80062ce:	ec51 0b10 	vmov	r0, r1, d0
 80062d2:	f7fa fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80062d6:	b920      	cbnz	r0, 80062e2 <pow+0x222>
 80062d8:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <pow+0x2d4>)
 80062da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80062de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062e2:	f998 3000 	ldrsb.w	r3, [r8]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d142      	bne.n	8006370 <pow+0x2b0>
 80062ea:	f7fd fe69 	bl	8003fc0 <__errno>
 80062ee:	2322      	movs	r3, #34	; 0x22
 80062f0:	e78d      	b.n	800620e <pow+0x14e>
 80062f2:	4b29      	ldr	r3, [pc, #164]	; (8006398 <pow+0x2d8>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062fa:	4630      	mov	r0, r6
 80062fc:	4652      	mov	r2, sl
 80062fe:	465b      	mov	r3, fp
 8006300:	4639      	mov	r1, r7
 8006302:	f7fa fbeb 	bl	8000adc <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	d0eb      	beq.n	80062e2 <pow+0x222>
 800630a:	ec45 4b10 	vmov	d0, r4, r5
 800630e:	f001 f8a3 	bl	8007458 <rint>
 8006312:	4622      	mov	r2, r4
 8006314:	462b      	mov	r3, r5
 8006316:	ec51 0b10 	vmov	r0, r1, d0
 800631a:	f7fa fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800631e:	2800      	cmp	r0, #0
 8006320:	d1df      	bne.n	80062e2 <pow+0x222>
 8006322:	2200      	movs	r2, #0
 8006324:	4b18      	ldr	r3, [pc, #96]	; (8006388 <pow+0x2c8>)
 8006326:	e7da      	b.n	80062de <pow+0x21e>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	ec51 0b18 	vmov	r0, r1, d8
 8006330:	f7fa fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	f43f af3a 	beq.w	80061ae <pow+0xee>
 800633a:	ec47 6b10 	vmov	d0, r6, r7
 800633e:	f001 f878 	bl	8007432 <finite>
 8006342:	2800      	cmp	r0, #0
 8006344:	f43f af33 	beq.w	80061ae <pow+0xee>
 8006348:	ec45 4b10 	vmov	d0, r4, r5
 800634c:	f001 f871 	bl	8007432 <finite>
 8006350:	2800      	cmp	r0, #0
 8006352:	f43f af2c 	beq.w	80061ae <pow+0xee>
 8006356:	2304      	movs	r3, #4
 8006358:	9302      	str	r3, [sp, #8]
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <pow+0x2c0>)
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	2300      	movs	r3, #0
 8006360:	930a      	str	r3, [sp, #40]	; 0x28
 8006362:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800636a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800636e:	e7b8      	b.n	80062e2 <pow+0x222>
 8006370:	a802      	add	r0, sp, #8
 8006372:	f001 f866 	bl	8007442 <matherr>
 8006376:	2800      	cmp	r0, #0
 8006378:	f47f af11 	bne.w	800619e <pow+0xde>
 800637c:	e7b5      	b.n	80062ea <pow+0x22a>
 800637e:	bf00      	nop
 8006380:	080079b5 	.word	0x080079b5
 8006384:	3ff00000 	.word	0x3ff00000
 8006388:	fff00000 	.word	0xfff00000
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	47efffff 	.word	0x47efffff
 8006394:	c7efffff 	.word	0xc7efffff
 8006398:	7ff00000 	.word	0x7ff00000
 800639c:	20000234 	.word	0x20000234

080063a0 <__ieee754_atan2>:
 80063a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a4:	ec57 6b11 	vmov	r6, r7, d1
 80063a8:	4273      	negs	r3, r6
 80063aa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80063ae:	4333      	orrs	r3, r6
 80063b0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006558 <__ieee754_atan2+0x1b8>
 80063b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80063b8:	4573      	cmp	r3, lr
 80063ba:	ec51 0b10 	vmov	r0, r1, d0
 80063be:	ee11 8a10 	vmov	r8, s2
 80063c2:	d80a      	bhi.n	80063da <__ieee754_atan2+0x3a>
 80063c4:	4244      	negs	r4, r0
 80063c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063ca:	4304      	orrs	r4, r0
 80063cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80063d0:	4574      	cmp	r4, lr
 80063d2:	468c      	mov	ip, r1
 80063d4:	ee10 9a10 	vmov	r9, s0
 80063d8:	d907      	bls.n	80063ea <__ieee754_atan2+0x4a>
 80063da:	4632      	mov	r2, r6
 80063dc:	463b      	mov	r3, r7
 80063de:	f7f9 ff55 	bl	800028c <__adddf3>
 80063e2:	ec41 0b10 	vmov	d0, r0, r1
 80063e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80063ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063f2:	4334      	orrs	r4, r6
 80063f4:	d103      	bne.n	80063fe <__ieee754_atan2+0x5e>
 80063f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fa:	f000 be71 	b.w	80070e0 <atan>
 80063fe:	17bc      	asrs	r4, r7, #30
 8006400:	f004 0402 	and.w	r4, r4, #2
 8006404:	ea53 0909 	orrs.w	r9, r3, r9
 8006408:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800640c:	d107      	bne.n	800641e <__ieee754_atan2+0x7e>
 800640e:	2c02      	cmp	r4, #2
 8006410:	d073      	beq.n	80064fa <__ieee754_atan2+0x15a>
 8006412:	2c03      	cmp	r4, #3
 8006414:	d1e5      	bne.n	80063e2 <__ieee754_atan2+0x42>
 8006416:	a13e      	add	r1, pc, #248	; (adr r1, 8006510 <__ieee754_atan2+0x170>)
 8006418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800641c:	e7e1      	b.n	80063e2 <__ieee754_atan2+0x42>
 800641e:	ea52 0808 	orrs.w	r8, r2, r8
 8006422:	d106      	bne.n	8006432 <__ieee754_atan2+0x92>
 8006424:	f1bc 0f00 	cmp.w	ip, #0
 8006428:	da6b      	bge.n	8006502 <__ieee754_atan2+0x162>
 800642a:	a13b      	add	r1, pc, #236	; (adr r1, 8006518 <__ieee754_atan2+0x178>)
 800642c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006430:	e7d7      	b.n	80063e2 <__ieee754_atan2+0x42>
 8006432:	4572      	cmp	r2, lr
 8006434:	d120      	bne.n	8006478 <__ieee754_atan2+0xd8>
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <__ieee754_atan2+0xbe>
 800643a:	2c02      	cmp	r4, #2
 800643c:	d007      	beq.n	800644e <__ieee754_atan2+0xae>
 800643e:	2c03      	cmp	r4, #3
 8006440:	d009      	beq.n	8006456 <__ieee754_atan2+0xb6>
 8006442:	2c01      	cmp	r4, #1
 8006444:	d155      	bne.n	80064f2 <__ieee754_atan2+0x152>
 8006446:	a136      	add	r1, pc, #216	; (adr r1, 8006520 <__ieee754_atan2+0x180>)
 8006448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800644c:	e7c9      	b.n	80063e2 <__ieee754_atan2+0x42>
 800644e:	a136      	add	r1, pc, #216	; (adr r1, 8006528 <__ieee754_atan2+0x188>)
 8006450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006454:	e7c5      	b.n	80063e2 <__ieee754_atan2+0x42>
 8006456:	a136      	add	r1, pc, #216	; (adr r1, 8006530 <__ieee754_atan2+0x190>)
 8006458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800645c:	e7c1      	b.n	80063e2 <__ieee754_atan2+0x42>
 800645e:	2c02      	cmp	r4, #2
 8006460:	d04b      	beq.n	80064fa <__ieee754_atan2+0x15a>
 8006462:	2c03      	cmp	r4, #3
 8006464:	d0d7      	beq.n	8006416 <__ieee754_atan2+0x76>
 8006466:	2c01      	cmp	r4, #1
 8006468:	f04f 0000 	mov.w	r0, #0
 800646c:	d102      	bne.n	8006474 <__ieee754_atan2+0xd4>
 800646e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006472:	e7b6      	b.n	80063e2 <__ieee754_atan2+0x42>
 8006474:	2100      	movs	r1, #0
 8006476:	e7b4      	b.n	80063e2 <__ieee754_atan2+0x42>
 8006478:	4573      	cmp	r3, lr
 800647a:	d0d3      	beq.n	8006424 <__ieee754_atan2+0x84>
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	151b      	asrs	r3, r3, #20
 8006480:	2b3c      	cmp	r3, #60	; 0x3c
 8006482:	dc1e      	bgt.n	80064c2 <__ieee754_atan2+0x122>
 8006484:	2f00      	cmp	r7, #0
 8006486:	da01      	bge.n	800648c <__ieee754_atan2+0xec>
 8006488:	333c      	adds	r3, #60	; 0x3c
 800648a:	db1e      	blt.n	80064ca <__ieee754_atan2+0x12a>
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	f7fa f9dc 	bl	800084c <__aeabi_ddiv>
 8006494:	ec41 0b10 	vmov	d0, r0, r1
 8006498:	f000 ffc2 	bl	8007420 <fabs>
 800649c:	f000 fe20 	bl	80070e0 <atan>
 80064a0:	ec51 0b10 	vmov	r0, r1, d0
 80064a4:	2c01      	cmp	r4, #1
 80064a6:	d013      	beq.n	80064d0 <__ieee754_atan2+0x130>
 80064a8:	2c02      	cmp	r4, #2
 80064aa:	d015      	beq.n	80064d8 <__ieee754_atan2+0x138>
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d098      	beq.n	80063e2 <__ieee754_atan2+0x42>
 80064b0:	a321      	add	r3, pc, #132	; (adr r3, 8006538 <__ieee754_atan2+0x198>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7f9 fee7 	bl	8000288 <__aeabi_dsub>
 80064ba:	a321      	add	r3, pc, #132	; (adr r3, 8006540 <__ieee754_atan2+0x1a0>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	e014      	b.n	80064ec <__ieee754_atan2+0x14c>
 80064c2:	a121      	add	r1, pc, #132	; (adr r1, 8006548 <__ieee754_atan2+0x1a8>)
 80064c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064c8:	e7ec      	b.n	80064a4 <__ieee754_atan2+0x104>
 80064ca:	2000      	movs	r0, #0
 80064cc:	2100      	movs	r1, #0
 80064ce:	e7e9      	b.n	80064a4 <__ieee754_atan2+0x104>
 80064d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064d4:	4619      	mov	r1, r3
 80064d6:	e784      	b.n	80063e2 <__ieee754_atan2+0x42>
 80064d8:	a317      	add	r3, pc, #92	; (adr r3, 8006538 <__ieee754_atan2+0x198>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	a116      	add	r1, pc, #88	; (adr r1, 8006540 <__ieee754_atan2+0x1a0>)
 80064e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ec:	f7f9 fecc 	bl	8000288 <__aeabi_dsub>
 80064f0:	e777      	b.n	80063e2 <__ieee754_atan2+0x42>
 80064f2:	a117      	add	r1, pc, #92	; (adr r1, 8006550 <__ieee754_atan2+0x1b0>)
 80064f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f8:	e773      	b.n	80063e2 <__ieee754_atan2+0x42>
 80064fa:	a111      	add	r1, pc, #68	; (adr r1, 8006540 <__ieee754_atan2+0x1a0>)
 80064fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006500:	e76f      	b.n	80063e2 <__ieee754_atan2+0x42>
 8006502:	a111      	add	r1, pc, #68	; (adr r1, 8006548 <__ieee754_atan2+0x1a8>)
 8006504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006508:	e76b      	b.n	80063e2 <__ieee754_atan2+0x42>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	54442d18 	.word	0x54442d18
 8006514:	c00921fb 	.word	0xc00921fb
 8006518:	54442d18 	.word	0x54442d18
 800651c:	bff921fb 	.word	0xbff921fb
 8006520:	54442d18 	.word	0x54442d18
 8006524:	bfe921fb 	.word	0xbfe921fb
 8006528:	7f3321d2 	.word	0x7f3321d2
 800652c:	4002d97c 	.word	0x4002d97c
 8006530:	7f3321d2 	.word	0x7f3321d2
 8006534:	c002d97c 	.word	0xc002d97c
 8006538:	33145c07 	.word	0x33145c07
 800653c:	3ca1a626 	.word	0x3ca1a626
 8006540:	54442d18 	.word	0x54442d18
 8006544:	400921fb 	.word	0x400921fb
 8006548:	54442d18 	.word	0x54442d18
 800654c:	3ff921fb 	.word	0x3ff921fb
 8006550:	54442d18 	.word	0x54442d18
 8006554:	3fe921fb 	.word	0x3fe921fb
 8006558:	7ff00000 	.word	0x7ff00000
 800655c:	00000000 	.word	0x00000000

08006560 <__ieee754_pow>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b091      	sub	sp, #68	; 0x44
 8006566:	ed8d 1b00 	vstr	d1, [sp]
 800656a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800656e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006572:	ea58 0302 	orrs.w	r3, r8, r2
 8006576:	ec57 6b10 	vmov	r6, r7, d0
 800657a:	f000 84be 	beq.w	8006efa <__ieee754_pow+0x99a>
 800657e:	4b7a      	ldr	r3, [pc, #488]	; (8006768 <__ieee754_pow+0x208>)
 8006580:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006584:	429c      	cmp	r4, r3
 8006586:	463d      	mov	r5, r7
 8006588:	ee10 aa10 	vmov	sl, s0
 800658c:	dc09      	bgt.n	80065a2 <__ieee754_pow+0x42>
 800658e:	d103      	bne.n	8006598 <__ieee754_pow+0x38>
 8006590:	b93e      	cbnz	r6, 80065a2 <__ieee754_pow+0x42>
 8006592:	45a0      	cmp	r8, r4
 8006594:	dc0d      	bgt.n	80065b2 <__ieee754_pow+0x52>
 8006596:	e001      	b.n	800659c <__ieee754_pow+0x3c>
 8006598:	4598      	cmp	r8, r3
 800659a:	dc02      	bgt.n	80065a2 <__ieee754_pow+0x42>
 800659c:	4598      	cmp	r8, r3
 800659e:	d10e      	bne.n	80065be <__ieee754_pow+0x5e>
 80065a0:	b16a      	cbz	r2, 80065be <__ieee754_pow+0x5e>
 80065a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065aa:	ea54 030a 	orrs.w	r3, r4, sl
 80065ae:	f000 84a4 	beq.w	8006efa <__ieee754_pow+0x99a>
 80065b2:	486e      	ldr	r0, [pc, #440]	; (800676c <__ieee754_pow+0x20c>)
 80065b4:	b011      	add	sp, #68	; 0x44
 80065b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	f000 bf45 	b.w	8007448 <nan>
 80065be:	2d00      	cmp	r5, #0
 80065c0:	da53      	bge.n	800666a <__ieee754_pow+0x10a>
 80065c2:	4b6b      	ldr	r3, [pc, #428]	; (8006770 <__ieee754_pow+0x210>)
 80065c4:	4598      	cmp	r8, r3
 80065c6:	dc4d      	bgt.n	8006664 <__ieee754_pow+0x104>
 80065c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80065cc:	4598      	cmp	r8, r3
 80065ce:	dd4c      	ble.n	800666a <__ieee754_pow+0x10a>
 80065d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80065d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065d8:	2b14      	cmp	r3, #20
 80065da:	dd26      	ble.n	800662a <__ieee754_pow+0xca>
 80065dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80065e0:	fa22 f103 	lsr.w	r1, r2, r3
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d13e      	bne.n	800666a <__ieee754_pow+0x10a>
 80065ec:	f001 0101 	and.w	r1, r1, #1
 80065f0:	f1c1 0b02 	rsb	fp, r1, #2
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d15b      	bne.n	80066b0 <__ieee754_pow+0x150>
 80065f8:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <__ieee754_pow+0x208>)
 80065fa:	4598      	cmp	r8, r3
 80065fc:	d124      	bne.n	8006648 <__ieee754_pow+0xe8>
 80065fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006602:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006606:	ea53 030a 	orrs.w	r3, r3, sl
 800660a:	f000 8476 	beq.w	8006efa <__ieee754_pow+0x99a>
 800660e:	4b59      	ldr	r3, [pc, #356]	; (8006774 <__ieee754_pow+0x214>)
 8006610:	429c      	cmp	r4, r3
 8006612:	dd2d      	ble.n	8006670 <__ieee754_pow+0x110>
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	f280 8473 	bge.w	8006f02 <__ieee754_pow+0x9a2>
 800661c:	2000      	movs	r0, #0
 800661e:	2100      	movs	r1, #0
 8006620:	ec41 0b10 	vmov	d0, r0, r1
 8006624:	b011      	add	sp, #68	; 0x44
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	2a00      	cmp	r2, #0
 800662c:	d13e      	bne.n	80066ac <__ieee754_pow+0x14c>
 800662e:	f1c3 0314 	rsb	r3, r3, #20
 8006632:	fa48 f103 	asr.w	r1, r8, r3
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	4543      	cmp	r3, r8
 800663c:	f040 8469 	bne.w	8006f12 <__ieee754_pow+0x9b2>
 8006640:	f001 0101 	and.w	r1, r1, #1
 8006644:	f1c1 0b02 	rsb	fp, r1, #2
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <__ieee754_pow+0x218>)
 800664a:	4598      	cmp	r8, r3
 800664c:	d118      	bne.n	8006680 <__ieee754_pow+0x120>
 800664e:	f1b9 0f00 	cmp.w	r9, #0
 8006652:	f280 845a 	bge.w	8006f0a <__ieee754_pow+0x9aa>
 8006656:	4948      	ldr	r1, [pc, #288]	; (8006778 <__ieee754_pow+0x218>)
 8006658:	4632      	mov	r2, r6
 800665a:	463b      	mov	r3, r7
 800665c:	2000      	movs	r0, #0
 800665e:	f7fa f8f5 	bl	800084c <__aeabi_ddiv>
 8006662:	e7dd      	b.n	8006620 <__ieee754_pow+0xc0>
 8006664:	f04f 0b02 	mov.w	fp, #2
 8006668:	e7c4      	b.n	80065f4 <__ieee754_pow+0x94>
 800666a:	f04f 0b00 	mov.w	fp, #0
 800666e:	e7c1      	b.n	80065f4 <__ieee754_pow+0x94>
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	dad2      	bge.n	800661c <__ieee754_pow+0xbc>
 8006676:	e9dd 0300 	ldrd	r0, r3, [sp]
 800667a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800667e:	e7cf      	b.n	8006620 <__ieee754_pow+0xc0>
 8006680:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006684:	d106      	bne.n	8006694 <__ieee754_pow+0x134>
 8006686:	4632      	mov	r2, r6
 8006688:	463b      	mov	r3, r7
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	f7f9 ffb3 	bl	80005f8 <__aeabi_dmul>
 8006692:	e7c5      	b.n	8006620 <__ieee754_pow+0xc0>
 8006694:	4b39      	ldr	r3, [pc, #228]	; (800677c <__ieee754_pow+0x21c>)
 8006696:	4599      	cmp	r9, r3
 8006698:	d10a      	bne.n	80066b0 <__ieee754_pow+0x150>
 800669a:	2d00      	cmp	r5, #0
 800669c:	db08      	blt.n	80066b0 <__ieee754_pow+0x150>
 800669e:	ec47 6b10 	vmov	d0, r6, r7
 80066a2:	b011      	add	sp, #68	; 0x44
 80066a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	f000 bc68 	b.w	8006f7c <__ieee754_sqrt>
 80066ac:	f04f 0b00 	mov.w	fp, #0
 80066b0:	ec47 6b10 	vmov	d0, r6, r7
 80066b4:	f000 feb4 	bl	8007420 <fabs>
 80066b8:	ec51 0b10 	vmov	r0, r1, d0
 80066bc:	f1ba 0f00 	cmp.w	sl, #0
 80066c0:	d127      	bne.n	8006712 <__ieee754_pow+0x1b2>
 80066c2:	b124      	cbz	r4, 80066ce <__ieee754_pow+0x16e>
 80066c4:	4b2c      	ldr	r3, [pc, #176]	; (8006778 <__ieee754_pow+0x218>)
 80066c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d121      	bne.n	8006712 <__ieee754_pow+0x1b2>
 80066ce:	f1b9 0f00 	cmp.w	r9, #0
 80066d2:	da05      	bge.n	80066e0 <__ieee754_pow+0x180>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	2000      	movs	r0, #0
 80066da:	4927      	ldr	r1, [pc, #156]	; (8006778 <__ieee754_pow+0x218>)
 80066dc:	f7fa f8b6 	bl	800084c <__aeabi_ddiv>
 80066e0:	2d00      	cmp	r5, #0
 80066e2:	da9d      	bge.n	8006620 <__ieee754_pow+0xc0>
 80066e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066ec:	ea54 030b 	orrs.w	r3, r4, fp
 80066f0:	d108      	bne.n	8006704 <__ieee754_pow+0x1a4>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4610      	mov	r0, r2
 80066f8:	4619      	mov	r1, r3
 80066fa:	f7f9 fdc5 	bl	8000288 <__aeabi_dsub>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	e7ac      	b.n	800665e <__ieee754_pow+0xfe>
 8006704:	f1bb 0f01 	cmp.w	fp, #1
 8006708:	d18a      	bne.n	8006620 <__ieee754_pow+0xc0>
 800670a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800670e:	4619      	mov	r1, r3
 8006710:	e786      	b.n	8006620 <__ieee754_pow+0xc0>
 8006712:	0fed      	lsrs	r5, r5, #31
 8006714:	1e6b      	subs	r3, r5, #1
 8006716:	930d      	str	r3, [sp, #52]	; 0x34
 8006718:	ea5b 0303 	orrs.w	r3, fp, r3
 800671c:	d102      	bne.n	8006724 <__ieee754_pow+0x1c4>
 800671e:	4632      	mov	r2, r6
 8006720:	463b      	mov	r3, r7
 8006722:	e7e8      	b.n	80066f6 <__ieee754_pow+0x196>
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <__ieee754_pow+0x220>)
 8006726:	4598      	cmp	r8, r3
 8006728:	f340 80fe 	ble.w	8006928 <__ieee754_pow+0x3c8>
 800672c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006730:	4598      	cmp	r8, r3
 8006732:	dd0a      	ble.n	800674a <__ieee754_pow+0x1ea>
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <__ieee754_pow+0x214>)
 8006736:	429c      	cmp	r4, r3
 8006738:	dc0d      	bgt.n	8006756 <__ieee754_pow+0x1f6>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	f6bf af6d 	bge.w	800661c <__ieee754_pow+0xbc>
 8006742:	a307      	add	r3, pc, #28	; (adr r3, 8006760 <__ieee754_pow+0x200>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	e79f      	b.n	800668a <__ieee754_pow+0x12a>
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <__ieee754_pow+0x224>)
 800674c:	429c      	cmp	r4, r3
 800674e:	ddf4      	ble.n	800673a <__ieee754_pow+0x1da>
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <__ieee754_pow+0x218>)
 8006752:	429c      	cmp	r4, r3
 8006754:	dd18      	ble.n	8006788 <__ieee754_pow+0x228>
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	dcf2      	bgt.n	8006742 <__ieee754_pow+0x1e2>
 800675c:	e75e      	b.n	800661c <__ieee754_pow+0xbc>
 800675e:	bf00      	nop
 8006760:	8800759c 	.word	0x8800759c
 8006764:	7e37e43c 	.word	0x7e37e43c
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	080079a9 	.word	0x080079a9
 8006770:	433fffff 	.word	0x433fffff
 8006774:	3fefffff 	.word	0x3fefffff
 8006778:	3ff00000 	.word	0x3ff00000
 800677c:	3fe00000 	.word	0x3fe00000
 8006780:	41e00000 	.word	0x41e00000
 8006784:	3feffffe 	.word	0x3feffffe
 8006788:	2200      	movs	r2, #0
 800678a:	4b63      	ldr	r3, [pc, #396]	; (8006918 <__ieee754_pow+0x3b8>)
 800678c:	f7f9 fd7c 	bl	8000288 <__aeabi_dsub>
 8006790:	a355      	add	r3, pc, #340	; (adr r3, 80068e8 <__ieee754_pow+0x388>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	4604      	mov	r4, r0
 8006798:	460d      	mov	r5, r1
 800679a:	f7f9 ff2d 	bl	80005f8 <__aeabi_dmul>
 800679e:	a354      	add	r3, pc, #336	; (adr r3, 80068f0 <__ieee754_pow+0x390>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	4606      	mov	r6, r0
 80067a6:	460f      	mov	r7, r1
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	2200      	movs	r2, #0
 80067b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b6:	4b59      	ldr	r3, [pc, #356]	; (800691c <__ieee754_pow+0x3bc>)
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7f9 ff1c 	bl	80005f8 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	a14c      	add	r1, pc, #304	; (adr r1, 80068f8 <__ieee754_pow+0x398>)
 80067c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ca:	f7f9 fd5d 	bl	8000288 <__aeabi_dsub>
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	f7f9 ff11 	bl	80005f8 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	2000      	movs	r0, #0
 80067dc:	4950      	ldr	r1, [pc, #320]	; (8006920 <__ieee754_pow+0x3c0>)
 80067de:	f7f9 fd53 	bl	8000288 <__aeabi_dsub>
 80067e2:	4622      	mov	r2, r4
 80067e4:	462b      	mov	r3, r5
 80067e6:	4680      	mov	r8, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 ff03 	bl	80005f8 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fefd 	bl	80005f8 <__aeabi_dmul>
 80067fe:	a340      	add	r3, pc, #256	; (adr r3, 8006900 <__ieee754_pow+0x3a0>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006810:	f7f9 fd3a 	bl	8000288 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4604      	mov	r4, r0
 800681a:	460d      	mov	r5, r1
 800681c:	4630      	mov	r0, r6
 800681e:	4639      	mov	r1, r7
 8006820:	f7f9 fd34 	bl	800028c <__adddf3>
 8006824:	2000      	movs	r0, #0
 8006826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682a:	4632      	mov	r2, r6
 800682c:	463b      	mov	r3, r7
 800682e:	f7f9 fd2b 	bl	8000288 <__aeabi_dsub>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7f9 fd25 	bl	8000288 <__aeabi_dsub>
 800683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006840:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006844:	4313      	orrs	r3, r2
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	f040 81eb 	bne.w	8006c24 <__ieee754_pow+0x6c4>
 800684e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006908 <__ieee754_pow+0x3a8>
 8006852:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006856:	2400      	movs	r4, #0
 8006858:	4622      	mov	r2, r4
 800685a:	462b      	mov	r3, r5
 800685c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006860:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006864:	f7f9 fd10 	bl	8000288 <__aeabi_dsub>
 8006868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686c:	f7f9 fec4 	bl	80005f8 <__aeabi_dmul>
 8006870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006874:	4680      	mov	r8, r0
 8006876:	4689      	mov	r9, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 febc 	bl	80005f8 <__aeabi_dmul>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4640      	mov	r0, r8
 8006886:	4649      	mov	r1, r9
 8006888:	f7f9 fd00 	bl	800028c <__adddf3>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	4680      	mov	r8, r0
 8006892:	4689      	mov	r9, r1
 8006894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006898:	f7f9 feae 	bl	80005f8 <__aeabi_dmul>
 800689c:	460b      	mov	r3, r1
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	4602      	mov	r2, r0
 80068a4:	4649      	mov	r1, r9
 80068a6:	4640      	mov	r0, r8
 80068a8:	e9cd 4500 	strd	r4, r5, [sp]
 80068ac:	f7f9 fcee 	bl	800028c <__adddf3>
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <__ieee754_pow+0x3c4>)
 80068b2:	4299      	cmp	r1, r3
 80068b4:	4606      	mov	r6, r0
 80068b6:	460f      	mov	r7, r1
 80068b8:	468b      	mov	fp, r1
 80068ba:	f340 82f7 	ble.w	8006eac <__ieee754_pow+0x94c>
 80068be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068c6:	4303      	orrs	r3, r0
 80068c8:	f000 81ea 	beq.w	8006ca0 <__ieee754_pow+0x740>
 80068cc:	a310      	add	r3, pc, #64	; (adr r3, 8006910 <__ieee754_pow+0x3b0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	a30d      	add	r3, pc, #52	; (adr r3, 8006910 <__ieee754_pow+0x3b0>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	e6d5      	b.n	800668e <__ieee754_pow+0x12e>
 80068e2:	bf00      	nop
 80068e4:	f3af 8000 	nop.w
 80068e8:	60000000 	.word	0x60000000
 80068ec:	3ff71547 	.word	0x3ff71547
 80068f0:	f85ddf44 	.word	0xf85ddf44
 80068f4:	3e54ae0b 	.word	0x3e54ae0b
 80068f8:	55555555 	.word	0x55555555
 80068fc:	3fd55555 	.word	0x3fd55555
 8006900:	652b82fe 	.word	0x652b82fe
 8006904:	3ff71547 	.word	0x3ff71547
 8006908:	00000000 	.word	0x00000000
 800690c:	bff00000 	.word	0xbff00000
 8006910:	8800759c 	.word	0x8800759c
 8006914:	7e37e43c 	.word	0x7e37e43c
 8006918:	3ff00000 	.word	0x3ff00000
 800691c:	3fd00000 	.word	0x3fd00000
 8006920:	3fe00000 	.word	0x3fe00000
 8006924:	408fffff 	.word	0x408fffff
 8006928:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	da05      	bge.n	800693e <__ieee754_pow+0x3de>
 8006932:	4bd3      	ldr	r3, [pc, #844]	; (8006c80 <__ieee754_pow+0x720>)
 8006934:	f7f9 fe60 	bl	80005f8 <__aeabi_dmul>
 8006938:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800693c:	460c      	mov	r4, r1
 800693e:	1523      	asrs	r3, r4, #20
 8006940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006944:	4413      	add	r3, r2
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	4bce      	ldr	r3, [pc, #824]	; (8006c84 <__ieee754_pow+0x724>)
 800694a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800694e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006952:	429c      	cmp	r4, r3
 8006954:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006958:	dd08      	ble.n	800696c <__ieee754_pow+0x40c>
 800695a:	4bcb      	ldr	r3, [pc, #812]	; (8006c88 <__ieee754_pow+0x728>)
 800695c:	429c      	cmp	r4, r3
 800695e:	f340 815e 	ble.w	8006c1e <__ieee754_pow+0x6be>
 8006962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006964:	3301      	adds	r3, #1
 8006966:	9309      	str	r3, [sp, #36]	; 0x24
 8006968:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800696c:	f04f 0a00 	mov.w	sl, #0
 8006970:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006974:	930c      	str	r3, [sp, #48]	; 0x30
 8006976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006978:	4bc4      	ldr	r3, [pc, #784]	; (8006c8c <__ieee754_pow+0x72c>)
 800697a:	4413      	add	r3, r2
 800697c:	ed93 7b00 	vldr	d7, [r3]
 8006980:	4629      	mov	r1, r5
 8006982:	ec53 2b17 	vmov	r2, r3, d7
 8006986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800698a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800698e:	f7f9 fc7b 	bl	8000288 <__aeabi_dsub>
 8006992:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800699e:	f7f9 fc75 	bl	800028c <__adddf3>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	2000      	movs	r0, #0
 80069a8:	49b9      	ldr	r1, [pc, #740]	; (8006c90 <__ieee754_pow+0x730>)
 80069aa:	f7f9 ff4f 	bl	800084c <__aeabi_ddiv>
 80069ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80069be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80069ca:	2300      	movs	r3, #0
 80069cc:	9302      	str	r3, [sp, #8]
 80069ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069d2:	106d      	asrs	r5, r5, #1
 80069d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069dc:	2200      	movs	r2, #0
 80069de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	4614      	mov	r4, r2
 80069e8:	461d      	mov	r5, r3
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4630      	mov	r0, r6
 80069f4:	4639      	mov	r1, r7
 80069f6:	f7f9 fc47 	bl	8000288 <__aeabi_dsub>
 80069fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069fe:	4606      	mov	r6, r0
 8006a00:	460f      	mov	r7, r1
 8006a02:	4620      	mov	r0, r4
 8006a04:	4629      	mov	r1, r5
 8006a06:	f7f9 fc3f 	bl	8000288 <__aeabi_dsub>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a12:	f7f9 fc39 	bl	8000288 <__aeabi_dsub>
 8006a16:	4642      	mov	r2, r8
 8006a18:	464b      	mov	r3, r9
 8006a1a:	f7f9 fded 	bl	80005f8 <__aeabi_dmul>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4630      	mov	r0, r6
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 fc2f 	bl	8000288 <__aeabi_dsub>
 8006a2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	a37b      	add	r3, pc, #492	; (adr r3, 8006c30 <__ieee754_pow+0x6d0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	a379      	add	r3, pc, #484	; (adr r3, 8006c38 <__ieee754_pow+0x6d8>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f7f9 fc19 	bl	800028c <__adddf3>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	f7f9 fdcb 	bl	80005f8 <__aeabi_dmul>
 8006a62:	a377      	add	r3, pc, #476	; (adr r3, 8006c40 <__ieee754_pow+0x6e0>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 fc10 	bl	800028c <__adddf3>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	a374      	add	r3, pc, #464	; (adr r3, 8006c48 <__ieee754_pow+0x6e8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fc07 	bl	800028c <__adddf3>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	f7f9 fdb9 	bl	80005f8 <__aeabi_dmul>
 8006a86:	a372      	add	r3, pc, #456	; (adr r3, 8006c50 <__ieee754_pow+0x6f0>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fbfe 	bl	800028c <__adddf3>
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f7f9 fdb0 	bl	80005f8 <__aeabi_dmul>
 8006a98:	a36f      	add	r3, pc, #444	; (adr r3, 8006c58 <__ieee754_pow+0x6f8>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fbf5 	bl	800028c <__adddf3>
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	460f      	mov	r7, r1
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 fda3 	bl	80005f8 <__aeabi_dmul>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fd9d 	bl	80005f8 <__aeabi_dmul>
 8006abe:	4642      	mov	r2, r8
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aca:	f7f9 fbdf 	bl	800028c <__adddf3>
 8006ace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ad2:	f7f9 fd91 	bl	80005f8 <__aeabi_dmul>
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	462b      	mov	r3, r5
 8006ada:	f7f9 fbd7 	bl	800028c <__adddf3>
 8006ade:	4642      	mov	r2, r8
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	460f      	mov	r7, r1
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4649      	mov	r1, r9
 8006aea:	f7f9 fd85 	bl	80005f8 <__aeabi_dmul>
 8006aee:	2200      	movs	r2, #0
 8006af0:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <__ieee754_pow+0x734>)
 8006af2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006af6:	f7f9 fbc9 	bl	800028c <__adddf3>
 8006afa:	4632      	mov	r2, r6
 8006afc:	463b      	mov	r3, r7
 8006afe:	f7f9 fbc5 	bl	800028c <__adddf3>
 8006b02:	9802      	ldr	r0, [sp, #8]
 8006b04:	460d      	mov	r5, r1
 8006b06:	4604      	mov	r4, r0
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	2200      	movs	r2, #0
 8006b16:	4680      	mov	r8, r0
 8006b18:	4689      	mov	r9, r1
 8006b1a:	4b5e      	ldr	r3, [pc, #376]	; (8006c94 <__ieee754_pow+0x734>)
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fbb2 	bl	8000288 <__aeabi_dsub>
 8006b24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b28:	f7f9 fbae 	bl	8000288 <__aeabi_dsub>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fba8 	bl	8000288 <__aeabi_dsub>
 8006b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	4622      	mov	r2, r4
 8006b42:	4606      	mov	r6, r0
 8006b44:	460f      	mov	r7, r1
 8006b46:	462b      	mov	r3, r5
 8006b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fb98 	bl	800028c <__adddf3>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 fb90 	bl	800028c <__adddf3>
 8006b6c:	9802      	ldr	r0, [sp, #8]
 8006b6e:	a33c      	add	r3, pc, #240	; (adr r3, 8006c60 <__ieee754_pow+0x700>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	4604      	mov	r4, r0
 8006b76:	460d      	mov	r5, r1
 8006b78:	f7f9 fd3e 	bl	80005f8 <__aeabi_dmul>
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b82:	464b      	mov	r3, r9
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 fb7e 	bl	8000288 <__aeabi_dsub>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 fb78 	bl	8000288 <__aeabi_dsub>
 8006b98:	a333      	add	r3, pc, #204	; (adr r3, 8006c68 <__ieee754_pow+0x708>)
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f7f9 fd2b 	bl	80005f8 <__aeabi_dmul>
 8006ba2:	a333      	add	r3, pc, #204	; (adr r3, 8006c70 <__ieee754_pow+0x710>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fb66 	bl	800028c <__adddf3>
 8006bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bc2:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <__ieee754_pow+0x738>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 fb5f 	bl	800028c <__adddf3>
 8006bce:	4604      	mov	r4, r0
 8006bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd2:	460d      	mov	r5, r1
 8006bd4:	f7f9 fca6 	bl	8000524 <__aeabi_i2d>
 8006bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bda:	4b30      	ldr	r3, [pc, #192]	; (8006c9c <__ieee754_pow+0x73c>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006be2:	4606      	mov	r6, r0
 8006be4:	460f      	mov	r7, r1
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bee:	f7f9 fb4d 	bl	800028c <__adddf3>
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	f7f9 fb49 	bl	800028c <__adddf3>
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	f7f9 fb45 	bl	800028c <__adddf3>
 8006c02:	9802      	ldr	r0, [sp, #8]
 8006c04:	4632      	mov	r2, r6
 8006c06:	463b      	mov	r3, r7
 8006c08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c0c:	f7f9 fb3c 	bl	8000288 <__aeabi_dsub>
 8006c10:	4642      	mov	r2, r8
 8006c12:	464b      	mov	r3, r9
 8006c14:	f7f9 fb38 	bl	8000288 <__aeabi_dsub>
 8006c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c1c:	e607      	b.n	800682e <__ieee754_pow+0x2ce>
 8006c1e:	f04f 0a01 	mov.w	sl, #1
 8006c22:	e6a5      	b.n	8006970 <__ieee754_pow+0x410>
 8006c24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006c78 <__ieee754_pow+0x718>
 8006c28:	e613      	b.n	8006852 <__ieee754_pow+0x2f2>
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w
 8006c30:	4a454eef 	.word	0x4a454eef
 8006c34:	3fca7e28 	.word	0x3fca7e28
 8006c38:	93c9db65 	.word	0x93c9db65
 8006c3c:	3fcd864a 	.word	0x3fcd864a
 8006c40:	a91d4101 	.word	0xa91d4101
 8006c44:	3fd17460 	.word	0x3fd17460
 8006c48:	518f264d 	.word	0x518f264d
 8006c4c:	3fd55555 	.word	0x3fd55555
 8006c50:	db6fabff 	.word	0xdb6fabff
 8006c54:	3fdb6db6 	.word	0x3fdb6db6
 8006c58:	33333303 	.word	0x33333303
 8006c5c:	3fe33333 	.word	0x3fe33333
 8006c60:	e0000000 	.word	0xe0000000
 8006c64:	3feec709 	.word	0x3feec709
 8006c68:	dc3a03fd 	.word	0xdc3a03fd
 8006c6c:	3feec709 	.word	0x3feec709
 8006c70:	145b01f5 	.word	0x145b01f5
 8006c74:	be3e2fe0 	.word	0xbe3e2fe0
 8006c78:	00000000 	.word	0x00000000
 8006c7c:	3ff00000 	.word	0x3ff00000
 8006c80:	43400000 	.word	0x43400000
 8006c84:	0003988e 	.word	0x0003988e
 8006c88:	000bb679 	.word	0x000bb679
 8006c8c:	080079c0 	.word	0x080079c0
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	40080000 	.word	0x40080000
 8006c98:	080079e0 	.word	0x080079e0
 8006c9c:	080079d0 	.word	0x080079d0
 8006ca0:	a3b4      	add	r3, pc, #720	; (adr r3, 8006f74 <__ieee754_pow+0xa14>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 faef 	bl	800028c <__adddf3>
 8006cae:	4622      	mov	r2, r4
 8006cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f7f9 fae5 	bl	8000288 <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cc6:	f7f9 ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f47f adfe 	bne.w	80068cc <__ieee754_pow+0x36c>
 8006cd0:	4aa3      	ldr	r2, [pc, #652]	; (8006f60 <__ieee754_pow+0xa00>)
 8006cd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f340 810a 	ble.w	8006ef0 <__ieee754_pow+0x990>
 8006cdc:	151b      	asrs	r3, r3, #20
 8006cde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ce2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006ce6:	fa4a f303 	asr.w	r3, sl, r3
 8006cea:	445b      	add	r3, fp
 8006cec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006cf0:	4e9c      	ldr	r6, [pc, #624]	; (8006f64 <__ieee754_pow+0xa04>)
 8006cf2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006cf6:	4116      	asrs	r6, r2
 8006cf8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	ea23 0106 	bic.w	r1, r3, r6
 8006d02:	f1c2 0214 	rsb	r2, r2, #20
 8006d06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d0a:	fa4a fa02 	asr.w	sl, sl, r2
 8006d0e:	f1bb 0f00 	cmp.w	fp, #0
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	bfb8      	it	lt
 8006d1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d20:	f7f9 fab2 	bl	8000288 <__aeabi_dsub>
 8006d24:	e9cd 0100 	strd	r0, r1, [sp]
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d30:	f7f9 faac 	bl	800028c <__adddf3>
 8006d34:	2000      	movs	r0, #0
 8006d36:	a378      	add	r3, pc, #480	; (adr r3, 8006f18 <__ieee754_pow+0x9b8>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	460d      	mov	r5, r1
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d48:	4606      	mov	r6, r0
 8006d4a:	460f      	mov	r7, r1
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fa9a 	bl	8000288 <__aeabi_dsub>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fa94 	bl	8000288 <__aeabi_dsub>
 8006d60:	a36f      	add	r3, pc, #444	; (adr r3, 8006f20 <__ieee754_pow+0x9c0>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fc47 	bl	80005f8 <__aeabi_dmul>
 8006d6a:	a36f      	add	r3, pc, #444	; (adr r3, 8006f28 <__ieee754_pow+0x9c8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	4680      	mov	r8, r0
 8006d72:	4689      	mov	r9, r1
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4640      	mov	r0, r8
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fa82 	bl	800028c <__adddf3>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 fa7a 	bl	800028c <__adddf3>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	4689      	mov	r9, r1
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4620      	mov	r0, r4
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7f9 fa6c 	bl	8000288 <__aeabi_dsub>
 8006db0:	4642      	mov	r2, r8
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	464b      	mov	r3, r9
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 fc1c 	bl	80005f8 <__aeabi_dmul>
 8006dc0:	a35b      	add	r3, pc, #364	; (adr r3, 8006f30 <__ieee754_pow+0x9d0>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	460d      	mov	r5, r1
 8006dca:	f7f9 fc15 	bl	80005f8 <__aeabi_dmul>
 8006dce:	a35a      	add	r3, pc, #360	; (adr r3, 8006f38 <__ieee754_pow+0x9d8>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 fa58 	bl	8000288 <__aeabi_dsub>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	a357      	add	r3, pc, #348	; (adr r3, 8006f40 <__ieee754_pow+0x9e0>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fa51 	bl	800028c <__adddf3>
 8006dea:	4622      	mov	r2, r4
 8006dec:	462b      	mov	r3, r5
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	a355      	add	r3, pc, #340	; (adr r3, 8006f48 <__ieee754_pow+0x9e8>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 fa46 	bl	8000288 <__aeabi_dsub>
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	462b      	mov	r3, r5
 8006e00:	f7f9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8006e04:	a352      	add	r3, pc, #328	; (adr r3, 8006f50 <__ieee754_pow+0x9f0>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 fa3f 	bl	800028c <__adddf3>
 8006e0e:	4622      	mov	r2, r4
 8006e10:	462b      	mov	r3, r5
 8006e12:	f7f9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 fa33 	bl	8000288 <__aeabi_dsub>
 8006e22:	4604      	mov	r4, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	2200      	movs	r2, #0
 8006e34:	e9cd 0100 	strd	r0, r1, [sp]
 8006e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fa22 	bl	8000288 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e4c:	f7f9 fcfe 	bl	800084c <__aeabi_ddiv>
 8006e50:	4632      	mov	r2, r6
 8006e52:	4604      	mov	r4, r0
 8006e54:	460d      	mov	r5, r1
 8006e56:	463b      	mov	r3, r7
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	f7f9 fa12 	bl	800028c <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 fa0a 	bl	8000288 <__aeabi_dsub>
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	f7f9 fa06 	bl	8000288 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	2000      	movs	r0, #0
 8006e82:	4939      	ldr	r1, [pc, #228]	; (8006f68 <__ieee754_pow+0xa08>)
 8006e84:	f7f9 fa00 	bl	8000288 <__aeabi_dsub>
 8006e88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006e8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	da2f      	bge.n	8006ef6 <__ieee754_pow+0x996>
 8006e96:	4650      	mov	r0, sl
 8006e98:	ec43 2b10 	vmov	d0, r2, r3
 8006e9c:	f000 fb60 	bl	8007560 <scalbn>
 8006ea0:	ec51 0b10 	vmov	r0, r1, d0
 8006ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea8:	f7ff bbf1 	b.w	800668e <__ieee754_pow+0x12e>
 8006eac:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <__ieee754_pow+0xa0c>)
 8006eae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006eb2:	429e      	cmp	r6, r3
 8006eb4:	f77f af0c 	ble.w	8006cd0 <__ieee754_pow+0x770>
 8006eb8:	4b2d      	ldr	r3, [pc, #180]	; (8006f70 <__ieee754_pow+0xa10>)
 8006eba:	440b      	add	r3, r1
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	d00b      	beq.n	8006ed8 <__ieee754_pow+0x978>
 8006ec0:	a325      	add	r3, pc, #148	; (adr r3, 8006f58 <__ieee754_pow+0x9f8>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eca:	f7f9 fb95 	bl	80005f8 <__aeabi_dmul>
 8006ece:	a322      	add	r3, pc, #136	; (adr r3, 8006f58 <__ieee754_pow+0x9f8>)
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f7ff bbdb 	b.w	800668e <__ieee754_pow+0x12e>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	f7f9 f9d4 	bl	8000288 <__aeabi_dsub>
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	f7f9 fe0e 	bl	8000b04 <__aeabi_dcmpge>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	f43f aef1 	beq.w	8006cd0 <__ieee754_pow+0x770>
 8006eee:	e7e7      	b.n	8006ec0 <__ieee754_pow+0x960>
 8006ef0:	f04f 0a00 	mov.w	sl, #0
 8006ef4:	e718      	b.n	8006d28 <__ieee754_pow+0x7c8>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	e7d4      	b.n	8006ea4 <__ieee754_pow+0x944>
 8006efa:	2000      	movs	r0, #0
 8006efc:	491a      	ldr	r1, [pc, #104]	; (8006f68 <__ieee754_pow+0xa08>)
 8006efe:	f7ff bb8f 	b.w	8006620 <__ieee754_pow+0xc0>
 8006f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f06:	f7ff bb8b 	b.w	8006620 <__ieee754_pow+0xc0>
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7ff bb87 	b.w	8006620 <__ieee754_pow+0xc0>
 8006f12:	4693      	mov	fp, r2
 8006f14:	f7ff bb98 	b.w	8006648 <__ieee754_pow+0xe8>
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	3fe62e43 	.word	0x3fe62e43
 8006f20:	fefa39ef 	.word	0xfefa39ef
 8006f24:	3fe62e42 	.word	0x3fe62e42
 8006f28:	0ca86c39 	.word	0x0ca86c39
 8006f2c:	be205c61 	.word	0xbe205c61
 8006f30:	72bea4d0 	.word	0x72bea4d0
 8006f34:	3e663769 	.word	0x3e663769
 8006f38:	c5d26bf1 	.word	0xc5d26bf1
 8006f3c:	3ebbbd41 	.word	0x3ebbbd41
 8006f40:	af25de2c 	.word	0xaf25de2c
 8006f44:	3f11566a 	.word	0x3f11566a
 8006f48:	16bebd93 	.word	0x16bebd93
 8006f4c:	3f66c16c 	.word	0x3f66c16c
 8006f50:	5555553e 	.word	0x5555553e
 8006f54:	3fc55555 	.word	0x3fc55555
 8006f58:	c2f8f359 	.word	0xc2f8f359
 8006f5c:	01a56e1f 	.word	0x01a56e1f
 8006f60:	3fe00000 	.word	0x3fe00000
 8006f64:	000fffff 	.word	0x000fffff
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	4090cbff 	.word	0x4090cbff
 8006f70:	3f6f3400 	.word	0x3f6f3400
 8006f74:	652b82fe 	.word	0x652b82fe
 8006f78:	3c971547 	.word	0x3c971547

08006f7c <__ieee754_sqrt>:
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	4955      	ldr	r1, [pc, #340]	; (80070d8 <__ieee754_sqrt+0x15c>)
 8006f82:	ec55 4b10 	vmov	r4, r5, d0
 8006f86:	43a9      	bics	r1, r5
 8006f88:	462b      	mov	r3, r5
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	d112      	bne.n	8006fb4 <__ieee754_sqrt+0x38>
 8006f8e:	ee10 2a10 	vmov	r2, s0
 8006f92:	ee10 0a10 	vmov	r0, s0
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f7f9 f972 	bl	800028c <__adddf3>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	ec45 4b10 	vmov	d0, r4, r5
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	ee10 0a10 	vmov	r0, s0
 8006fba:	4621      	mov	r1, r4
 8006fbc:	dc0f      	bgt.n	8006fde <__ieee754_sqrt+0x62>
 8006fbe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fc2:	4330      	orrs	r0, r6
 8006fc4:	d0f2      	beq.n	8006fac <__ieee754_sqrt+0x30>
 8006fc6:	b155      	cbz	r5, 8006fde <__ieee754_sqrt+0x62>
 8006fc8:	ee10 2a10 	vmov	r2, s0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 f95a 	bl	8000288 <__aeabi_dsub>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	f7f9 fc38 	bl	800084c <__aeabi_ddiv>
 8006fdc:	e7e4      	b.n	8006fa8 <__ieee754_sqrt+0x2c>
 8006fde:	151b      	asrs	r3, r3, #20
 8006fe0:	d073      	beq.n	80070ca <__ieee754_sqrt+0x14e>
 8006fe2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fe6:	07dd      	lsls	r5, r3, #31
 8006fe8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006fec:	bf48      	it	mi
 8006fee:	0fc8      	lsrmi	r0, r1, #31
 8006ff0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ff4:	bf44      	itt	mi
 8006ff6:	0049      	lslmi	r1, r1, #1
 8006ff8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006ffc:	2500      	movs	r5, #0
 8006ffe:	1058      	asrs	r0, r3, #1
 8007000:	0fcb      	lsrs	r3, r1, #31
 8007002:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007006:	0049      	lsls	r1, r1, #1
 8007008:	2316      	movs	r3, #22
 800700a:	462c      	mov	r4, r5
 800700c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007010:	19a7      	adds	r7, r4, r6
 8007012:	4297      	cmp	r7, r2
 8007014:	bfde      	ittt	le
 8007016:	19bc      	addle	r4, r7, r6
 8007018:	1bd2      	suble	r2, r2, r7
 800701a:	19ad      	addle	r5, r5, r6
 800701c:	0fcf      	lsrs	r7, r1, #31
 800701e:	3b01      	subs	r3, #1
 8007020:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007024:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007028:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800702c:	d1f0      	bne.n	8007010 <__ieee754_sqrt+0x94>
 800702e:	f04f 0c20 	mov.w	ip, #32
 8007032:	469e      	mov	lr, r3
 8007034:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007038:	42a2      	cmp	r2, r4
 800703a:	eb06 070e 	add.w	r7, r6, lr
 800703e:	dc02      	bgt.n	8007046 <__ieee754_sqrt+0xca>
 8007040:	d112      	bne.n	8007068 <__ieee754_sqrt+0xec>
 8007042:	428f      	cmp	r7, r1
 8007044:	d810      	bhi.n	8007068 <__ieee754_sqrt+0xec>
 8007046:	2f00      	cmp	r7, #0
 8007048:	eb07 0e06 	add.w	lr, r7, r6
 800704c:	da42      	bge.n	80070d4 <__ieee754_sqrt+0x158>
 800704e:	f1be 0f00 	cmp.w	lr, #0
 8007052:	db3f      	blt.n	80070d4 <__ieee754_sqrt+0x158>
 8007054:	f104 0801 	add.w	r8, r4, #1
 8007058:	1b12      	subs	r2, r2, r4
 800705a:	428f      	cmp	r7, r1
 800705c:	bf88      	it	hi
 800705e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007062:	1bc9      	subs	r1, r1, r7
 8007064:	4433      	add	r3, r6
 8007066:	4644      	mov	r4, r8
 8007068:	0052      	lsls	r2, r2, #1
 800706a:	f1bc 0c01 	subs.w	ip, ip, #1
 800706e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007072:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007076:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800707a:	d1dd      	bne.n	8007038 <__ieee754_sqrt+0xbc>
 800707c:	430a      	orrs	r2, r1
 800707e:	d006      	beq.n	800708e <__ieee754_sqrt+0x112>
 8007080:	1c5c      	adds	r4, r3, #1
 8007082:	bf13      	iteet	ne
 8007084:	3301      	addne	r3, #1
 8007086:	3501      	addeq	r5, #1
 8007088:	4663      	moveq	r3, ip
 800708a:	f023 0301 	bicne.w	r3, r3, #1
 800708e:	106a      	asrs	r2, r5, #1
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	07e9      	lsls	r1, r5, #31
 8007094:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007098:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800709c:	bf48      	it	mi
 800709e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80070a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80070a6:	461c      	mov	r4, r3
 80070a8:	e780      	b.n	8006fac <__ieee754_sqrt+0x30>
 80070aa:	0aca      	lsrs	r2, r1, #11
 80070ac:	3815      	subs	r0, #21
 80070ae:	0549      	lsls	r1, r1, #21
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	d0fa      	beq.n	80070aa <__ieee754_sqrt+0x12e>
 80070b4:	02d6      	lsls	r6, r2, #11
 80070b6:	d50a      	bpl.n	80070ce <__ieee754_sqrt+0x152>
 80070b8:	f1c3 0420 	rsb	r4, r3, #32
 80070bc:	fa21 f404 	lsr.w	r4, r1, r4
 80070c0:	1e5d      	subs	r5, r3, #1
 80070c2:	4099      	lsls	r1, r3
 80070c4:	4322      	orrs	r2, r4
 80070c6:	1b43      	subs	r3, r0, r5
 80070c8:	e78b      	b.n	8006fe2 <__ieee754_sqrt+0x66>
 80070ca:	4618      	mov	r0, r3
 80070cc:	e7f0      	b.n	80070b0 <__ieee754_sqrt+0x134>
 80070ce:	0052      	lsls	r2, r2, #1
 80070d0:	3301      	adds	r3, #1
 80070d2:	e7ef      	b.n	80070b4 <__ieee754_sqrt+0x138>
 80070d4:	46a0      	mov	r8, r4
 80070d6:	e7bf      	b.n	8007058 <__ieee754_sqrt+0xdc>
 80070d8:	7ff00000 	.word	0x7ff00000
 80070dc:	00000000 	.word	0x00000000

080070e0 <atan>:
 80070e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ec55 4b10 	vmov	r4, r5, d0
 80070e8:	4bc3      	ldr	r3, [pc, #780]	; (80073f8 <atan+0x318>)
 80070ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070ee:	429e      	cmp	r6, r3
 80070f0:	46ab      	mov	fp, r5
 80070f2:	dd18      	ble.n	8007126 <atan+0x46>
 80070f4:	4bc1      	ldr	r3, [pc, #772]	; (80073fc <atan+0x31c>)
 80070f6:	429e      	cmp	r6, r3
 80070f8:	dc01      	bgt.n	80070fe <atan+0x1e>
 80070fa:	d109      	bne.n	8007110 <atan+0x30>
 80070fc:	b144      	cbz	r4, 8007110 <atan+0x30>
 80070fe:	4622      	mov	r2, r4
 8007100:	462b      	mov	r3, r5
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 f8c1 	bl	800028c <__adddf3>
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	e006      	b.n	800711e <atan+0x3e>
 8007110:	f1bb 0f00 	cmp.w	fp, #0
 8007114:	f340 8131 	ble.w	800737a <atan+0x29a>
 8007118:	a59b      	add	r5, pc, #620	; (adr r5, 8007388 <atan+0x2a8>)
 800711a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800711e:	ec45 4b10 	vmov	d0, r4, r5
 8007122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007126:	4bb6      	ldr	r3, [pc, #728]	; (8007400 <atan+0x320>)
 8007128:	429e      	cmp	r6, r3
 800712a:	dc14      	bgt.n	8007156 <atan+0x76>
 800712c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007130:	429e      	cmp	r6, r3
 8007132:	dc0d      	bgt.n	8007150 <atan+0x70>
 8007134:	a396      	add	r3, pc, #600	; (adr r3, 8007390 <atan+0x2b0>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	ee10 0a10 	vmov	r0, s0
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 f8a4 	bl	800028c <__adddf3>
 8007144:	2200      	movs	r2, #0
 8007146:	4baf      	ldr	r3, [pc, #700]	; (8007404 <atan+0x324>)
 8007148:	f7f9 fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800714c:	2800      	cmp	r0, #0
 800714e:	d1e6      	bne.n	800711e <atan+0x3e>
 8007150:	f04f 3aff 	mov.w	sl, #4294967295
 8007154:	e02b      	b.n	80071ae <atan+0xce>
 8007156:	f000 f963 	bl	8007420 <fabs>
 800715a:	4bab      	ldr	r3, [pc, #684]	; (8007408 <atan+0x328>)
 800715c:	429e      	cmp	r6, r3
 800715e:	ec55 4b10 	vmov	r4, r5, d0
 8007162:	f300 80bf 	bgt.w	80072e4 <atan+0x204>
 8007166:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800716a:	429e      	cmp	r6, r3
 800716c:	f300 80a0 	bgt.w	80072b0 <atan+0x1d0>
 8007170:	ee10 2a10 	vmov	r2, s0
 8007174:	ee10 0a10 	vmov	r0, s0
 8007178:	462b      	mov	r3, r5
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 f886 	bl	800028c <__adddf3>
 8007180:	2200      	movs	r2, #0
 8007182:	4ba0      	ldr	r3, [pc, #640]	; (8007404 <atan+0x324>)
 8007184:	f7f9 f880 	bl	8000288 <__aeabi_dsub>
 8007188:	2200      	movs	r2, #0
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 f879 	bl	800028c <__adddf3>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 fb53 	bl	800084c <__aeabi_ddiv>
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	4604      	mov	r4, r0
 80071ac:	460d      	mov	r5, r1
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4680      	mov	r8, r0
 80071c0:	4689      	mov	r9, r1
 80071c2:	f7f9 fa19 	bl	80005f8 <__aeabi_dmul>
 80071c6:	a374      	add	r3, pc, #464	; (adr r3, 8007398 <atan+0x2b8>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	f7f9 fa12 	bl	80005f8 <__aeabi_dmul>
 80071d4:	a372      	add	r3, pc, #456	; (adr r3, 80073a0 <atan+0x2c0>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f857 	bl	800028c <__adddf3>
 80071de:	4632      	mov	r2, r6
 80071e0:	463b      	mov	r3, r7
 80071e2:	f7f9 fa09 	bl	80005f8 <__aeabi_dmul>
 80071e6:	a370      	add	r3, pc, #448	; (adr r3, 80073a8 <atan+0x2c8>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f84e 	bl	800028c <__adddf3>
 80071f0:	4632      	mov	r2, r6
 80071f2:	463b      	mov	r3, r7
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	a36d      	add	r3, pc, #436	; (adr r3, 80073b0 <atan+0x2d0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	f7f9 f845 	bl	800028c <__adddf3>
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	f7f9 f9f7 	bl	80005f8 <__aeabi_dmul>
 800720a:	a36b      	add	r3, pc, #428	; (adr r3, 80073b8 <atan+0x2d8>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f7f9 f83c 	bl	800028c <__adddf3>
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	f7f9 f9ee 	bl	80005f8 <__aeabi_dmul>
 800721c:	a368      	add	r3, pc, #416	; (adr r3, 80073c0 <atan+0x2e0>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f9 f833 	bl	800028c <__adddf3>
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	f7f9 f9e5 	bl	80005f8 <__aeabi_dmul>
 800722e:	a366      	add	r3, pc, #408	; (adr r3, 80073c8 <atan+0x2e8>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	4680      	mov	r8, r0
 8007236:	4689      	mov	r9, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 f9dc 	bl	80005f8 <__aeabi_dmul>
 8007240:	a363      	add	r3, pc, #396	; (adr r3, 80073d0 <atan+0x2f0>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f9 f81f 	bl	8000288 <__aeabi_dsub>
 800724a:	4632      	mov	r2, r6
 800724c:	463b      	mov	r3, r7
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	a361      	add	r3, pc, #388	; (adr r3, 80073d8 <atan+0x2f8>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f816 	bl	8000288 <__aeabi_dsub>
 800725c:	4632      	mov	r2, r6
 800725e:	463b      	mov	r3, r7
 8007260:	f7f9 f9ca 	bl	80005f8 <__aeabi_dmul>
 8007264:	a35e      	add	r3, pc, #376	; (adr r3, 80073e0 <atan+0x300>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f80d 	bl	8000288 <__aeabi_dsub>
 800726e:	4632      	mov	r2, r6
 8007270:	463b      	mov	r3, r7
 8007272:	f7f9 f9c1 	bl	80005f8 <__aeabi_dmul>
 8007276:	a35c      	add	r3, pc, #368	; (adr r3, 80073e8 <atan+0x308>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f9 f804 	bl	8000288 <__aeabi_dsub>
 8007280:	4632      	mov	r2, r6
 8007282:	463b      	mov	r3, r7
 8007284:	f7f9 f9b8 	bl	80005f8 <__aeabi_dmul>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4640      	mov	r0, r8
 800728e:	4649      	mov	r1, r9
 8007290:	f7f8 fffc 	bl	800028c <__adddf3>
 8007294:	4622      	mov	r2, r4
 8007296:	462b      	mov	r3, r5
 8007298:	f7f9 f9ae 	bl	80005f8 <__aeabi_dmul>
 800729c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	d14b      	bne.n	800733e <atan+0x25e>
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7f8 ffed 	bl	8000288 <__aeabi_dsub>
 80072ae:	e72c      	b.n	800710a <atan+0x2a>
 80072b0:	ee10 0a10 	vmov	r0, s0
 80072b4:	2200      	movs	r2, #0
 80072b6:	4b53      	ldr	r3, [pc, #332]	; (8007404 <atan+0x324>)
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f8 ffe5 	bl	8000288 <__aeabi_dsub>
 80072be:	2200      	movs	r2, #0
 80072c0:	4606      	mov	r6, r0
 80072c2:	460f      	mov	r7, r1
 80072c4:	4b4f      	ldr	r3, [pc, #316]	; (8007404 <atan+0x324>)
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f8 ffdf 	bl	800028c <__adddf3>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4630      	mov	r0, r6
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f9 fab9 	bl	800084c <__aeabi_ddiv>
 80072da:	f04f 0a01 	mov.w	sl, #1
 80072de:	4604      	mov	r4, r0
 80072e0:	460d      	mov	r5, r1
 80072e2:	e764      	b.n	80071ae <atan+0xce>
 80072e4:	4b49      	ldr	r3, [pc, #292]	; (800740c <atan+0x32c>)
 80072e6:	429e      	cmp	r6, r3
 80072e8:	dc1d      	bgt.n	8007326 <atan+0x246>
 80072ea:	ee10 0a10 	vmov	r0, s0
 80072ee:	2200      	movs	r2, #0
 80072f0:	4b47      	ldr	r3, [pc, #284]	; (8007410 <atan+0x330>)
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	2200      	movs	r2, #0
 80072fa:	4606      	mov	r6, r0
 80072fc:	460f      	mov	r7, r1
 80072fe:	4b44      	ldr	r3, [pc, #272]	; (8007410 <atan+0x330>)
 8007300:	4620      	mov	r0, r4
 8007302:	4629      	mov	r1, r5
 8007304:	f7f9 f978 	bl	80005f8 <__aeabi_dmul>
 8007308:	2200      	movs	r2, #0
 800730a:	4b3e      	ldr	r3, [pc, #248]	; (8007404 <atan+0x324>)
 800730c:	f7f8 ffbe 	bl	800028c <__adddf3>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4630      	mov	r0, r6
 8007316:	4639      	mov	r1, r7
 8007318:	f7f9 fa98 	bl	800084c <__aeabi_ddiv>
 800731c:	f04f 0a02 	mov.w	sl, #2
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	e743      	b.n	80071ae <atan+0xce>
 8007326:	462b      	mov	r3, r5
 8007328:	ee10 2a10 	vmov	r2, s0
 800732c:	2000      	movs	r0, #0
 800732e:	4939      	ldr	r1, [pc, #228]	; (8007414 <atan+0x334>)
 8007330:	f7f9 fa8c 	bl	800084c <__aeabi_ddiv>
 8007334:	f04f 0a03 	mov.w	sl, #3
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	e737      	b.n	80071ae <atan+0xce>
 800733e:	4b36      	ldr	r3, [pc, #216]	; (8007418 <atan+0x338>)
 8007340:	4e36      	ldr	r6, [pc, #216]	; (800741c <atan+0x33c>)
 8007342:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007346:	4456      	add	r6, sl
 8007348:	449a      	add	sl, r3
 800734a:	e9da 2300 	ldrd	r2, r3, [sl]
 800734e:	f7f8 ff9b 	bl	8000288 <__aeabi_dsub>
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	f7f8 ff97 	bl	8000288 <__aeabi_dsub>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007362:	f7f8 ff91 	bl	8000288 <__aeabi_dsub>
 8007366:	f1bb 0f00 	cmp.w	fp, #0
 800736a:	4604      	mov	r4, r0
 800736c:	460d      	mov	r5, r1
 800736e:	f6bf aed6 	bge.w	800711e <atan+0x3e>
 8007372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007376:	461d      	mov	r5, r3
 8007378:	e6d1      	b.n	800711e <atan+0x3e>
 800737a:	a51d      	add	r5, pc, #116	; (adr r5, 80073f0 <atan+0x310>)
 800737c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007380:	e6cd      	b.n	800711e <atan+0x3e>
 8007382:	bf00      	nop
 8007384:	f3af 8000 	nop.w
 8007388:	54442d18 	.word	0x54442d18
 800738c:	3ff921fb 	.word	0x3ff921fb
 8007390:	8800759c 	.word	0x8800759c
 8007394:	7e37e43c 	.word	0x7e37e43c
 8007398:	e322da11 	.word	0xe322da11
 800739c:	3f90ad3a 	.word	0x3f90ad3a
 80073a0:	24760deb 	.word	0x24760deb
 80073a4:	3fa97b4b 	.word	0x3fa97b4b
 80073a8:	a0d03d51 	.word	0xa0d03d51
 80073ac:	3fb10d66 	.word	0x3fb10d66
 80073b0:	c54c206e 	.word	0xc54c206e
 80073b4:	3fb745cd 	.word	0x3fb745cd
 80073b8:	920083ff 	.word	0x920083ff
 80073bc:	3fc24924 	.word	0x3fc24924
 80073c0:	5555550d 	.word	0x5555550d
 80073c4:	3fd55555 	.word	0x3fd55555
 80073c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80073cc:	bfa2b444 	.word	0xbfa2b444
 80073d0:	52defd9a 	.word	0x52defd9a
 80073d4:	3fadde2d 	.word	0x3fadde2d
 80073d8:	af749a6d 	.word	0xaf749a6d
 80073dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80073e0:	fe231671 	.word	0xfe231671
 80073e4:	3fbc71c6 	.word	0x3fbc71c6
 80073e8:	9998ebc4 	.word	0x9998ebc4
 80073ec:	3fc99999 	.word	0x3fc99999
 80073f0:	54442d18 	.word	0x54442d18
 80073f4:	bff921fb 	.word	0xbff921fb
 80073f8:	440fffff 	.word	0x440fffff
 80073fc:	7ff00000 	.word	0x7ff00000
 8007400:	3fdbffff 	.word	0x3fdbffff
 8007404:	3ff00000 	.word	0x3ff00000
 8007408:	3ff2ffff 	.word	0x3ff2ffff
 800740c:	40037fff 	.word	0x40037fff
 8007410:	3ff80000 	.word	0x3ff80000
 8007414:	bff00000 	.word	0xbff00000
 8007418:	08007a10 	.word	0x08007a10
 800741c:	080079f0 	.word	0x080079f0

08007420 <fabs>:
 8007420:	ec51 0b10 	vmov	r0, r1, d0
 8007424:	ee10 2a10 	vmov	r2, s0
 8007428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800742c:	ec43 2b10 	vmov	d0, r2, r3
 8007430:	4770      	bx	lr

08007432 <finite>:
 8007432:	ee10 3a90 	vmov	r3, s1
 8007436:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800743a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800743e:	0fc0      	lsrs	r0, r0, #31
 8007440:	4770      	bx	lr

08007442 <matherr>:
 8007442:	2000      	movs	r0, #0
 8007444:	4770      	bx	lr
	...

08007448 <nan>:
 8007448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007450 <nan+0x8>
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	00000000 	.word	0x00000000
 8007454:	7ff80000 	.word	0x7ff80000

08007458 <rint>:
 8007458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800745a:	ec51 0b10 	vmov	r0, r1, d0
 800745e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007462:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007466:	2e13      	cmp	r6, #19
 8007468:	460b      	mov	r3, r1
 800746a:	ee10 4a10 	vmov	r4, s0
 800746e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007472:	dc56      	bgt.n	8007522 <rint+0xca>
 8007474:	2e00      	cmp	r6, #0
 8007476:	da2b      	bge.n	80074d0 <rint+0x78>
 8007478:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800747c:	4302      	orrs	r2, r0
 800747e:	d023      	beq.n	80074c8 <rint+0x70>
 8007480:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007484:	4302      	orrs	r2, r0
 8007486:	4254      	negs	r4, r2
 8007488:	4314      	orrs	r4, r2
 800748a:	0c4b      	lsrs	r3, r1, #17
 800748c:	0b24      	lsrs	r4, r4, #12
 800748e:	045b      	lsls	r3, r3, #17
 8007490:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007494:	ea44 0103 	orr.w	r1, r4, r3
 8007498:	460b      	mov	r3, r1
 800749a:	492f      	ldr	r1, [pc, #188]	; (8007558 <rint+0x100>)
 800749c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80074a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80074a4:	4602      	mov	r2, r0
 80074a6:	4639      	mov	r1, r7
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7f8 feef 	bl	800028c <__adddf3>
 80074ae:	e9cd 0100 	strd	r0, r1, [sp]
 80074b2:	463b      	mov	r3, r7
 80074b4:	4632      	mov	r2, r6
 80074b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ba:	f7f8 fee5 	bl	8000288 <__aeabi_dsub>
 80074be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80074c6:	4639      	mov	r1, r7
 80074c8:	ec41 0b10 	vmov	d0, r0, r1
 80074cc:	b003      	add	sp, #12
 80074ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d0:	4a22      	ldr	r2, [pc, #136]	; (800755c <rint+0x104>)
 80074d2:	4132      	asrs	r2, r6
 80074d4:	ea01 0702 	and.w	r7, r1, r2
 80074d8:	4307      	orrs	r7, r0
 80074da:	d0f5      	beq.n	80074c8 <rint+0x70>
 80074dc:	0852      	lsrs	r2, r2, #1
 80074de:	4011      	ands	r1, r2
 80074e0:	430c      	orrs	r4, r1
 80074e2:	d00b      	beq.n	80074fc <rint+0xa4>
 80074e4:	ea23 0202 	bic.w	r2, r3, r2
 80074e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80074ec:	2e13      	cmp	r6, #19
 80074ee:	fa43 f306 	asr.w	r3, r3, r6
 80074f2:	bf0c      	ite	eq
 80074f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80074f8:	2400      	movne	r4, #0
 80074fa:	4313      	orrs	r3, r2
 80074fc:	4916      	ldr	r1, [pc, #88]	; (8007558 <rint+0x100>)
 80074fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007502:	4622      	mov	r2, r4
 8007504:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 febe 	bl	800028c <__adddf3>
 8007510:	e9cd 0100 	strd	r0, r1, [sp]
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800751c:	f7f8 feb4 	bl	8000288 <__aeabi_dsub>
 8007520:	e7d2      	b.n	80074c8 <rint+0x70>
 8007522:	2e33      	cmp	r6, #51	; 0x33
 8007524:	dd07      	ble.n	8007536 <rint+0xde>
 8007526:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800752a:	d1cd      	bne.n	80074c8 <rint+0x70>
 800752c:	ee10 2a10 	vmov	r2, s0
 8007530:	f7f8 feac 	bl	800028c <__adddf3>
 8007534:	e7c8      	b.n	80074c8 <rint+0x70>
 8007536:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800753a:	f04f 32ff 	mov.w	r2, #4294967295
 800753e:	40f2      	lsrs	r2, r6
 8007540:	4210      	tst	r0, r2
 8007542:	d0c1      	beq.n	80074c8 <rint+0x70>
 8007544:	0852      	lsrs	r2, r2, #1
 8007546:	4210      	tst	r0, r2
 8007548:	bf1f      	itttt	ne
 800754a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800754e:	ea20 0202 	bicne.w	r2, r0, r2
 8007552:	4134      	asrne	r4, r6
 8007554:	4314      	orrne	r4, r2
 8007556:	e7d1      	b.n	80074fc <rint+0xa4>
 8007558:	08007a30 	.word	0x08007a30
 800755c:	000fffff 	.word	0x000fffff

08007560 <scalbn>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	ec55 4b10 	vmov	r4, r5, d0
 8007566:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800756a:	4606      	mov	r6, r0
 800756c:	462b      	mov	r3, r5
 800756e:	b9aa      	cbnz	r2, 800759c <scalbn+0x3c>
 8007570:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007574:	4323      	orrs	r3, r4
 8007576:	d03b      	beq.n	80075f0 <scalbn+0x90>
 8007578:	4b31      	ldr	r3, [pc, #196]	; (8007640 <scalbn+0xe0>)
 800757a:	4629      	mov	r1, r5
 800757c:	2200      	movs	r2, #0
 800757e:	ee10 0a10 	vmov	r0, s0
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <scalbn+0xe4>)
 8007588:	429e      	cmp	r6, r3
 800758a:	4604      	mov	r4, r0
 800758c:	460d      	mov	r5, r1
 800758e:	da12      	bge.n	80075b6 <scalbn+0x56>
 8007590:	a327      	add	r3, pc, #156	; (adr r3, 8007630 <scalbn+0xd0>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f9 f82f 	bl	80005f8 <__aeabi_dmul>
 800759a:	e009      	b.n	80075b0 <scalbn+0x50>
 800759c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80075a0:	428a      	cmp	r2, r1
 80075a2:	d10c      	bne.n	80075be <scalbn+0x5e>
 80075a4:	ee10 2a10 	vmov	r2, s0
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f8 fe6e 	bl	800028c <__adddf3>
 80075b0:	4604      	mov	r4, r0
 80075b2:	460d      	mov	r5, r1
 80075b4:	e01c      	b.n	80075f0 <scalbn+0x90>
 80075b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075ba:	460b      	mov	r3, r1
 80075bc:	3a36      	subs	r2, #54	; 0x36
 80075be:	4432      	add	r2, r6
 80075c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075c4:	428a      	cmp	r2, r1
 80075c6:	dd0b      	ble.n	80075e0 <scalbn+0x80>
 80075c8:	ec45 4b11 	vmov	d1, r4, r5
 80075cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007638 <scalbn+0xd8>
 80075d0:	f000 f83c 	bl	800764c <copysign>
 80075d4:	a318      	add	r3, pc, #96	; (adr r3, 8007638 <scalbn+0xd8>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	ec51 0b10 	vmov	r0, r1, d0
 80075de:	e7da      	b.n	8007596 <scalbn+0x36>
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	dd08      	ble.n	80075f6 <scalbn+0x96>
 80075e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80075f0:	ec45 4b10 	vmov	d0, r4, r5
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80075fa:	da0d      	bge.n	8007618 <scalbn+0xb8>
 80075fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007600:	429e      	cmp	r6, r3
 8007602:	ec45 4b11 	vmov	d1, r4, r5
 8007606:	dce1      	bgt.n	80075cc <scalbn+0x6c>
 8007608:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007630 <scalbn+0xd0>
 800760c:	f000 f81e 	bl	800764c <copysign>
 8007610:	a307      	add	r3, pc, #28	; (adr r3, 8007630 <scalbn+0xd0>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	e7e0      	b.n	80075da <scalbn+0x7a>
 8007618:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800761c:	3236      	adds	r2, #54	; 0x36
 800761e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007622:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	2200      	movs	r2, #0
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <scalbn+0xe8>)
 800762e:	e7b2      	b.n	8007596 <scalbn+0x36>
 8007630:	c2f8f359 	.word	0xc2f8f359
 8007634:	01a56e1f 	.word	0x01a56e1f
 8007638:	8800759c 	.word	0x8800759c
 800763c:	7e37e43c 	.word	0x7e37e43c
 8007640:	43500000 	.word	0x43500000
 8007644:	ffff3cb0 	.word	0xffff3cb0
 8007648:	3c900000 	.word	0x3c900000

0800764c <copysign>:
 800764c:	ec51 0b10 	vmov	r0, r1, d0
 8007650:	ee11 0a90 	vmov	r0, s3
 8007654:	ee10 2a10 	vmov	r2, s0
 8007658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800765c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007660:	ea41 0300 	orr.w	r3, r1, r0
 8007664:	ec43 2b10 	vmov	d0, r2, r3
 8007668:	4770      	bx	lr
	...

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
