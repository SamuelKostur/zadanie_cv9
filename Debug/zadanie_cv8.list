
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08006ad8  08006ad8  00016ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e18  08006e18  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08006e18  08006e18  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e18  08006e18  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08006e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000238  08007058  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08007058  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c814  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022d7  00000000  00000000  0002ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002ed58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f0a1  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000899d  00000000  00000000  0004eee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7b5f  00000000  00000000  0005787e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e78  00000000  00000000  000ff458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006abc 	.word	0x08006abc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	08006abc 	.word	0x08006abc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	619a      	str	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DISPLAY_displayCurStr>:
void updateCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updateShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resetAllDigits();
 8000bde:	f000 f8bf 	bl	8000d60 <resetAllDigits>

	updateAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - '0'] );
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <DISPLAY_displayCurStr+0x7c>)
 8000bea:	5c9b      	ldrb	r3, [r3, r2]
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	f002 ff53 	bl	8003a98 <__locale_ctype_ptr>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d102      	bne.n	8000c0a <DISPLAY_displayCurStr+0x32>
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	3b20      	subs	r3, #32
 8000c08:	e000      	b.n	8000c0c <DISPLAY_displayCurStr+0x34>
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3b30      	subs	r3, #48	; 0x30
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <DISPLAY_displayCurStr+0x80>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f822 	bl	8000c5c <updateAlphanumChar>
	updateDecimalPoint(curActDig);
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f849 	bl	8000cb4 <updateDecimalPoint>
	setDigit(curActDig);
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f862 	bl	8000cf0 <setDigit>
	curActDig++;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c36:	701a      	strb	r2, [r3, #0]
	curActDig %= 4;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <DISPLAY_displayCurStr+0x78>)
 8000c44:	701a      	strb	r2, [r3, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000255 	.word	0x20000255
 8000c54:	20000274 	.word	0x20000274
 8000c58:	08006ad8 	.word	0x08006ad8

08000c5c <updateAlphanumChar>:

void updateAlphanumChar(uint8_t segmentValues){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	resetAllSegments();
 8000c66:	f000 f85b 	bl	8000d20 <resetAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e015      	b.n	8000c9c <updateAlphanumChar+0x40>
		if(segmentValues & (0x01<<i)) LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00a      	beq.n	8000c96 <updateAlphanumChar+0x3a>
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <updateAlphanumChar+0x50>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <updateAlphanumChar+0x54>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f7ff ff93 	bl	8000bbc <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	dde6      	ble.n	8000c70 <updateAlphanumChar+0x14>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	08006b24 	.word	0x08006b24

08000cb4 <updateDecimalPoint>:

void updateDecimalPoint(uint8_t curActDig){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	if(decSepPos == (curPos + curActDig)){
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <updateDecimalPoint+0x30>)
 8000cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <updateDecimalPoint+0x34>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	440b      	add	r3, r1
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d103      	bne.n	8000cdc <updateDecimalPoint+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_DP_Port, (uint32_t)seg_DP_Pin);
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <updateDecimalPoint+0x38>)
 8000cd8:	f7ff ff70 	bl	8000bbc <LL_GPIO_ResetOutputPin>
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000001 	.word	0x20000001
 8000ce8:	20000254 	.word	0x20000254
 8000cec:	48000400 	.word	0x48000400

08000cf0 <setDigit>:
//Turns required digit ON
void setDigit(uint8_t pos){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)dig_Ports[pos], (uint32_t)dig_Pins[pos]);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <setDigit+0x28>)
 8000cfe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <setDigit+0x2c>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff ff48 	bl	8000ba0 <LL_GPIO_SetOutputPin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000024 	.word	0x20000024
 8000d1c:	08006b44 	.word	0x08006b44

08000d20 <resetAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resetAllSegments(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_SEG; i++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e00d      	b.n	8000d48 <resetAllSegments+0x28>
		LL_GPIO_SetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <resetAllSegments+0x38>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <resetAllSegments+0x3c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f7ff ff2f 	bl	8000ba0 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<NUM_SEG; i++){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	ddee      	ble.n	8000d2c <resetAllSegments+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	08006b24 	.word	0x08006b24

08000d60 <resetAllDigits>:

/* Reset (turn-off) all digits*/
void resetAllDigits(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_DIG; i++){
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	e00d      	b.n	8000d88 <resetAllDigits+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)dig_Ports[i], (uint32_t)dig_Pins[i]);
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <resetAllDigits+0x38>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <resetAllDigits+0x3c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f7ff ff1d 	bl	8000bbc <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<NUM_DIG; i++){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	ddee      	ble.n	8000d6c <resetAllDigits+0xc>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	08006b44 	.word	0x08006b44

08000da0 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	static uint8_t shiftDir = LEFT_TO_RIGHT;

	updateCurPos(&curPos, shiftDir);
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <DISPLAY_shiftCurStr+0x2c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <DISPLAY_shiftCurStr+0x30>)
 8000dac:	f000 f812 	bl	8000dd4 <updateCurPos>
	updateShiftDir(curPos, &shiftDir);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <DISPLAY_shiftCurStr+0x30>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4905      	ldr	r1, [pc, #20]	; (8000dcc <DISPLAY_shiftCurStr+0x2c>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f828 	bl	8000e0c <updateShiftDir>
	setCurStr(curPos);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <DISPLAY_shiftCurStr+0x30>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f841 	bl	8000e48 <setCurStr>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000034 	.word	0x20000034
 8000dd0:	20000254 	.word	0x20000254

08000dd4 <updateCurPos>:

void updateCurPos(uint8_t *prevPos, uint8_t shiftDir){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d106      	bne.n	8000df4 <updateCurPos+0x20>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	e005      	b.n	8000e00 <updateCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	701a      	strb	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <updateShiftDir>:

void updateShiftDir(uint8_t curPos, uint8_t *shiftDir){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <updateShiftDir+0x38>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	429a      	cmp	r2, r3
 8000e22:	db02      	blt.n	8000e2a <updateShiftDir+0x1e>
		*shiftDir =  RIGHT_TO_LEFT;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <updateShiftDir+0x2a>
		*shiftDir = LEFT_TO_RIGHT;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
	}
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000000 	.word	0x20000000

08000e48 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e00a      	b.n	8000e6e <setCurStr+0x26>
		curStr[i] = complStr[curPos + i];
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <setCurStr+0x38>)
 8000e62:	5c89      	ldrb	r1, [r1, r2]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <setCurStr+0x3c>)
 8000e66:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d9f1      	bls.n	8000e58 <setCurStr+0x10>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000278 	.word	0x20000278
 8000e84:	20000274 	.word	0x20000274

08000e88 <DISPLAY_resetCurPos>:

	complStrLen = decSepPos == 5 ? size : (size - 1);  //(size-1) because '.' was extracted
	complStr[complStrLen] = '\0';
}

void DISPLAY_resetCurPos(){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	curPos = 0;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <DISPLAY_resetCurPos+0x14>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000254 	.word	0x20000254

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fbe:	695a      	ldr	r2, [r3, #20]
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <LL_SYSCFG_SetEXTISource+0x58>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	43db      	mvns	r3, r3
 8001000:	ea02 0103 	and.w	r1, r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fa93 f3a3 	rbit	r3, r3
 8001010:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	fa03 f202 	lsl.w	r2, r3, r2
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <LL_SYSCFG_SetEXTISource+0x58>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	430a      	orrs	r2, r1
 800102a:	3302      	adds	r3, #2
 800102c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40010000 	.word	0x40010000

08001040 <LL_GPIO_SetPinMode>:
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	613b      	str	r3, [r7, #16]
  return result;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	61bb      	str	r3, [r7, #24]
  return result;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_GPIO_SetPinPull>:
{
 800109e:	b480      	push	{r7}
 80010a0:	b089      	sub	sp, #36	; 0x24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	613b      	str	r3, [r7, #16]
  return result;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2103      	movs	r1, #3
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	61bb      	str	r3, [r7, #24]
  return result;
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	431a      	orrs	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	60da      	str	r2, [r3, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3724      	adds	r7, #36	; 0x24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_GPIO_ResetOutputPin>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800113a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800113e:	f7ff ff39 	bl	8000fb4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001142:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001146:	f7ff ff35 	bl	8000fb4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 800114a:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f7ff ffd3 	bl	80010fc <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 8001156:	2132      	movs	r1, #50	; 0x32
 8001158:	4826      	ldr	r0, [pc, #152]	; (80011f4 <MX_GPIO_Init+0xdc>)
 800115a:	f7ff ffcf 	bl	80010fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 800115e:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001162:	607b      	str	r3, [r7, #4]
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001164:	2301      	movs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  //LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8001174:	2332      	movs	r3, #50	; 0x32
 8001176:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001178:	2301      	movs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  //LL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8001188:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff29 	bl	8000fe4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_PULL_UP);
 8001192:	2201      	movs	r2, #1
 8001194:	2101      	movs	r1, #1
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_GPIO_Init+0xdc>)
 8001198:	f7ff ff81 	bl	800109e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_MODE_INPUT);
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_GPIO_Init+0xdc>)
 80011a2:	f7ff ff4d 	bl	8001040 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fcbd 	bl	8002b44 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ca:	f7ff fe69 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff feb9 	bl	8000f4c <NVIC_EncodePriority>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	2006      	movs	r0, #6
 80011e0:	f7ff fe8a 	bl	8000ef8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80011e4:	2006      	movs	r0, #6
 80011e6:	f7ff fe69 	bl	8000ebc <__NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000400 	.word	0x48000400

080011f8 <hts221_read_byte>:
#include "hts221.h"

uint8_t hts221_addres = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, hts221_addres, 0));
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <hts221_read_byte+0x30>)
 8001208:	7819      	ldrb	r1, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	f107 000f 	add.w	r0, r7, #15
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	460b      	mov	r3, r1
 8001216:	2101      	movs	r1, #1
 8001218:	f000 fb10 	bl	800183c <i2c_master_read>
 800121c:	4603      	mov	r3, r0
 800121e:	781b      	ldrb	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000035 	.word	0x20000035

0800122c <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, hts221_addres, 0);
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <hts221_write_byte+0x28>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	79f9      	ldrb	r1, [r7, #7]
 8001242:	79b8      	ldrb	r0, [r7, #6]
 8001244:	2300      	movs	r3, #0
 8001246:	f000 fab5 	bl	80017b4 <i2c_master_write>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000035 	.word	0x20000035

08001258 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
 8001264:	4613      	mov	r3, r2
 8001266:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, hts221_addres, 1);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <hts221_readArray+0x2c>)
 800126a:	7818      	ldrb	r0, [r3, #0]
 800126c:	78fa      	ldrb	r2, [r7, #3]
 800126e:	78b9      	ldrb	r1, [r7, #2]
 8001270:	2301      	movs	r3, #1
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	4603      	mov	r3, r0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fae0 	bl	800183c <i2c_master_read>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000035 	.word	0x20000035

08001288 <hts221_get_temp>:


float hts221_get_temp()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint8_t temp[2];
	hts221_readArray(temp, HTS221_ADDRESS_TEMP_L, 2);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2202      	movs	r2, #2
 8001292:	212a      	movs	r1, #42	; 0x2a
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ffdf 	bl	8001258 <hts221_readArray>

	return (float)((temp[1] << 8) | temp[0]) / 8.0f;
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	793a      	ldrb	r2, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80012ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <hts221_get_humidity>:

float hts221_get_humidity()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint8_t hum[2];
	hts221_readArray(hum, HTS221_ADDRESS_TEMP_L, 2);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2202      	movs	r2, #2
 80012ca:	212a      	movs	r1, #42	; 0x2a
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ffc3 	bl	8001258 <hts221_readArray>

	return (float)((hum[1] << 8) | hum[0]) / 2.0f;
 80012d2:	797b      	ldrb	r3, [r7, #5]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	793a      	ldrb	r2, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ea:	eef0 7a66 	vmov.f32	s15, s13
}
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <hts221_init>:



uint8_t hts221_init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f002 fb6a 	bl	80039dc <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001308:	200f      	movs	r0, #15
 800130a:	f7ff ff75 	bl	80011f8 <hts221_read_byte>
 800130e:	4603      	mov	r3, r0
 8001310:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE){
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2bbc      	cmp	r3, #188	; 0xbc
 8001316:	d10a      	bne.n	800132e <hts221_init+0x36>
		status = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
		status = 0;
		return status;
	}

	//hts221 device init
	uint8_t ctrl1 = 0b10000011;
 800131c:	2383      	movs	r3, #131	; 0x83
 800131e:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	4619      	mov	r1, r3
 8001324:	2020      	movs	r0, #32
 8001326:	f7ff ff81 	bl	800122c <hts221_write_byte>

	return status;
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	e002      	b.n	8001334 <hts221_init+0x3c>
		status = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
		return status;
 8001332:	79fb      	ldrb	r3, [r7, #7]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <__NVIC_GetPriorityGrouping>:
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014c2:	f023 0306 	bic.w	r3, r3, #6
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	60da      	str	r2, [r3, #12]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f043 0204 	orr.w	r2, r3, #4
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0204 	bic.w	r2, r3, #4
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d101      	bne.n	8001556 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b04      	cmp	r3, #4
 8001576:	d101      	bne.n	800157c <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	2b20      	cmp	r3, #32
 800159c:	d101      	bne.n	80015a2 <LL_I2C_IsActiveFlag_STOP+0x18>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f043 0220 	orr.w	r2, r3, #32
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	61da      	str	r2, [r3, #28]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	605a      	str	r2, [r3, #4]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	0d5b      	lsrs	r3, r3, #21
 8001606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <LL_I2C_HandleTransfer+0x48>)
 800160c:	430b      	orrs	r3, r1
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4319      	orrs	r1, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	4319      	orrs	r1, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4319      	orrs	r1, r3
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	430b      	orrs	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	03ff7bff 	.word	0x03ff7bff

0800163c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_AHB1_GRP1_EnableClock>:
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000

080016d4 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001702:	f7ff ffb7 	bl	8001674 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800170a:	2302      	movs	r3, #2
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001712:	2301      	movs	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800171a:	2304      	movs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4821      	ldr	r0, [pc, #132]	; (80017a8 <MX_I2C1_Init+0xd4>)
 8001724:	f001 fbfb 	bl	8002f1e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001728:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800172c:	f7ff ffba 	bl	80016a4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001730:	f7ff fe04 	bl	800133c <__NVIC_GetPriorityGrouping>
 8001734:	4603      	mov	r3, r0
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fe54 	bl	80013e8 <NVIC_EncodePriority>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	201f      	movs	r0, #31
 8001746:	f7ff fe25 	bl	8001394 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800174a:	201f      	movs	r0, #31
 800174c:	f7ff fe04 	bl	8001358 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <MX_I2C1_Init+0xd8>)
 8001752:	f7ff ff3d 	bl	80015d0 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001756:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_I2C1_Init+0xd8>)
 8001758:	f7ff fec1 	bl	80014de <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_I2C1_Init+0xd8>)
 800175e:	f7ff fe96 	bl	800148e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_I2C1_Init+0xd8>)
 8001764:	f7ff fe83 	bl	800146e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <MX_I2C1_Init+0xdc>)
 800176e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <MX_I2C1_Init+0xd8>)
 800178c:	f001 fcda 	bl	8003144 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_I2C1_Init+0xd8>)
 8001796:	f7ff fe8a 	bl	80014ae <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_I2C1_Init+0xd8>)
 800179c:	f7ff fe57 	bl	800144e <LL_I2C_Enable>
}
 80017a0:	bf00      	nop
 80017a2:	3738      	adds	r7, #56	; 0x38
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	48000400 	.word	0x48000400
 80017ac:	40005400 	.word	0x40005400
 80017b0:	2000090e 	.word	0x2000090e

080017b4 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4604      	mov	r4, r0
 80017bc:	4608      	mov	r0, r1
 80017be:	4611      	mov	r1, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	4603      	mov	r3, r0
 80017c8:	71bb      	strb	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	717b      	strb	r3, [r7, #5]
 80017ce:	4613      	mov	r3, r2
 80017d0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80017d2:	793b      	ldrb	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017de:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80017e0:	7979      	ldrb	r1, [r7, #5]
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <i2c_master_write+0x80>)
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2302      	movs	r3, #2
 80017ee:	2200      	movs	r2, #0
 80017f0:	4811      	ldr	r0, [pc, #68]	; (8001838 <i2c_master_write+0x84>)
 80017f2:	f7ff fefd 	bl	80015f0 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	4619      	mov	r1, r3
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <i2c_master_write+0x84>)
 80017fc:	f7ff ff2b 	bl	8001656 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001800:	e00a      	b.n	8001818 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <i2c_master_write+0x84>)
 8001804:	f7ff fe9b 	bl	800153e <LL_I2C_IsActiveFlag_TXIS>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4619      	mov	r1, r3
 8001812:	4809      	ldr	r0, [pc, #36]	; (8001838 <i2c_master_write+0x84>)
 8001814:	f7ff ff1f 	bl	8001656 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <i2c_master_write+0x84>)
 800181a:	f7ff feb6 	bl	800158a <LL_I2C_IsActiveFlag_STOP>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ee      	beq.n	8001802 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <i2c_master_write+0x84>)
 8001826:	f7ff fec3 	bl	80015b0 <LL_I2C_ClearFlag_STOP>
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	80002000 	.word	0x80002000
 8001838:	40005400 	.word	0x40005400

0800183c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af02      	add	r7, sp, #8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4603      	mov	r3, r0
 800184c:	70fb      	strb	r3, [r7, #3]
 800184e:	460b      	mov	r3, r1
 8001850:	70bb      	strb	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001856:	4a31      	ldr	r2, [pc, #196]	; (800191c <i2c_master_read+0xe0>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800185c:	7c3b      	ldrb	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001868:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <i2c_master_read+0xe4>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <i2c_master_read+0xe8>)
 8001872:	f7ff fe44 	bl	80014fe <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001876:	7879      	ldrb	r1, [r7, #1]
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <i2c_master_read+0xec>)
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	2200      	movs	r2, #0
 8001886:	4827      	ldr	r0, [pc, #156]	; (8001924 <i2c_master_read+0xe8>)
 8001888:	f7ff feb2 	bl	80015f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800188c:	e00a      	b.n	80018a4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800188e:	4825      	ldr	r0, [pc, #148]	; (8001924 <i2c_master_read+0xe8>)
 8001890:	f7ff fe55 	bl	800153e <LL_I2C_IsActiveFlag_TXIS>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800189a:	78bb      	ldrb	r3, [r7, #2]
 800189c:	4619      	mov	r1, r3
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <i2c_master_read+0xe8>)
 80018a0:	f7ff fed9 	bl	8001656 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80018a4:	481f      	ldr	r0, [pc, #124]	; (8001924 <i2c_master_read+0xe8>)
 80018a6:	f7ff fe70 	bl	800158a <LL_I2C_IsActiveFlag_STOP>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0ee      	beq.n	800188e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <i2c_master_read+0xe8>)
 80018b2:	f7ff fe7d 	bl	80015b0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80018b6:	bf00      	nop
 80018b8:	481a      	ldr	r0, [pc, #104]	; (8001924 <i2c_master_read+0xe8>)
 80018ba:	f7ff fe66 	bl	800158a <LL_I2C_IsActiveFlag_STOP>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f9      	bne.n	80018b8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80018c4:	7879      	ldrb	r1, [r7, #1]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <i2c_master_read+0xf0>)
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4613      	mov	r3, r2
 80018d4:	2200      	movs	r2, #0
 80018d6:	4813      	ldr	r0, [pc, #76]	; (8001924 <i2c_master_read+0xe8>)
 80018d8:	f7ff fe8a 	bl	80015f0 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80018dc:	bf00      	nop
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <i2c_master_read+0xe8>)
 80018e0:	f7ff fe53 	bl	800158a <LL_I2C_IsActiveFlag_STOP>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f9      	beq.n	80018de <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <i2c_master_read+0xe8>)
 80018ec:	f7ff fe60 	bl	80015b0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <i2c_master_read+0xe8>)
 80018f2:	f7ff fe14 	bl	800151e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <i2c_master_read+0xe8>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <i2c_master_read+0xe8>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <i2c_master_read+0xf4>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <i2c_master_read+0xe4>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <i2c_master_read+0xe0>)
 8001910:	681b      	ldr	r3, [r3, #0]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000288 	.word	0x20000288
 8001920:	20000256 	.word	0x20000256
 8001924:	40005400 	.word	0x40005400
 8001928:	80002000 	.word	0x80002000
 800192c:	80002400 	.word	0x80002400
 8001930:	20000257 	.word	0x20000257

08001934 <I2C_eventCallback>:

void I2C_eventCallback(void)
{
 8001934:	b598      	push	{r3, r4, r7, lr}
 8001936:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <I2C_eventCallback+0x50>)
 800193a:	f7ff fe13 	bl	8001564 <LL_I2C_IsActiveFlag_RXNE>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <I2C_eventCallback+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <I2C_eventCallback+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <I2C_eventCallback+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	b2c8      	uxtb	r0, r1
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <I2C_eventCallback+0x58>)
 8001954:	7008      	strb	r0, [r1, #0]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <I2C_eventCallback+0x50>)
 800195a:	f7ff fe6f 	bl	800163c <LL_I2C_ReceiveData8>
 800195e:	4603      	mov	r3, r0
 8001960:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <I2C_eventCallback+0x58>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b13      	cmp	r3, #19
 800196a:	d903      	bls.n	8001974 <I2C_eventCallback+0x40>
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <I2C_eventCallback+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e001      	b.n	8001978 <I2C_eventCallback+0x44>
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <I2C_eventCallback+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <I2C_eventCallback+0x5c>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
	}
}
 800197e:	bf00      	nop
 8001980:	bd98      	pop	{r3, r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	40005400 	.word	0x40005400
 8001988:	20000288 	.word	0x20000288
 800198c:	20000257 	.word	0x20000257
 8001990:	20000256 	.word	0x20000256

08001994 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af02      	add	r7, sp, #8
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <lis3mdl_read_byte+0x30>)
 80019a4:	7819      	ldrb	r1, [r3, #0]
 80019a6:	79fa      	ldrb	r2, [r7, #7]
 80019a8:	f107 000f 	add.w	r0, r7, #15
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	460b      	mov	r3, r1
 80019b2:	2101      	movs	r1, #1
 80019b4:	f7ff ff42 	bl	800183c <i2c_master_read>
 80019b8:	4603      	mov	r3, r0
 80019ba:	781b      	ldrb	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000036 	.word	0x20000036

080019c8 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <lis3mdl_write_byte+0x28>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	79f9      	ldrb	r1, [r7, #7]
 80019de:	79b8      	ldrb	r0, [r7, #6]
 80019e0:	2300      	movs	r3, #0
 80019e2:	f7ff fee7 	bl	80017b4 <i2c_master_write>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000036 	.word	0x20000036

080019f4 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
 8001a00:	4613      	mov	r3, r2
 8001a02:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <lis3mdl_readArray+0x2c>)
 8001a06:	7818      	ldrb	r0, [r3, #0]
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	78b9      	ldrb	r1, [r7, #2]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4603      	mov	r3, r0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff12 	bl	800183c <i2c_master_read>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000036 	.word	0x20000036

08001a24 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 8001a30:	2022      	movs	r0, #34	; 0x22
 8001a32:	f7ff ffaf 	bl	8001994 <lis3mdl_read_byte>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 8001a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8001a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2206      	movs	r2, #6
 8001a58:	2128      	movs	r1, #40	; 0x28
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ffca 	bl	80019f4 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001a60:	7d7b      	ldrb	r3, [r7, #21]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21a      	sxth	r2, r3
 8001a66:	7d3b      	ldrb	r3, [r7, #20]
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7dbb      	ldrb	r3, [r7, #22]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001a7c:	7e7b      	ldrb	r3, [r7, #25]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	7e3b      	ldrb	r3, [r7, #24]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <lis3mdl_get_mag+0xc0>)
 8001a8c:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 8001a8e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 8001aa8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ab4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 8001ac2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ace:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	45d5d000 	.word	0x45d5d000

08001ae8 <lis3mdl_init>:


uint8_t lis3mdl_init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	f001 ff72 	bl	80039dc <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001af8:	200f      	movs	r0, #15
 8001afa:	f7ff ff4b 	bl	8001994 <lis3mdl_read_byte>
 8001afe:	4603      	mov	r3, r0
 8001b00:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2b3d      	cmp	r3, #61	; 0x3d
 8001b06:	d102      	bne.n	8001b0e <lis3mdl_init+0x26>
	{
		status = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	e011      	b.n	8001b32 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <lis3mdl_init+0x8c>)
 8001b10:	223c      	movs	r2, #60	; 0x3c
 8001b12:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f7ff ff3d 	bl	8001994 <lis3mdl_read_byte>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b3d      	cmp	r3, #61	; 0x3d
 8001b22:	d102      	bne.n	8001b2a <lis3mdl_init+0x42>
		{
			status = 1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	e003      	b.n	8001b32 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	71fb      	strb	r3, [r7, #7]
			return status;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	e01c      	b.n	8001b6c <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8001b32:	23fc      	movs	r3, #252	; 0xfc
 8001b34:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8001b36:	797b      	ldrb	r3, [r7, #5]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2020      	movs	r0, #32
 8001b3c:	f7ff ff44 	bl	80019c8 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8001b40:	2300      	movs	r3, #0
 8001b42:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8001b44:	793b      	ldrb	r3, [r7, #4]
 8001b46:	4619      	mov	r1, r3
 8001b48:	2021      	movs	r0, #33	; 0x21
 8001b4a:	f7ff ff3d 	bl	80019c8 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	4619      	mov	r1, r3
 8001b56:	2022      	movs	r0, #34	; 0x22
 8001b58:	f7ff ff36 	bl	80019c8 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	4619      	mov	r1, r3
 8001b64:	2023      	movs	r0, #35	; 0x23
 8001b66:	f7ff ff2f 	bl	80019c8 <lis3mdl_write_byte>

	return status;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000036 	.word	0x20000036

08001b78 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t lps25hb_addres = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, lps25hb_addres, 0));
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <lps25hb_read_byte+0x30>)
 8001b88:	7819      	ldrb	r1, [r3, #0]
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	f107 000f 	add.w	r0, r7, #15
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	460b      	mov	r3, r1
 8001b96:	2101      	movs	r1, #1
 8001b98:	f7ff fe50 	bl	800183c <i2c_master_read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000037 	.word	0x20000037

08001bac <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, lps25hb_addres, 0);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <lps25hb_write_byte+0x28>)
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	79f9      	ldrb	r1, [r7, #7]
 8001bc2:	79b8      	ldrb	r0, [r7, #6]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f7ff fdf5 	bl	80017b4 <i2c_master_write>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000037 	.word	0x20000037

08001bd8 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	4613      	mov	r3, r2
 8001be6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, lps25hb_addres, 1);
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <lps25hb_readArray+0x2c>)
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	78b9      	ldrb	r1, [r7, #2]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe20 	bl	800183c <i2c_master_read>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000037 	.word	0x20000037

08001c08 <lps25hb_get_press>:


float lps25hb_get_press()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	uint8_t temp[3];
	lps25hb_readArray(temp, LPS25HB_ADDRESS_PRESS_XL, 3);
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2203      	movs	r2, #3
 8001c12:	2128      	movs	r1, #40	; 0x28
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffdf 	bl	8001bd8 <lps25hb_readArray>

	return ((uint32_t)((temp[2] << 16) | (uint16_t)((temp[1] << 8) | temp[0]))) / 4096.0f;
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	797a      	ldrb	r2, [r7, #5]
 8001c20:	0212      	lsls	r2, r2, #8
 8001c22:	b211      	sxth	r1, r2
 8001c24:	793a      	ldrb	r2, [r7, #4]
 8001c26:	b212      	sxth	r2, r2
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	b212      	sxth	r2, r2
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c50 <lps25hb_get_press+0x48>
 8001c3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c40:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	45800000 	.word	0x45800000

08001c54 <lps25hb_init>:




uint8_t lps25hb_init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001c5e:	2064      	movs	r0, #100	; 0x64
 8001c60:	f001 febc 	bl	80039dc <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001c64:	200f      	movs	r0, #15
 8001c66:	f7ff ff87 	bl	8001b78 <lps25hb_read_byte>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE){
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	2bbd      	cmp	r3, #189	; 0xbd
 8001c72:	d102      	bne.n	8001c7a <lps25hb_init+0x26>
			status = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	e011      	b.n	8001c9e <lps25hb_init+0x4a>
		}
		else{			//if the device is not found on one address, try another one
			lps25hb_addres = LPS25HB_DEVICE_ADDRESS_1;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <lps25hb_init+0x64>)
 8001c7c:	22ba      	movs	r2, #186	; 0xba
 8001c7e:	701a      	strb	r2, [r3, #0]
			val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8001c80:	200f      	movs	r0, #15
 8001c82:	f7ff ff79 	bl	8001b78 <lps25hb_read_byte>
 8001c86:	4603      	mov	r3, r0
 8001c88:	71bb      	strb	r3, [r7, #6]
			if(val == LPS25HB_WHO_AM_I_VALUE)
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	2bbd      	cmp	r3, #189	; 0xbd
 8001c8e:	d102      	bne.n	8001c96 <lps25hb_init+0x42>
			{
				status = 1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	e003      	b.n	8001c9e <lps25hb_init+0x4a>
			}
			else
			{
				status = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
				return status;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	e007      	b.n	8001cae <lps25hb_init+0x5a>
			}
		}

	//lps25hb device init
	uint8_t ctrl1 = 0b11000000;
 8001c9e:	23c0      	movs	r3, #192	; 0xc0
 8001ca0:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8001ca2:	797b      	ldrb	r3, [r7, #5]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f7ff ff80 	bl	8001bac <lps25hb_write_byte>

	return status;
 8001cac:	79fb      	ldrb	r3, [r7, #7]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000037 	.word	0x20000037

08001cbc <__NVIC_SetPriorityGrouping>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <LL_RCC_HSI_Enable+0x1c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <LL_RCC_HSI_Enable+0x1c>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <LL_RCC_HSI_IsReady+0x20>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4904      	ldr	r1, [pc, #16]	; (8001d70 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000

08001d74 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <LL_RCC_SetSysClkSource+0x24>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 0203 	bic.w	r2, r3, #3
 8001d84:	4904      	ldr	r1, [pc, #16]	; (8001d98 <LL_RCC_SetSysClkSource+0x24>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000

08001d9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <LL_RCC_GetSysClkSource+0x18>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <LL_RCC_SetAHBPrescaler+0x24>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000

08001de0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df0:	4904      	ldr	r1, [pc, #16]	; (8001e04 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000

08001e08 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e18:	4904      	ldr	r1, [pc, #16]	; (8001e2c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000

08001e30 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <LL_RCC_SetI2CClockSource+0x2c>)
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0e1b      	lsrs	r3, r3, #24
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e4a:	4904      	ldr	r1, [pc, #16]	; (8001e5c <LL_RCC_SetI2CClockSource+0x2c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000

08001e60 <LL_APB1_GRP1_EnableClock>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000

08001e90 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <LL_FLASH_SetLatency+0x24>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 0207 	bic.w	r2, r3, #7
 8001ed0:	4904      	ldr	r1, [pc, #16]	; (8001ee4 <LL_FLASH_SetLatency+0x24>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <LL_FLASH_GetLatency+0x18>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff ffc1 	bl	8001e90 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f0e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f12:	f7ff ffa5 	bl	8001e60 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f7ff fed0 	bl	8001cbc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1c:	f000 f814 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f20:	f7ff f8fa 	bl	8001118 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f24:	f000 fbdc 	bl	80026e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f28:	f000 fc3c 	bl	80027a4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001f2c:	f7ff fbd2 	bl	80016d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //lsm6ds0_init();
  hts221_init();
 8001f30:	f7ff f9e2 	bl	80012f8 <hts221_init>
  lps25hb_init();
 8001f34:	f7ff fe8e 	bl	8001c54 <lps25hb_init>
  lis3mdl_init();
 8001f38:	f7ff fdd6 	bl	8001ae8 <lis3mdl_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MAIN_updateData();
 8001f3c:	f000 f858 	bl	8001ff0 <MAIN_updateData>
	  LL_mDelay(50);
 8001f40:	2032      	movs	r0, #50	; 0x32
 8001f42:	f001 fd4b 	bl	80039dc <LL_mDelay>
	  MAIN_updateData();
 8001f46:	e7f9      	b.n	8001f3c <main+0x38>

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff ffb7 	bl	8001ec0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffc8 	bl	8001ee8 <LL_FLASH_GetLatency>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1fa      	bne.n	8001f54 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001f5e:	f7ff fed1 	bl	8001d04 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f62:	bf00      	nop
 8001f64:	f7ff fede 	bl	8001d24 <LL_RCC_HSI_IsReady>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d1fa      	bne.n	8001f64 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f6e:	2010      	movs	r0, #16
 8001f70:	f7ff feea 	bl	8001d48 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff ff1f 	bl	8001db8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff ff30 	bl	8001de0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ff41 	bl	8001e08 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fef4 	bl	8001d74 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f8c:	bf00      	nop
 8001f8e:	f7ff ff05 	bl	8001d9c <LL_RCC_GetSysClkSource>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1fa      	bne.n	8001f8e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <SystemClock_Config+0x68>)
 8001f9a:	f001 fd11 	bl	80039c0 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <SystemClock_Config+0x68>)
 8001fa0:	f001 fd40 	bl	8003a24 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001fa4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001fa8:	f7ff ff42 	bl	8001e30 <LL_RCC_SetI2CClockSource>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <MAIN_buttonShiftDataID>:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"ALT_%06.1f",data[dataID]));
				break;
		}
	}

	void MAIN_buttonShiftDataID(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
		dataID++;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MAIN_buttonShiftDataID+0x34>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MAIN_buttonShiftDataID+0x34>)
 8001fc2:	701a      	strb	r2, [r3, #0]
		dataID %= 5;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MAIN_buttonShiftDataID+0x34>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MAIN_buttonShiftDataID+0x38>)
 8001fca:	fba3 1302 	umull	r1, r3, r3, r2
 8001fce:	0899      	lsrs	r1, r3, #2
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <MAIN_buttonShiftDataID+0x34>)
 8001fdc:	701a      	strb	r2, [r3, #0]
		DISPLAY_resetCurPos();
 8001fde:	f7fe ff53 	bl	8000e88 <DISPLAY_resetCurPos>
	}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000258 	.word	0x20000258
 8001fec:	cccccccd 	.word	0xcccccccd

08001ff0 <MAIN_updateData>:

	void MAIN_updateData(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
		//static float acc[3];
		//lsm6ds0_get_acc(acc, (acc+1), (acc+2));
		static float mag[3];
		lis3mdl_get_mag(mag,(mag+1), (mag+2));
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <MAIN_updateData+0xe0>)
 8001ff8:	4a36      	ldr	r2, [pc, #216]	; (80020d4 <MAIN_updateData+0xe4>)
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4836      	ldr	r0, [pc, #216]	; (80020d8 <MAIN_updateData+0xe8>)
 8001ffe:	f7ff fd11 	bl	8001a24 <lis3mdl_get_mag>
		data[0] = calcAzimuth(mag[0], mag[1]);
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <MAIN_updateData+0xe8>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <MAIN_updateData+0xe8>)
 800200a:	ed93 7a01 	vldr	s14, [r3, #4]
 800200e:	eef0 0a47 	vmov.f32	s1, s14
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	f000 f891 	bl	800213c <calcAzimuth>
 800201a:	eef0 7a40 	vmov.f32	s15, s0
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <MAIN_updateData+0xec>)
 8002020:	edc3 7a00 	vstr	s15, [r3]

		data[1] = hts221_get_temp();
 8002024:	f7ff f930 	bl	8001288 <hts221_get_temp>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <MAIN_updateData+0xec>)
 800202e:	edc3 7a01 	vstr	s15, [r3, #4]
		data[2] = hts221_get_humidity();
 8002032:	f7ff f945 	bl	80012c0 <hts221_get_humidity>
 8002036:	eef0 7a40 	vmov.f32	s15, s0
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <MAIN_updateData+0xec>)
 800203c:	edc3 7a02 	vstr	s15, [r3, #8]
		data[3] = lps25hb_get_press();
 8002040:	f7ff fde2 	bl	8001c08 <lps25hb_get_press>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MAIN_updateData+0xec>)
 800204a:	edc3 7a03 	vstr	s15, [r3, #12]
		data[4] = calcAltitude(data[1], data[3]);
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <MAIN_updateData+0xec>)
 8002050:	edd3 7a01 	vldr	s15, [r3, #4]
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <MAIN_updateData+0xec>)
 8002056:	ed93 7a03 	vldr	s14, [r3, #12]
 800205a:	eef0 0a47 	vmov.f32	s1, s14
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	f000 f89d 	bl	80021a0 <calcAltitude>
 8002066:	eef0 7a40 	vmov.f32	s15, s0
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <MAIN_updateData+0xec>)
 800206c:	edc3 7a04 	vstr	s15, [r3, #16]

		for (int i = 0; i < NUM_DATA; i++){
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	e024      	b.n	80020c0 <MAIN_updateData+0xd0>
			data[i] = adjustData(data[i],minDataVal[i],maxDataVal[i]);
 8002076:	4a19      	ldr	r2, [pc, #100]	; (80020dc <MAIN_updateData+0xec>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <MAIN_updateData+0xf0>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <MAIN_updateData+0xf4>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	eeb0 1a66 	vmov.f32	s2, s13
 800209e:	eef0 0a47 	vmov.f32	s1, s14
 80020a2:	eeb0 0a67 	vmov.f32	s0, s15
 80020a6:	f000 f81f 	bl	80020e8 <adjustData>
 80020aa:	eef0 7a40 	vmov.f32	s15, s0
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <MAIN_updateData+0xec>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < NUM_DATA; i++){
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3301      	adds	r3, #1
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	ddd7      	ble.n	8002076 <MAIN_updateData+0x86>
		}
	}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000260 	.word	0x20000260
 80020d4:	20000264 	.word	0x20000264
 80020d8:	2000025c 	.word	0x2000025c
 80020dc:	2000028c 	.word	0x2000028c
 80020e0:	20000038 	.word	0x20000038
 80020e4:	2000004c 	.word	0x2000004c

080020e8 <adjustData>:

	float adjustData(float value, float minValue, float maxValue){
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80020f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80020f6:	ed87 1a01 	vstr	s2, [r7, #4]
		if(value < minValue){
 80020fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80020fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d501      	bpl.n	8002110 <adjustData+0x28>
			value = minValue;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60fb      	str	r3, [r7, #12]
		}

		if(value > maxValue){
 8002110:	ed97 7a03 	vldr	s14, [r7, #12]
 8002114:	edd7 7a01 	vldr	s15, [r7, #4]
 8002118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	dd01      	ble.n	8002126 <adjustData+0x3e>
			value = maxValue;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]
		}
		return value;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	ee07 3a90 	vmov	s15, r3
	}
 800212c:	eeb0 0a67 	vmov.f32	s0, s15
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <calcAzimuth>:

	float calcAzimuth(float x, float y){
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	ed87 0a01 	vstr	s0, [r7, #4]
 8002146:	edc7 0a00 	vstr	s1, [r7]
		return (float) (atan2((double)y,(double)x)) * 180.0f/3.1415f;
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f7fe f9a8 	bl	80004a0 <__aeabi_f2d>
 8002150:	4604      	mov	r4, r0
 8002152:	460d      	mov	r5, r1
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe f9a3 	bl	80004a0 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ec43 2b11 	vmov	d1, r2, r3
 8002162:	ec45 4b10 	vmov	d0, r4, r5
 8002166:	f003 f9d1 	bl	800550c <atan2>
 800216a:	ec54 3b10 	vmov	r3, r4, d0
 800216e:	4618      	mov	r0, r3
 8002170:	4621      	mov	r1, r4
 8002172:	f7fe fcc5 	bl	8000b00 <__aeabi_d2f>
 8002176:	ee07 0a10 	vmov	s14, r0
 800217a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8002198 <calcAzimuth+0x5c>
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800219c <calcAzimuth+0x60>
 8002186:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800218a:	eef0 7a66 	vmov.f32	s15, s13
	}
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bdb0      	pop	{r4, r5, r7, pc}
 8002198:	43340000 	.word	0x43340000
 800219c:	40490e56 	.word	0x40490e56

080021a0 <calcAltitude>:

	float calcAltitude(float pressure, float temperature){
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021aa:	edc7 0a00 	vstr	s1, [r7]
		const float P0 = 1013.25;
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <calcAltitude+0x88>)
 80021b0:	60fb      	str	r3, [r7, #12]
		return (float) (pow((double)(P0/pressure), (double)(1.0f/5.257f)) -1.0f) * (temperature + 273.15f)/0.0065f;
 80021b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021be:	ee16 0a90 	vmov	r0, s13
 80021c2:	f7fe f96d 	bl	80004a0 <__aeabi_f2d>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002220 <calcAltitude+0x80>
 80021ce:	ec44 3b10 	vmov	d0, r3, r4
 80021d2:	f003 f99d 	bl	8005510 <pow>
 80021d6:	ec51 0b10 	vmov	r0, r1, d0
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <calcAltitude+0x8c>)
 80021e0:	f7fd fffe 	bl	80001e0 <__aeabi_dsub>
 80021e4:	4603      	mov	r3, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	4618      	mov	r0, r3
 80021ea:	4621      	mov	r1, r4
 80021ec:	f7fe fc88 	bl	8000b00 <__aeabi_d2f>
 80021f0:	ee06 0a90 	vmov	s13, r0
 80021f4:	edd7 7a00 	vldr	s15, [r7]
 80021f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002230 <calcAltitude+0x90>
 80021fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002234 <calcAltitude+0x94>
 8002208:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800220c:	eef0 7a66 	vmov.f32	s15, s13
	}
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	f3af 8000 	nop.w
 8002220:	80000000 	.word	0x80000000
 8002224:	3fc85936 	.word	0x3fc85936
 8002228:	447d5000 	.word	0x447d5000
 800222c:	3ff00000 	.word	0x3ff00000
 8002230:	43889333 	.word	0x43889333
 8002234:	3bd4fdf4 	.word	0x3bd4fdf4

08002238 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40010400 	.word	0x40010400

08002264 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6153      	str	r3, [r2, #20]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010400 	.word	0x40010400

08002284 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f06f 0201 	mvn.w	r2, #1
 8002292:	611a      	str	r2, [r3, #16]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <HardFault_Handler+0x4>

080022da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <MemManage_Handler+0x4>

080022e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <BusFault_Handler+0x4>

080022e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <UsageFault_Handler+0x4>

080022ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff ff85 	bl	8002238 <LL_EXTI_IsActiveFlag_0_31>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff ff95 	bl	8002264 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    MAIN_buttonShiftDataID();
 800233a:	f7ff fe3b 	bl	8001fb4 <MAIN_buttonShiftDataID>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}

08002342 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8002346:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800234a:	f7ff ffa9 	bl	80022a0 <LL_TIM_IsActiveFlag_UPDATE>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <TIM2_IRQHandler+0x22>
		MAIN_updateData();
 8002354:	f7ff fe4c 	bl	8001ff0 <MAIN_updateData>
		DISPLAY_displayCurStr();
 8002358:	f7fe fc3e 	bl	8000bd8 <DISPLAY_displayCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 800235c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002360:	f7ff ff90 	bl	8002284 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <TIM3_IRQHandler+0x20>)
 800236e:	f7ff ff97 	bl	80022a0 <LL_TIM_IsActiveFlag_UPDATE>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 8002378:	f7fe fd12 	bl	8000da0 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM3_IRQHandler+0x20>)
 800237e:	f7ff ff81 	bl	8002284 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40000400 	.word	0x40000400

0800238c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_eventCallback();
 8002390:	f7ff fad0 	bl	8001934 <I2C_eventCallback>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <_sbrk+0x5c>)
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <_sbrk+0x60>)
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <_sbrk+0x64>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <_sbrk+0x68>)
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c8:	f001 fb3c 	bl	8003a44 <__errno>
 80023cc:	4602      	mov	r2, r0
 80023ce:	230c      	movs	r3, #12
 80023d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	e009      	b.n	80023ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <_sbrk+0x64>)
 80023e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20003000 	.word	0x20003000
 80023f8:	00000400 	.word	0x00000400
 80023fc:	20000268 	.word	0x20000268
 8002400:	200002a8 	.word	0x200002a8

08002404 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <SystemInit+0x20>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <SystemInit+0x20>)
 8002410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <LL_APB1_GRP1_EnableClock>:
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	4907      	ldr	r1, [pc, #28]	; (8002568 <LL_APB1_GRP1_EnableClock+0x2c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4313      	orrs	r3, r2
 800254e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000

0800256c <LL_TIM_EnableCounter>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	601a      	str	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_TIM_DisableARRPreload>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_TIM_OC_DisableFast>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d028      	beq.n	800260e <LL_TIM_OC_DisableFast+0x62>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d023      	beq.n	800260a <LL_TIM_OC_DisableFast+0x5e>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b10      	cmp	r3, #16
 80025c6:	d01e      	beq.n	8002606 <LL_TIM_OC_DisableFast+0x5a>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d019      	beq.n	8002602 <LL_TIM_OC_DisableFast+0x56>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d013      	beq.n	80025fe <LL_TIM_OC_DisableFast+0x52>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025dc:	d00d      	beq.n	80025fa <LL_TIM_OC_DisableFast+0x4e>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e4:	d007      	beq.n	80025f6 <LL_TIM_OC_DisableFast+0x4a>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d101      	bne.n	80025f2 <LL_TIM_OC_DisableFast+0x46>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00e      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e00c      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00a      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_TIM_OC_DisableFast+0x64>
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3318      	adds	r3, #24
 8002616:	4619      	mov	r1, r3
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LL_TIM_OC_DisableFast+0x9c>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	440b      	add	r3, r1
 8002620:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	4908      	ldr	r1, [pc, #32]	; (800264c <LL_TIM_OC_DisableFast+0xa0>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	4619      	mov	r1, r3
 800262e:	2304      	movs	r3, #4
 8002630:	408b      	lsls	r3, r1
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	08006b54 	.word	0x08006b54
 800264c:	08006b60 	.word	0x08006b60

08002650 <LL_TIM_SetClockSource>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	609a      	str	r2, [r3, #8]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_TIM_SetTriggerOutput>:
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	605a      	str	r2, [r3, #4]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_TIM_DisableMasterSlaveMode>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2220      	movs	r2, #32
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 f9eb 	bl	8003ad8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff ff1a 	bl	800253c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002708:	f7ff fe8e 	bl	8002428 <__NVIC_GetPriorityGrouping>
 800270c:	4603      	mov	r3, r0
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fede 	bl	80024d4 <NVIC_EncodePriority>
 8002718:	4603      	mov	r3, r0
 800271a:	4619      	mov	r1, r3
 800271c:	201c      	movs	r0, #28
 800271e:	f7ff feaf 	bl	8002480 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002722:	201c      	movs	r0, #28
 8002724:	f7ff fe8e 	bl	8002444 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8002728:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800272c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800272e:	2300      	movs	r3, #0
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800273a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273e:	4619      	mov	r1, r3
 8002740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002744:	f000 fdca 	bl	80032dc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002748:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800274c:	f7ff ff1e 	bl	800258c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002750:	2100      	movs	r1, #0
 8002752:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002756:	f7ff ff7b 	bl	8002650 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800275a:	2310      	movs	r3, #16
 800275c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	461a      	mov	r2, r3
 8002772:	2101      	movs	r1, #1
 8002774:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002778:	f000 fe22 	bl	80033c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800277c:	2101      	movs	r1, #1
 800277e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002782:	f7ff ff13 	bl	80025ac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002786:	2100      	movs	r1, #0
 8002788:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800278c:	f7ff ff75 	bl	800267a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002790:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002794:	f7ff ff84 	bl	80026a0 <LL_TIM_DisableMasterSlaveMode>
  add_TIM2_Init();
 8002798:	f000 f862 	bl	8002860 <add_TIM2_Init>
}
 800279c:	bf00      	nop
 800279e:	3738      	adds	r7, #56	; 0x38
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	; 0x38
 80027a8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2220      	movs	r2, #32
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 f989 	bl	8003ad8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80027c6:	2002      	movs	r0, #2
 80027c8:	f7ff feb8 	bl	800253c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027cc:	f7ff fe2c 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe7c 	bl	80024d4 <NVIC_EncodePriority>
 80027dc:	4603      	mov	r3, r0
 80027de:	4619      	mov	r1, r3
 80027e0:	201d      	movs	r0, #29
 80027e2:	f7ff fe4d 	bl	8002480 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80027e6:	201d      	movs	r0, #29
 80027e8:	f7ff fe2c 	bl	8002444 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 80027ec:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80027f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 80027f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	4815      	ldr	r0, [pc, #84]	; (800285c <MX_TIM3_Init+0xb8>)
 8002808:	f000 fd68 	bl	80032dc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800280c:	4813      	ldr	r0, [pc, #76]	; (800285c <MX_TIM3_Init+0xb8>)
 800280e:	f7ff febd 	bl	800258c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002812:	2100      	movs	r1, #0
 8002814:	4811      	ldr	r0, [pc, #68]	; (800285c <MX_TIM3_Init+0xb8>)
 8002816:	f7ff ff1b 	bl	8002650 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800281a:	2310      	movs	r3, #16
 800281c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	461a      	mov	r2, r3
 8002832:	2101      	movs	r1, #1
 8002834:	4809      	ldr	r0, [pc, #36]	; (800285c <MX_TIM3_Init+0xb8>)
 8002836:	f000 fdc3 	bl	80033c0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800283a:	2101      	movs	r1, #1
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <MX_TIM3_Init+0xb8>)
 800283e:	f7ff feb5 	bl	80025ac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002842:	2100      	movs	r1, #0
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_TIM3_Init+0xb8>)
 8002846:	f7ff ff18 	bl	800267a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800284a:	4804      	ldr	r0, [pc, #16]	; (800285c <MX_TIM3_Init+0xb8>)
 800284c:	f7ff ff28 	bl	80026a0 <LL_TIM_DisableMasterSlaveMode>
  add_TIM3_Init();
 8002850:	f000 f812 	bl	8002878 <add_TIM3_Init>
}
 8002854:	bf00      	nop
 8002856:	3738      	adds	r7, #56	; 0x38
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40000400 	.word	0x40000400

08002860 <add_TIM2_Init>:

/* USER CODE BEGIN 1 */
void add_TIM2_Init(void){
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM2);
 8002864:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002868:	f7ff ff2a 	bl	80026c0 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 800286c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002870:	f7ff fe7c 	bl	800256c <LL_TIM_EnableCounter>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <add_TIM3_Init>:

void add_TIM3_Init(void){
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM3);
 800287c:	4803      	ldr	r0, [pc, #12]	; (800288c <add_TIM3_Init+0x14>)
 800287e:	f7ff ff1f 	bl	80026c0 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8002882:	4802      	ldr	r0, [pc, #8]	; (800288c <add_TIM3_Init+0x14>)
 8002884:	f7ff fe72 	bl	800256c <LL_TIM_EnableCounter>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40000400 	.word	0x40000400

08002890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490e      	ldr	r1, [pc, #56]	; (80028d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0b      	ldr	r4, [pc, #44]	; (80028dc <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028ba:	f7ff fda3 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f001 f8c7 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028c2:	f7ff fb1f 	bl	8001f04 <main>

080028c6 <LoopForever>:

LoopForever:
    b LoopForever
 80028c6:	e7fe      	b.n	80028c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80028d4:	08006e20 	.word	0x08006e20
  ldr r2, =_sbss
 80028d8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80028dc:	200002a4 	.word	0x200002a4

080028e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC1_2_IRQHandler>
	...

080028e4 <LL_EXTI_EnableIT_0_31>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <LL_EXTI_EnableIT_0_31+0x20>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <LL_EXTI_EnableIT_0_31+0x20>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40010400 	.word	0x40010400

08002908 <LL_EXTI_EnableIT_32_63>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_EXTI_EnableIT_32_63+0x20>)
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <LL_EXTI_EnableIT_32_63+0x20>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	620b      	str	r3, [r1, #32]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40010400 	.word	0x40010400

0800292c <LL_EXTI_DisableIT_0_31>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <LL_EXTI_DisableIT_0_31+0x24>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	43db      	mvns	r3, r3
 800293c:	4904      	ldr	r1, [pc, #16]	; (8002950 <LL_EXTI_DisableIT_0_31+0x24>)
 800293e:	4013      	ands	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010400 	.word	0x40010400

08002954 <LL_EXTI_DisableIT_32_63>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <LL_EXTI_DisableIT_32_63+0x24>)
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	43db      	mvns	r3, r3
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <LL_EXTI_DisableIT_32_63+0x24>)
 8002966:	4013      	ands	r3, r2
 8002968:	620b      	str	r3, [r1, #32]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010400 	.word	0x40010400

0800297c <LL_EXTI_EnableEvent_0_31>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4904      	ldr	r1, [pc, #16]	; (800299c <LL_EXTI_EnableEvent_0_31+0x20>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40010400 	.word	0x40010400

080029a0 <LL_EXTI_EnableEvent_32_63>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80029aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ac:	4904      	ldr	r1, [pc, #16]	; (80029c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40010400 	.word	0x40010400

080029c4 <LL_EXTI_DisableEvent_0_31>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4904      	ldr	r1, [pc, #16]	; (80029e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010400 	.word	0x40010400

080029ec <LL_EXTI_DisableEvent_32_63>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010400 	.word	0x40010400

08002a14 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40010400 	.word	0x40010400

08002a38 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a44:	4904      	ldr	r1, [pc, #16]	; (8002a58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40010400 	.word	0x40010400

08002a5c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	4904      	ldr	r1, [pc, #16]	; (8002a80 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010400 	.word	0x40010400

08002a84 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010400 	.word	0x40010400

08002aac <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40010400 	.word	0x40010400

08002ad0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40010400 	.word	0x40010400

08002af4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	60cb      	str	r3, [r1, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010400 	.word	0x40010400

08002b1c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4904      	ldr	r1, [pc, #16]	; (8002b40 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010400 	.word	0x40010400

08002b44 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7a1b      	ldrb	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80c2 	beq.w	8002cde <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d05b      	beq.n	8002c1a <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7a5b      	ldrb	r3, [r3, #9]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d00e      	beq.n	8002b88 <LL_EXTI_Init+0x44>
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d017      	beq.n	8002b9e <LL_EXTI_Init+0x5a>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d120      	bne.n	8002bb4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff24 	bl	80029c4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff feaf 	bl	80028e4 <LL_EXTI_EnableIT_0_31>
          break;
 8002b86:	e018      	b.n	8002bba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fecd 	bl	800292c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fef0 	bl	800297c <LL_EXTI_EnableEvent_0_31>
          break;
 8002b9c:	e00d      	b.n	8002bba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe9e 	bl	80028e4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fee5 	bl	800297c <LL_EXTI_EnableEvent_0_31>
          break;
 8002bb2:	e002      	b.n	8002bba <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
          break;
 8002bb8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7a9b      	ldrb	r3, [r3, #10]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02b      	beq.n	8002c1a <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7a9b      	ldrb	r3, [r3, #10]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d00e      	beq.n	8002be8 <LL_EXTI_Init+0xa4>
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d017      	beq.n	8002bfe <LL_EXTI_Init+0xba>
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d120      	bne.n	8002c14 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff8c 	bl	8002af4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff17 	bl	8002a14 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002be6:	e019      	b.n	8002c1c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff35 	bl	8002a5c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff58 	bl	8002aac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bfc:	e00e      	b.n	8002c1c <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff06 	bl	8002a14 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff4d 	bl	8002aac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c12:	e003      	b.n	8002c1c <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
            break;
 8002c18:	e000      	b.n	8002c1c <LL_EXTI_Init+0xd8>
        }
      }
 8002c1a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d071      	beq.n	8002d08 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7a5b      	ldrb	r3, [r3, #9]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d00e      	beq.n	8002c4a <LL_EXTI_Init+0x106>
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d017      	beq.n	8002c60 <LL_EXTI_Init+0x11c>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d120      	bne.n	8002c76 <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fed7 	bl	80029ec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fe60 	bl	8002908 <LL_EXTI_EnableIT_32_63>
          break;
 8002c48:	e018      	b.n	8002c7c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fe80 	bl	8002954 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fea1 	bl	80029a0 <LL_EXTI_EnableEvent_32_63>
          break;
 8002c5e:	e00d      	b.n	8002c7c <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fe4f 	bl	8002908 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fe96 	bl	80029a0 <LL_EXTI_EnableEvent_32_63>
          break;
 8002c74:	e002      	b.n	8002c7c <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
          break;
 8002c7a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7a9b      	ldrb	r3, [r3, #10]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d041      	beq.n	8002d08 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7a9b      	ldrb	r3, [r3, #10]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d00e      	beq.n	8002caa <LL_EXTI_Init+0x166>
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d017      	beq.n	8002cc0 <LL_EXTI_Init+0x17c>
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d120      	bne.n	8002cd6 <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff3f 	bl	8002b1c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fec8 	bl	8002a38 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002ca8:	e02f      	b.n	8002d0a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fee8 	bl	8002a84 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff09 	bl	8002ad0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002cbe:	e024      	b.n	8002d0a <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff feb7 	bl	8002a38 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fefe 	bl	8002ad0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002cd4:	e019      	b.n	8002d0a <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
            break;
 8002cda:	bf00      	nop
 8002cdc:	e015      	b.n	8002d0a <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fe22 	bl	800292c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe69 	bl	80029c4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe2c 	bl	8002954 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fe73 	bl	80029ec <LL_EXTI_DisableEvent_32_63>
 8002d06:	e000      	b.n	8002d0a <LL_EXTI_Init+0x1c6>
      }
 8002d08:	bf00      	nop
#endif
  }
  return status;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <LL_GPIO_SetPinMode>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	613b      	str	r3, [r7, #16]
  return result;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	601a      	str	r2, [r3, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_GPIO_SetPinOutputType>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	605a      	str	r2, [r3, #4]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_GPIO_SetPinSpeed>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b089      	sub	sp, #36	; 0x24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	613b      	str	r3, [r7, #16]
  return result;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2103      	movs	r1, #3
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	61bb      	str	r3, [r7, #24]
  return result;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3724      	adds	r7, #36	; 0x24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_GPIO_SetPinPull>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	613b      	str	r3, [r7, #16]
  return result;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2103      	movs	r1, #3
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	60da      	str	r2, [r3, #12]
}
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_GPIO_SetAFPin_0_7>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b089      	sub	sp, #36	; 0x24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	613b      	str	r3, [r7, #16]
  return result;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	210f      	movs	r1, #15
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	61bb      	str	r3, [r7, #24]
  return result;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	3724      	adds	r7, #36	; 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_GPIO_SetAFPin_8_15>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	613b      	str	r3, [r7, #16]
  return result;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	61bb      	str	r3, [r7, #24]
  return result;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f12:	bf00      	nop
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b088      	sub	sp, #32
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	613b      	str	r3, [r7, #16]
  return result;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f40:	e051      	b.n	8002fe6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d043      	beq.n	8002fe0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d003      	beq.n	8002f68 <LL_GPIO_Init+0x4a>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d10e      	bne.n	8002f86 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	69b9      	ldr	r1, [r7, #24]
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff16 	bl	8002da2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fef6 	bl	8002d72 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff36 	bl	8002e00 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d11a      	bne.n	8002fd2 <LL_GPIO_Init+0xb4>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	60bb      	str	r3, [r7, #8]
  return result;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d807      	bhi.n	8002fc4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff4e 	bl	8002e5e <LL_GPIO_SetAFPin_0_7>
 8002fc2:	e006      	b.n	8002fd2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff75 	bl	8002ebc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fe9a 	bl	8002d14 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1a6      	bne.n	8002f42 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <LL_I2C_Enable>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_I2C_Disable>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_I2C_ConfigFilters>:
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0219      	lsls	r1, r3, #8
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	430b      	orrs	r3, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_I2C_SetOwnAddress1>:
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003080:	f023 0307 	bic.w	r3, r3, #7
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	430a      	orrs	r2, r1
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_I2C_EnableOwnAddress1>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_I2C_DisableOwnAddress1>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_I2C_SetTiming>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	611a      	str	r2, [r3, #16]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_I2C_SetMode>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_I2C_AcknowledgeNextData>:
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	605a      	str	r2, [r3, #4]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff65 	bl	800301e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	461a      	mov	r2, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff6d 	bl	800303e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffb6 	bl	80030dc <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff44 	bl	8002ffe <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ffa0 	bl	80030bc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6919      	ldr	r1, [r3, #16]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	461a      	mov	r2, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff70 	bl	800306c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff81 	bl	800309c <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ffa9 	bl	80030f8 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffb6 	bl	800311e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <LL_TIM_SetPrescaler>:
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_TIM_SetAutoReload>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_TIM_SetRepetitionCounter>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_TIM_OC_SetCompareCH1>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_TIM_OC_SetCompareCH2>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_TIM_OC_SetCompareCH3>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_TIM_OC_SetCompareCH4>:
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_TIM_OC_SetCompareCH5>:
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_TIM_OC_SetCompareCH6>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	615a      	str	r2, [r3, #20]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <LL_TIM_Init+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <LL_TIM_Init+0x28>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d003      	beq.n	8003304 <LL_TIM_Init+0x28>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <LL_TIM_Init+0xd4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d106      	bne.n	8003312 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <LL_TIM_Init+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <LL_TIM_Init+0x66>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d00f      	beq.n	8003342 <LL_TIM_Init+0x66>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <LL_TIM_Init+0xd4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <LL_TIM_Init+0x66>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <LL_TIM_Init+0xd8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <LL_TIM_Init+0x66>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <LL_TIM_Init+0xdc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <LL_TIM_Init+0x66>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <LL_TIM_Init+0xe0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d106      	bne.n	8003350 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ff3b 	bl	80031d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ff27 	bl	80031bc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <LL_TIM_Init+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <LL_TIM_Init+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <LL_TIM_Init+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <LL_TIM_Init+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <LL_TIM_Init+0xdc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <LL_TIM_Init+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <LL_TIM_Init+0xe0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d105      	bne.n	800339a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff2d 	bl	80031f4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff8e 	bl	80032bc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d01f      	beq.n	8003418 <LL_TIM_OC_Init+0x58>
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033dc:	d804      	bhi.n	80033e8 <LL_TIM_OC_Init+0x28>
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d00c      	beq.n	80033fc <LL_TIM_OC_Init+0x3c>
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d011      	beq.n	800340a <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80033e6:	e033      	b.n	8003450 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d022      	beq.n	8003434 <LL_TIM_OC_Init+0x74>
 80033ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f2:	d026      	beq.n	8003442 <LL_TIM_OC_Init+0x82>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f8:	d015      	beq.n	8003426 <LL_TIM_OC_Init+0x66>
      break;
 80033fa:	e029      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f82c 	bl	800345c <OC1Config>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]
      break;
 8003408:	e022      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f89f 	bl	8003550 <OC2Config>
 8003412:	4603      	mov	r3, r0
 8003414:	75fb      	strb	r3, [r7, #23]
      break;
 8003416:	e01b      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f916 	bl	800364c <OC3Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]
      break;
 8003424:	e014      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f98d 	bl	8003748 <OC4Config>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]
      break;
 8003432:	e00d      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f9ec 	bl	8003814 <OC5Config>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	e006      	b.n	8003450 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fa43 	bl	80038d0 <OC6Config>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
      break;
 800344e:	bf00      	nop
  }

  return result;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 0202 	bic.w	r2, r3, #2
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <OC1Config+0xe4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <OC1Config+0x7e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <OC1Config+0xe8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <OC1Config+0x7e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <OC1Config+0xec>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <OC1Config+0x7e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	; (800354c <OC1Config+0xf0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d11e      	bne.n	8003518 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0208 	bic.w	r2, r3, #8
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0204 	bic.w	r2, r3, #4
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fe70 	bl	8003210 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	0212      	lsls	r2, r2, #8
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0220 	bic.w	r2, r3, #32
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0210 	bic.w	r2, r3, #16
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a21      	ldr	r2, [pc, #132]	; (800363c <OC2Config+0xec>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <OC2Config+0x84>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <OC2Config+0xf0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <OC2Config+0x84>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <OC2Config+0xf4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <OC2Config+0x84>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <OC2Config+0xf8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d11f      	bne.n	8003614 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	019b      	lsls	r3, r3, #6
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fe00 	bl	800322c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800

0800364c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <OC3Config+0xec>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <OC3Config+0x82>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <OC3Config+0xf0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <OC3Config+0x82>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <OC3Config+0xf4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <OC3Config+0x82>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <OC3Config+0xf8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d11f      	bne.n	800370e <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	029b      	lsls	r3, r3, #10
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fd91 	bl	8003248 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	0212      	lsls	r2, r2, #8
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	031b      	lsls	r3, r3, #12
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	031b      	lsls	r3, r3, #12
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <OC4Config+0xbc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00b      	beq.n	80037cc <OC4Config+0x84>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <OC4Config+0xc0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <OC4Config+0x84>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <OC4Config+0xc4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <OC4Config+0x84>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <OC4Config+0xc8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d107      	bne.n	80037dc <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	019b      	lsls	r3, r3, #6
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fd38 	bl	8003264 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800

08003814 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <OC5Config+0xac>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <OC5Config+0x74>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <OC5Config+0xb0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <OC5Config+0x74>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <OC5Config+0xb4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <OC5Config+0x74>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <OC5Config+0xb8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff fce9 	bl	8003280 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40014800 	.word	0x40014800

080038d0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	0212      	lsls	r2, r2, #8
 8003902:	4313      	orrs	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <OC6Config+0xac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <OC6Config+0x76>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <OC6Config+0xb0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <OC6Config+0x76>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <OC6Config+0xb4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <OC6Config+0x76>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <OC6Config+0xb8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d109      	bne.n	800395a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fc9a 	bl	80032a0 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800

0800398c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a07      	ldr	r2, [pc, #28]	; (80039bc <LL_InitTick+0x30>)
 80039a0:	3b01      	subs	r3, #1
 80039a2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <LL_InitTick+0x30>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <LL_InitTick+0x30>)
 80039ac:	2205      	movs	r2, #5
 80039ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e010 	.word	0xe000e010

080039c0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80039c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffdd 	bl	800398c <LL_InitTick>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <LL_mDelay+0x44>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80039ea:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d00c      	beq.n	8003a0e <LL_mDelay+0x32>
  {
    Delay++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80039fa:	e008      	b.n	8003a0e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <LL_mDelay+0x44>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <LL_mDelay+0x32>
    {
      Delay--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f3      	bne.n	80039fc <LL_mDelay+0x20>
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e010 	.word	0xe000e010

08003a24 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <LL_SetSystemCoreClock+0x1c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000060 	.word	0x20000060

08003a44 <__errno>:
 8003a44:	4b01      	ldr	r3, [pc, #4]	; (8003a4c <__errno+0x8>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000064 	.word	0x20000064

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0d      	ldr	r6, [pc, #52]	; (8003a88 <__libc_init_array+0x38>)
 8003a54:	4c0d      	ldr	r4, [pc, #52]	; (8003a8c <__libc_init_array+0x3c>)
 8003a56:	1ba4      	subs	r4, r4, r6
 8003a58:	10a4      	asrs	r4, r4, #2
 8003a5a:	2500      	movs	r5, #0
 8003a5c:	42a5      	cmp	r5, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	4e0b      	ldr	r6, [pc, #44]	; (8003a90 <__libc_init_array+0x40>)
 8003a62:	4c0c      	ldr	r4, [pc, #48]	; (8003a94 <__libc_init_array+0x44>)
 8003a64:	f003 f82a 	bl	8006abc <_init>
 8003a68:	1ba4      	subs	r4, r4, r6
 8003a6a:	10a4      	asrs	r4, r4, #2
 8003a6c:	2500      	movs	r5, #0
 8003a6e:	42a5      	cmp	r5, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a78:	4798      	blx	r3
 8003a7a:	3501      	adds	r5, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a82:	4798      	blx	r3
 8003a84:	3501      	adds	r5, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	08006e18 	.word	0x08006e18
 8003a8c:	08006e18 	.word	0x08006e18
 8003a90:	08006e18 	.word	0x08006e18
 8003a94:	08006e1c 	.word	0x08006e1c

08003a98 <__locale_ctype_ptr>:
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <__locale_ctype_ptr+0x14>)
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <__locale_ctype_ptr+0x18>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf08      	it	eq
 8003aa4:	4613      	moveq	r3, r2
 8003aa6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003aaa:	4770      	bx	lr
 8003aac:	20000064 	.word	0x20000064
 8003ab0:	200000c8 	.word	0x200000c8

08003ab4 <__ascii_mbtowc>:
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	b901      	cbnz	r1, 8003aba <__ascii_mbtowc+0x6>
 8003ab8:	a901      	add	r1, sp, #4
 8003aba:	b142      	cbz	r2, 8003ace <__ascii_mbtowc+0x1a>
 8003abc:	b14b      	cbz	r3, 8003ad2 <__ascii_mbtowc+0x1e>
 8003abe:	7813      	ldrb	r3, [r2, #0]
 8003ac0:	600b      	str	r3, [r1, #0]
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	1c10      	adds	r0, r2, #0
 8003ac6:	bf18      	it	ne
 8003ac8:	2001      	movne	r0, #1
 8003aca:	b002      	add	sp, #8
 8003acc:	4770      	bx	lr
 8003ace:	4610      	mov	r0, r2
 8003ad0:	e7fb      	b.n	8003aca <__ascii_mbtowc+0x16>
 8003ad2:	f06f 0001 	mvn.w	r0, #1
 8003ad6:	e7f8      	b.n	8003aca <__ascii_mbtowc+0x16>

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <__cvt>:
 8003ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	ec55 4b10 	vmov	r4, r5, d0
 8003af0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003af2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	460e      	mov	r6, r1
 8003afa:	4691      	mov	r9, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	bfb8      	it	lt
 8003b00:	4622      	movlt	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	f027 0720 	bic.w	r7, r7, #32
 8003b08:	bfbb      	ittet	lt
 8003b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b0e:	461d      	movlt	r5, r3
 8003b10:	2300      	movge	r3, #0
 8003b12:	232d      	movlt	r3, #45	; 0x2d
 8003b14:	bfb8      	it	lt
 8003b16:	4614      	movlt	r4, r2
 8003b18:	2f46      	cmp	r7, #70	; 0x46
 8003b1a:	700b      	strb	r3, [r1, #0]
 8003b1c:	d004      	beq.n	8003b28 <__cvt+0x40>
 8003b1e:	2f45      	cmp	r7, #69	; 0x45
 8003b20:	d100      	bne.n	8003b24 <__cvt+0x3c>
 8003b22:	3601      	adds	r6, #1
 8003b24:	2102      	movs	r1, #2
 8003b26:	e000      	b.n	8003b2a <__cvt+0x42>
 8003b28:	2103      	movs	r1, #3
 8003b2a:	ab03      	add	r3, sp, #12
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	ab02      	add	r3, sp, #8
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4632      	mov	r2, r6
 8003b34:	4653      	mov	r3, sl
 8003b36:	ec45 4b10 	vmov	d0, r4, r5
 8003b3a:	f000 fbb9 	bl	80042b0 <_dtoa_r>
 8003b3e:	2f47      	cmp	r7, #71	; 0x47
 8003b40:	4680      	mov	r8, r0
 8003b42:	d102      	bne.n	8003b4a <__cvt+0x62>
 8003b44:	f019 0f01 	tst.w	r9, #1
 8003b48:	d026      	beq.n	8003b98 <__cvt+0xb0>
 8003b4a:	2f46      	cmp	r7, #70	; 0x46
 8003b4c:	eb08 0906 	add.w	r9, r8, r6
 8003b50:	d111      	bne.n	8003b76 <__cvt+0x8e>
 8003b52:	f898 3000 	ldrb.w	r3, [r8]
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	d10a      	bne.n	8003b70 <__cvt+0x88>
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc ff5d 	bl	8000a20 <__aeabi_dcmpeq>
 8003b66:	b918      	cbnz	r0, 8003b70 <__cvt+0x88>
 8003b68:	f1c6 0601 	rsb	r6, r6, #1
 8003b6c:	f8ca 6000 	str.w	r6, [sl]
 8003b70:	f8da 3000 	ldr.w	r3, [sl]
 8003b74:	4499      	add	r9, r3
 8003b76:	2200      	movs	r2, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc ff4f 	bl	8000a20 <__aeabi_dcmpeq>
 8003b82:	b938      	cbnz	r0, 8003b94 <__cvt+0xac>
 8003b84:	2230      	movs	r2, #48	; 0x30
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	454b      	cmp	r3, r9
 8003b8a:	d205      	bcs.n	8003b98 <__cvt+0xb0>
 8003b8c:	1c59      	adds	r1, r3, #1
 8003b8e:	9103      	str	r1, [sp, #12]
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e7f8      	b.n	8003b86 <__cvt+0x9e>
 8003b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b9c:	eba3 0308 	sub.w	r3, r3, r8
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	b004      	add	sp, #16
 8003ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003baa <__exponent>:
 8003baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bac:	2900      	cmp	r1, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	bfba      	itte	lt
 8003bb2:	4249      	neglt	r1, r1
 8003bb4:	232d      	movlt	r3, #45	; 0x2d
 8003bb6:	232b      	movge	r3, #43	; 0x2b
 8003bb8:	2909      	cmp	r1, #9
 8003bba:	f804 2b02 	strb.w	r2, [r4], #2
 8003bbe:	7043      	strb	r3, [r0, #1]
 8003bc0:	dd20      	ble.n	8003c04 <__exponent+0x5a>
 8003bc2:	f10d 0307 	add.w	r3, sp, #7
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	260a      	movs	r6, #10
 8003bca:	fb91 f5f6 	sdiv	r5, r1, r6
 8003bce:	fb06 1115 	mls	r1, r6, r5, r1
 8003bd2:	3130      	adds	r1, #48	; 0x30
 8003bd4:	2d09      	cmp	r5, #9
 8003bd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bda:	f103 32ff 	add.w	r2, r3, #4294967295
 8003bde:	4629      	mov	r1, r5
 8003be0:	dc09      	bgt.n	8003bf6 <__exponent+0x4c>
 8003be2:	3130      	adds	r1, #48	; 0x30
 8003be4:	3b02      	subs	r3, #2
 8003be6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003bea:	42bb      	cmp	r3, r7
 8003bec:	4622      	mov	r2, r4
 8003bee:	d304      	bcc.n	8003bfa <__exponent+0x50>
 8003bf0:	1a10      	subs	r0, r2, r0
 8003bf2:	b003      	add	sp, #12
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	e7e7      	b.n	8003bca <__exponent+0x20>
 8003bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bfe:	f804 2b01 	strb.w	r2, [r4], #1
 8003c02:	e7f2      	b.n	8003bea <__exponent+0x40>
 8003c04:	2330      	movs	r3, #48	; 0x30
 8003c06:	4419      	add	r1, r3
 8003c08:	7083      	strb	r3, [r0, #2]
 8003c0a:	1d02      	adds	r2, r0, #4
 8003c0c:	70c1      	strb	r1, [r0, #3]
 8003c0e:	e7ef      	b.n	8003bf0 <__exponent+0x46>

08003c10 <_printf_float>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	b08d      	sub	sp, #52	; 0x34
 8003c16:	460c      	mov	r4, r1
 8003c18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	461f      	mov	r7, r3
 8003c20:	4605      	mov	r5, r0
 8003c22:	f001 f8fd 	bl	8004e20 <_localeconv_r>
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc facc 	bl	80001c8 <strlen>
 8003c30:	2300      	movs	r3, #0
 8003c32:	930a      	str	r3, [sp, #40]	; 0x28
 8003c34:	f8d8 3000 	ldr.w	r3, [r8]
 8003c38:	9005      	str	r0, [sp, #20]
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	f023 0307 	bic.w	r3, r3, #7
 8003c40:	f103 0208 	add.w	r2, r3, #8
 8003c44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c48:	f8d4 b000 	ldr.w	fp, [r4]
 8003c4c:	f8c8 2000 	str.w	r2, [r8]
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c60:	9307      	str	r3, [sp, #28]
 8003c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	4ba7      	ldr	r3, [pc, #668]	; (8003f08 <_printf_float+0x2f8>)
 8003c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c70:	f7fc ff08 	bl	8000a84 <__aeabi_dcmpun>
 8003c74:	bb70      	cbnz	r0, 8003cd4 <_printf_float+0xc4>
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	4ba3      	ldr	r3, [pc, #652]	; (8003f08 <_printf_float+0x2f8>)
 8003c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c80:	f7fc fee2 	bl	8000a48 <__aeabi_dcmple>
 8003c84:	bb30      	cbnz	r0, 8003cd4 <_printf_float+0xc4>
 8003c86:	2200      	movs	r2, #0
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	f7fc fed1 	bl	8000a34 <__aeabi_dcmplt>
 8003c92:	b110      	cbz	r0, 8003c9a <_printf_float+0x8a>
 8003c94:	232d      	movs	r3, #45	; 0x2d
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9a:	4a9c      	ldr	r2, [pc, #624]	; (8003f0c <_printf_float+0x2fc>)
 8003c9c:	4b9c      	ldr	r3, [pc, #624]	; (8003f10 <_printf_float+0x300>)
 8003c9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ca2:	bf8c      	ite	hi
 8003ca4:	4690      	movhi	r8, r2
 8003ca6:	4698      	movls	r8, r3
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f02b 0204 	bic.w	r2, fp, #4
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	6022      	str	r2, [r4, #0]
 8003cb2:	f04f 0900 	mov.w	r9, #0
 8003cb6:	9700      	str	r7, [sp, #0]
 8003cb8:	4633      	mov	r3, r6
 8003cba:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 f9e6 	bl	8004090 <_printf_common>
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	f040 808d 	bne.w	8003de4 <_printf_float+0x1d4>
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295
 8003cce:	b00d      	add	sp, #52	; 0x34
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	4640      	mov	r0, r8
 8003cda:	4649      	mov	r1, r9
 8003cdc:	f7fc fed2 	bl	8000a84 <__aeabi_dcmpun>
 8003ce0:	b110      	cbz	r0, 8003ce8 <_printf_float+0xd8>
 8003ce2:	4a8c      	ldr	r2, [pc, #560]	; (8003f14 <_printf_float+0x304>)
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <_printf_float+0x308>)
 8003ce6:	e7da      	b.n	8003c9e <_printf_float+0x8e>
 8003ce8:	6861      	ldr	r1, [r4, #4]
 8003cea:	1c4b      	adds	r3, r1, #1
 8003cec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003cf0:	a80a      	add	r0, sp, #40	; 0x28
 8003cf2:	d13e      	bne.n	8003d72 <_printf_float+0x162>
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003cfe:	ab09      	add	r3, sp, #36	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	ec49 8b10 	vmov	d0, r8, r9
 8003d06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d0a:	6022      	str	r2, [r4, #0]
 8003d0c:	f8cd a004 	str.w	sl, [sp, #4]
 8003d10:	6861      	ldr	r1, [r4, #4]
 8003d12:	4628      	mov	r0, r5
 8003d14:	f7ff fee8 	bl	8003ae8 <__cvt>
 8003d18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003d1c:	2b47      	cmp	r3, #71	; 0x47
 8003d1e:	4680      	mov	r8, r0
 8003d20:	d109      	bne.n	8003d36 <_printf_float+0x126>
 8003d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d24:	1cd8      	adds	r0, r3, #3
 8003d26:	db02      	blt.n	8003d2e <_printf_float+0x11e>
 8003d28:	6862      	ldr	r2, [r4, #4]
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	dd47      	ble.n	8003dbe <_printf_float+0x1ae>
 8003d2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d32:	fa5f fa8a 	uxtb.w	sl, sl
 8003d36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d3c:	d824      	bhi.n	8003d88 <_printf_float+0x178>
 8003d3e:	3901      	subs	r1, #1
 8003d40:	4652      	mov	r2, sl
 8003d42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d46:	9109      	str	r1, [sp, #36]	; 0x24
 8003d48:	f7ff ff2f 	bl	8003baa <__exponent>
 8003d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d4e:	1813      	adds	r3, r2, r0
 8003d50:	2a01      	cmp	r2, #1
 8003d52:	4681      	mov	r9, r0
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	dc02      	bgt.n	8003d5e <_printf_float+0x14e>
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	07d1      	lsls	r1, r2, #31
 8003d5c:	d501      	bpl.n	8003d62 <_printf_float+0x152>
 8003d5e:	3301      	adds	r3, #1
 8003d60:	6123      	str	r3, [r4, #16]
 8003d62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0a5      	beq.n	8003cb6 <_printf_float+0xa6>
 8003d6a:	232d      	movs	r3, #45	; 0x2d
 8003d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d70:	e7a1      	b.n	8003cb6 <_printf_float+0xa6>
 8003d72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003d76:	f000 8177 	beq.w	8004068 <_printf_float+0x458>
 8003d7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003d7e:	d1bb      	bne.n	8003cf8 <_printf_float+0xe8>
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d1b9      	bne.n	8003cf8 <_printf_float+0xe8>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e7b6      	b.n	8003cf6 <_printf_float+0xe6>
 8003d88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003d8c:	d119      	bne.n	8003dc2 <_printf_float+0x1b2>
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	dd0c      	ble.n	8003dae <_printf_float+0x19e>
 8003d94:	6121      	str	r1, [r4, #16]
 8003d96:	b913      	cbnz	r3, 8003d9e <_printf_float+0x18e>
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	07d2      	lsls	r2, r2, #31
 8003d9c:	d502      	bpl.n	8003da4 <_printf_float+0x194>
 8003d9e:	3301      	adds	r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	6123      	str	r3, [r4, #16]
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	65a3      	str	r3, [r4, #88]	; 0x58
 8003da8:	f04f 0900 	mov.w	r9, #0
 8003dac:	e7d9      	b.n	8003d62 <_printf_float+0x152>
 8003dae:	b913      	cbnz	r3, 8003db6 <_printf_float+0x1a6>
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	07d0      	lsls	r0, r2, #31
 8003db4:	d501      	bpl.n	8003dba <_printf_float+0x1aa>
 8003db6:	3302      	adds	r3, #2
 8003db8:	e7f3      	b.n	8003da2 <_printf_float+0x192>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e7f1      	b.n	8003da2 <_printf_float+0x192>
 8003dbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003dc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	db05      	blt.n	8003dd6 <_printf_float+0x1c6>
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	07d1      	lsls	r1, r2, #31
 8003dd0:	d5e8      	bpl.n	8003da4 <_printf_float+0x194>
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	e7e5      	b.n	8003da2 <_printf_float+0x192>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bfd4      	ite	le
 8003dda:	f1c3 0302 	rsble	r3, r3, #2
 8003dde:	2301      	movgt	r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	e7de      	b.n	8003da2 <_printf_float+0x192>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	055a      	lsls	r2, r3, #21
 8003de8:	d407      	bmi.n	8003dfa <_printf_float+0x1ea>
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	4642      	mov	r2, r8
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	d12b      	bne.n	8003e50 <_printf_float+0x240>
 8003df8:	e767      	b.n	8003cca <_printf_float+0xba>
 8003dfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003dfe:	f240 80dc 	bls.w	8003fba <_printf_float+0x3aa>
 8003e02:	2200      	movs	r2, #0
 8003e04:	2300      	movs	r3, #0
 8003e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e0a:	f7fc fe09 	bl	8000a20 <__aeabi_dcmpeq>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d033      	beq.n	8003e7a <_printf_float+0x26a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	4a41      	ldr	r2, [pc, #260]	; (8003f1c <_printf_float+0x30c>)
 8003e16:	4631      	mov	r1, r6
 8003e18:	4628      	mov	r0, r5
 8003e1a:	47b8      	blx	r7
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	f43f af54 	beq.w	8003cca <_printf_float+0xba>
 8003e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e26:	429a      	cmp	r2, r3
 8003e28:	db02      	blt.n	8003e30 <_printf_float+0x220>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	07d8      	lsls	r0, r3, #31
 8003e2e:	d50f      	bpl.n	8003e50 <_printf_float+0x240>
 8003e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e34:	4631      	mov	r1, r6
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b8      	blx	r7
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	f43f af45 	beq.w	8003cca <_printf_float+0xba>
 8003e40:	f04f 0800 	mov.w	r8, #0
 8003e44:	f104 091a 	add.w	r9, r4, #26
 8003e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	4543      	cmp	r3, r8
 8003e4e:	dc09      	bgt.n	8003e64 <_printf_float+0x254>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	079b      	lsls	r3, r3, #30
 8003e54:	f100 8103 	bmi.w	800405e <_printf_float+0x44e>
 8003e58:	68e0      	ldr	r0, [r4, #12]
 8003e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e5c:	4298      	cmp	r0, r3
 8003e5e:	bfb8      	it	lt
 8003e60:	4618      	movlt	r0, r3
 8003e62:	e734      	b.n	8003cce <_printf_float+0xbe>
 8003e64:	2301      	movs	r3, #1
 8003e66:	464a      	mov	r2, r9
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f af2b 	beq.w	8003cca <_printf_float+0xba>
 8003e74:	f108 0801 	add.w	r8, r8, #1
 8003e78:	e7e6      	b.n	8003e48 <_printf_float+0x238>
 8003e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	dc2b      	bgt.n	8003ed8 <_printf_float+0x2c8>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <_printf_float+0x30c>)
 8003e84:	4631      	mov	r1, r6
 8003e86:	4628      	mov	r0, r5
 8003e88:	47b8      	blx	r7
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	f43f af1d 	beq.w	8003cca <_printf_float+0xba>
 8003e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e92:	b923      	cbnz	r3, 8003e9e <_printf_float+0x28e>
 8003e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e96:	b913      	cbnz	r3, 8003e9e <_printf_float+0x28e>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	07d9      	lsls	r1, r3, #31
 8003e9c:	d5d8      	bpl.n	8003e50 <_printf_float+0x240>
 8003e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ea2:	4631      	mov	r1, r6
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	47b8      	blx	r7
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f43f af0e 	beq.w	8003cca <_printf_float+0xba>
 8003eae:	f04f 0900 	mov.w	r9, #0
 8003eb2:	f104 0a1a 	add.w	sl, r4, #26
 8003eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb8:	425b      	negs	r3, r3
 8003eba:	454b      	cmp	r3, r9
 8003ebc:	dc01      	bgt.n	8003ec2 <_printf_float+0x2b2>
 8003ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ec0:	e794      	b.n	8003dec <_printf_float+0x1dc>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4652      	mov	r2, sl
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f aefc 	beq.w	8003cca <_printf_float+0xba>
 8003ed2:	f109 0901 	add.w	r9, r9, #1
 8003ed6:	e7ee      	b.n	8003eb6 <_printf_float+0x2a6>
 8003ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003edc:	429a      	cmp	r2, r3
 8003ede:	bfa8      	it	ge
 8003ee0:	461a      	movge	r2, r3
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	4691      	mov	r9, r2
 8003ee6:	dd07      	ble.n	8003ef8 <_printf_float+0x2e8>
 8003ee8:	4613      	mov	r3, r2
 8003eea:	4631      	mov	r1, r6
 8003eec:	4642      	mov	r2, r8
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f aee9 	beq.w	8003cca <_printf_float+0xba>
 8003ef8:	f104 031a 	add.w	r3, r4, #26
 8003efc:	f04f 0b00 	mov.w	fp, #0
 8003f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f04:	9306      	str	r3, [sp, #24]
 8003f06:	e015      	b.n	8003f34 <_printf_float+0x324>
 8003f08:	7fefffff 	.word	0x7fefffff
 8003f0c:	08006b77 	.word	0x08006b77
 8003f10:	08006b73 	.word	0x08006b73
 8003f14:	08006b7f 	.word	0x08006b7f
 8003f18:	08006b7b 	.word	0x08006b7b
 8003f1c:	08006b83 	.word	0x08006b83
 8003f20:	2301      	movs	r3, #1
 8003f22:	9a06      	ldr	r2, [sp, #24]
 8003f24:	4631      	mov	r1, r6
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f aecd 	beq.w	8003cca <_printf_float+0xba>
 8003f30:	f10b 0b01 	add.w	fp, fp, #1
 8003f34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003f38:	ebaa 0309 	sub.w	r3, sl, r9
 8003f3c:	455b      	cmp	r3, fp
 8003f3e:	dcef      	bgt.n	8003f20 <_printf_float+0x310>
 8003f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f44:	429a      	cmp	r2, r3
 8003f46:	44d0      	add	r8, sl
 8003f48:	db15      	blt.n	8003f76 <_printf_float+0x366>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	07da      	lsls	r2, r3, #31
 8003f4e:	d412      	bmi.n	8003f76 <_printf_float+0x366>
 8003f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f54:	eba3 020a 	sub.w	r2, r3, sl
 8003f58:	eba3 0a01 	sub.w	sl, r3, r1
 8003f5c:	4592      	cmp	sl, r2
 8003f5e:	bfa8      	it	ge
 8003f60:	4692      	movge	sl, r2
 8003f62:	f1ba 0f00 	cmp.w	sl, #0
 8003f66:	dc0e      	bgt.n	8003f86 <_printf_float+0x376>
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f70:	f104 091a 	add.w	r9, r4, #26
 8003f74:	e019      	b.n	8003faa <_printf_float+0x39a>
 8003f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1e5      	bne.n	8003f50 <_printf_float+0x340>
 8003f84:	e6a1      	b.n	8003cca <_printf_float+0xba>
 8003f86:	4653      	mov	r3, sl
 8003f88:	4642      	mov	r2, r8
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	47b8      	blx	r7
 8003f90:	3001      	adds	r0, #1
 8003f92:	d1e9      	bne.n	8003f68 <_printf_float+0x358>
 8003f94:	e699      	b.n	8003cca <_printf_float+0xba>
 8003f96:	2301      	movs	r3, #1
 8003f98:	464a      	mov	r2, r9
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f43f ae92 	beq.w	8003cca <_printf_float+0xba>
 8003fa6:	f108 0801 	add.w	r8, r8, #1
 8003faa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	eba3 030a 	sub.w	r3, r3, sl
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	dcee      	bgt.n	8003f96 <_printf_float+0x386>
 8003fb8:	e74a      	b.n	8003e50 <_printf_float+0x240>
 8003fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fbc:	2a01      	cmp	r2, #1
 8003fbe:	dc01      	bgt.n	8003fc4 <_printf_float+0x3b4>
 8003fc0:	07db      	lsls	r3, r3, #31
 8003fc2:	d53a      	bpl.n	800403a <_printf_float+0x42a>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	4631      	mov	r1, r6
 8003fca:	4628      	mov	r0, r5
 8003fcc:	47b8      	blx	r7
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f43f ae7b 	beq.w	8003cca <_printf_float+0xba>
 8003fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4628      	mov	r0, r5
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	f108 0801 	add.w	r8, r8, #1
 8003fe4:	f43f ae71 	beq.w	8003cca <_printf_float+0xba>
 8003fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fea:	2200      	movs	r2, #0
 8003fec:	f103 3aff 	add.w	sl, r3, #4294967295
 8003ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f7fc fd13 	bl	8000a20 <__aeabi_dcmpeq>
 8003ffa:	b9c8      	cbnz	r0, 8004030 <_printf_float+0x420>
 8003ffc:	4653      	mov	r3, sl
 8003ffe:	4642      	mov	r2, r8
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	d10e      	bne.n	8004028 <_printf_float+0x418>
 800400a:	e65e      	b.n	8003cca <_printf_float+0xba>
 800400c:	2301      	movs	r3, #1
 800400e:	4652      	mov	r2, sl
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	f43f ae57 	beq.w	8003cca <_printf_float+0xba>
 800401c:	f108 0801 	add.w	r8, r8, #1
 8004020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	4543      	cmp	r3, r8
 8004026:	dcf1      	bgt.n	800400c <_printf_float+0x3fc>
 8004028:	464b      	mov	r3, r9
 800402a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800402e:	e6de      	b.n	8003dee <_printf_float+0x1de>
 8004030:	f04f 0800 	mov.w	r8, #0
 8004034:	f104 0a1a 	add.w	sl, r4, #26
 8004038:	e7f2      	b.n	8004020 <_printf_float+0x410>
 800403a:	2301      	movs	r3, #1
 800403c:	e7df      	b.n	8003ffe <_printf_float+0x3ee>
 800403e:	2301      	movs	r3, #1
 8004040:	464a      	mov	r2, r9
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	47b8      	blx	r7
 8004048:	3001      	adds	r0, #1
 800404a:	f43f ae3e 	beq.w	8003cca <_printf_float+0xba>
 800404e:	f108 0801 	add.w	r8, r8, #1
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	4543      	cmp	r3, r8
 800405a:	dcf0      	bgt.n	800403e <_printf_float+0x42e>
 800405c:	e6fc      	b.n	8003e58 <_printf_float+0x248>
 800405e:	f04f 0800 	mov.w	r8, #0
 8004062:	f104 0919 	add.w	r9, r4, #25
 8004066:	e7f4      	b.n	8004052 <_printf_float+0x442>
 8004068:	2900      	cmp	r1, #0
 800406a:	f43f ae8b 	beq.w	8003d84 <_printf_float+0x174>
 800406e:	2300      	movs	r3, #0
 8004070:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004074:	ab09      	add	r3, sp, #36	; 0x24
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	ec49 8b10 	vmov	d0, r8, r9
 800407c:	6022      	str	r2, [r4, #0]
 800407e:	f8cd a004 	str.w	sl, [sp, #4]
 8004082:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004086:	4628      	mov	r0, r5
 8004088:	f7ff fd2e 	bl	8003ae8 <__cvt>
 800408c:	4680      	mov	r8, r0
 800408e:	e648      	b.n	8003d22 <_printf_float+0x112>

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4691      	mov	r9, r2
 8004096:	461f      	mov	r7, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	f8c9 3000 	str.w	r3, [r9]
 80040aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ae:	4606      	mov	r6, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	b112      	cbz	r2, 80040ba <_printf_common+0x2a>
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8c9 3000 	str.w	r3, [r9]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	0699      	lsls	r1, r3, #26
 80040be:	bf42      	ittt	mi
 80040c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040c4:	3302      	addmi	r3, #2
 80040c6:	f8c9 3000 	strmi.w	r3, [r9]
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	f015 0506 	ands.w	r5, r5, #6
 80040d0:	d107      	bne.n	80040e2 <_printf_common+0x52>
 80040d2:	f104 0a19 	add.w	sl, r4, #25
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	f8d9 2000 	ldr.w	r2, [r9]
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	42ab      	cmp	r3, r5
 80040e0:	dc28      	bgt.n	8004134 <_printf_common+0xa4>
 80040e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	3300      	adds	r3, #0
 80040ea:	bf18      	it	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	0692      	lsls	r2, r2, #26
 80040f0:	d42d      	bmi.n	800414e <_printf_common+0xbe>
 80040f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f6:	4639      	mov	r1, r7
 80040f8:	4630      	mov	r0, r6
 80040fa:	47c0      	blx	r8
 80040fc:	3001      	adds	r0, #1
 80040fe:	d020      	beq.n	8004142 <_printf_common+0xb2>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	68e5      	ldr	r5, [r4, #12]
 8004104:	f8d9 2000 	ldr.w	r2, [r9]
 8004108:	f003 0306 	and.w	r3, r3, #6
 800410c:	2b04      	cmp	r3, #4
 800410e:	bf08      	it	eq
 8004110:	1aad      	subeq	r5, r5, r2
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	6922      	ldr	r2, [r4, #16]
 8004116:	bf0c      	ite	eq
 8004118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800411c:	2500      	movne	r5, #0
 800411e:	4293      	cmp	r3, r2
 8004120:	bfc4      	itt	gt
 8004122:	1a9b      	subgt	r3, r3, r2
 8004124:	18ed      	addgt	r5, r5, r3
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	341a      	adds	r4, #26
 800412c:	454d      	cmp	r5, r9
 800412e:	d11a      	bne.n	8004166 <_printf_common+0xd6>
 8004130:	2000      	movs	r0, #0
 8004132:	e008      	b.n	8004146 <_printf_common+0xb6>
 8004134:	2301      	movs	r3, #1
 8004136:	4652      	mov	r2, sl
 8004138:	4639      	mov	r1, r7
 800413a:	4630      	mov	r0, r6
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d103      	bne.n	800414a <_printf_common+0xba>
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414a:	3501      	adds	r5, #1
 800414c:	e7c3      	b.n	80040d6 <_printf_common+0x46>
 800414e:	18e1      	adds	r1, r4, r3
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	2030      	movs	r0, #48	; 0x30
 8004154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004158:	4422      	add	r2, r4
 800415a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800415e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004162:	3302      	adds	r3, #2
 8004164:	e7c5      	b.n	80040f2 <_printf_common+0x62>
 8004166:	2301      	movs	r3, #1
 8004168:	4622      	mov	r2, r4
 800416a:	4639      	mov	r1, r7
 800416c:	4630      	mov	r0, r6
 800416e:	47c0      	blx	r8
 8004170:	3001      	adds	r0, #1
 8004172:	d0e6      	beq.n	8004142 <_printf_common+0xb2>
 8004174:	f109 0901 	add.w	r9, r9, #1
 8004178:	e7d8      	b.n	800412c <_printf_common+0x9c>

0800417a <__ascii_wctomb>:
 800417a:	b149      	cbz	r1, 8004190 <__ascii_wctomb+0x16>
 800417c:	2aff      	cmp	r2, #255	; 0xff
 800417e:	bf85      	ittet	hi
 8004180:	238a      	movhi	r3, #138	; 0x8a
 8004182:	6003      	strhi	r3, [r0, #0]
 8004184:	700a      	strbls	r2, [r1, #0]
 8004186:	f04f 30ff 	movhi.w	r0, #4294967295
 800418a:	bf98      	it	ls
 800418c:	2001      	movls	r0, #1
 800418e:	4770      	bx	lr
 8004190:	4608      	mov	r0, r1
 8004192:	4770      	bx	lr

08004194 <quorem>:
 8004194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	6903      	ldr	r3, [r0, #16]
 800419a:	690c      	ldr	r4, [r1, #16]
 800419c:	42a3      	cmp	r3, r4
 800419e:	4680      	mov	r8, r0
 80041a0:	f2c0 8082 	blt.w	80042a8 <quorem+0x114>
 80041a4:	3c01      	subs	r4, #1
 80041a6:	f101 0714 	add.w	r7, r1, #20
 80041aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80041ae:	f100 0614 	add.w	r6, r0, #20
 80041b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80041b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80041ba:	eb06 030c 	add.w	r3, r6, ip
 80041be:	3501      	adds	r5, #1
 80041c0:	eb07 090c 	add.w	r9, r7, ip
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80041ca:	b395      	cbz	r5, 8004232 <quorem+0x9e>
 80041cc:	f04f 0a00 	mov.w	sl, #0
 80041d0:	4638      	mov	r0, r7
 80041d2:	46b6      	mov	lr, r6
 80041d4:	46d3      	mov	fp, sl
 80041d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80041da:	b293      	uxth	r3, r2
 80041dc:	fb05 a303 	mla	r3, r5, r3, sl
 80041e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	ebab 0303 	sub.w	r3, fp, r3
 80041ea:	0c12      	lsrs	r2, r2, #16
 80041ec:	f8de b000 	ldr.w	fp, [lr]
 80041f0:	fb05 a202 	mla	r2, r5, r2, sl
 80041f4:	fa13 f38b 	uxtah	r3, r3, fp
 80041f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80041fc:	fa1f fb82 	uxth.w	fp, r2
 8004200:	f8de 2000 	ldr.w	r2, [lr]
 8004204:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800420c:	b29b      	uxth	r3, r3
 800420e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004212:	4581      	cmp	r9, r0
 8004214:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004218:	f84e 3b04 	str.w	r3, [lr], #4
 800421c:	d2db      	bcs.n	80041d6 <quorem+0x42>
 800421e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004222:	b933      	cbnz	r3, 8004232 <quorem+0x9e>
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	3b04      	subs	r3, #4
 8004228:	429e      	cmp	r6, r3
 800422a:	461a      	mov	r2, r3
 800422c:	d330      	bcc.n	8004290 <quorem+0xfc>
 800422e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004232:	4640      	mov	r0, r8
 8004234:	f001 f82a 	bl	800528c <__mcmp>
 8004238:	2800      	cmp	r0, #0
 800423a:	db25      	blt.n	8004288 <quorem+0xf4>
 800423c:	3501      	adds	r5, #1
 800423e:	4630      	mov	r0, r6
 8004240:	f04f 0c00 	mov.w	ip, #0
 8004244:	f857 2b04 	ldr.w	r2, [r7], #4
 8004248:	f8d0 e000 	ldr.w	lr, [r0]
 800424c:	b293      	uxth	r3, r2
 800424e:	ebac 0303 	sub.w	r3, ip, r3
 8004252:	0c12      	lsrs	r2, r2, #16
 8004254:	fa13 f38e 	uxtah	r3, r3, lr
 8004258:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800425c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004260:	b29b      	uxth	r3, r3
 8004262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004266:	45b9      	cmp	r9, r7
 8004268:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800426c:	f840 3b04 	str.w	r3, [r0], #4
 8004270:	d2e8      	bcs.n	8004244 <quorem+0xb0>
 8004272:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004276:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800427a:	b92a      	cbnz	r2, 8004288 <quorem+0xf4>
 800427c:	3b04      	subs	r3, #4
 800427e:	429e      	cmp	r6, r3
 8004280:	461a      	mov	r2, r3
 8004282:	d30b      	bcc.n	800429c <quorem+0x108>
 8004284:	f8c8 4010 	str.w	r4, [r8, #16]
 8004288:	4628      	mov	r0, r5
 800428a:	b003      	add	sp, #12
 800428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	3b04      	subs	r3, #4
 8004294:	2a00      	cmp	r2, #0
 8004296:	d1ca      	bne.n	800422e <quorem+0x9a>
 8004298:	3c01      	subs	r4, #1
 800429a:	e7c5      	b.n	8004228 <quorem+0x94>
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	3b04      	subs	r3, #4
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d1ef      	bne.n	8004284 <quorem+0xf0>
 80042a4:	3c01      	subs	r4, #1
 80042a6:	e7ea      	b.n	800427e <quorem+0xea>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e7ee      	b.n	800428a <quorem+0xf6>
 80042ac:	0000      	movs	r0, r0
	...

080042b0 <_dtoa_r>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	ec57 6b10 	vmov	r6, r7, d0
 80042b8:	b097      	sub	sp, #92	; 0x5c
 80042ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042bc:	9106      	str	r1, [sp, #24]
 80042be:	4604      	mov	r4, r0
 80042c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80042c2:	9312      	str	r3, [sp, #72]	; 0x48
 80042c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80042c8:	e9cd 6700 	strd	r6, r7, [sp]
 80042cc:	b93d      	cbnz	r5, 80042de <_dtoa_r+0x2e>
 80042ce:	2010      	movs	r0, #16
 80042d0:	f000 fdb4 	bl	8004e3c <malloc>
 80042d4:	6260      	str	r0, [r4, #36]	; 0x24
 80042d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80042da:	6005      	str	r5, [r0, #0]
 80042dc:	60c5      	str	r5, [r0, #12]
 80042de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	b151      	cbz	r1, 80042fa <_dtoa_r+0x4a>
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	604a      	str	r2, [r1, #4]
 80042e8:	2301      	movs	r3, #1
 80042ea:	4093      	lsls	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	4620      	mov	r0, r4
 80042f0:	f000 fdeb 	bl	8004eca <_Bfree>
 80042f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	1e3b      	subs	r3, r7, #0
 80042fc:	bfbb      	ittet	lt
 80042fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004302:	9301      	strlt	r3, [sp, #4]
 8004304:	2300      	movge	r3, #0
 8004306:	2201      	movlt	r2, #1
 8004308:	bfac      	ite	ge
 800430a:	f8c8 3000 	strge.w	r3, [r8]
 800430e:	f8c8 2000 	strlt.w	r2, [r8]
 8004312:	4baf      	ldr	r3, [pc, #700]	; (80045d0 <_dtoa_r+0x320>)
 8004314:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004318:	ea33 0308 	bics.w	r3, r3, r8
 800431c:	d114      	bne.n	8004348 <_dtoa_r+0x98>
 800431e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004320:	f242 730f 	movw	r3, #9999	; 0x270f
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	b923      	cbnz	r3, 8004334 <_dtoa_r+0x84>
 800432a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800432e:	2800      	cmp	r0, #0
 8004330:	f000 8542 	beq.w	8004db8 <_dtoa_r+0xb08>
 8004334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004336:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80045e4 <_dtoa_r+0x334>
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8544 	beq.w	8004dc8 <_dtoa_r+0xb18>
 8004340:	f10b 0303 	add.w	r3, fp, #3
 8004344:	f000 bd3e 	b.w	8004dc4 <_dtoa_r+0xb14>
 8004348:	e9dd 6700 	ldrd	r6, r7, [sp]
 800434c:	2200      	movs	r2, #0
 800434e:	2300      	movs	r3, #0
 8004350:	4630      	mov	r0, r6
 8004352:	4639      	mov	r1, r7
 8004354:	f7fc fb64 	bl	8000a20 <__aeabi_dcmpeq>
 8004358:	4681      	mov	r9, r0
 800435a:	b168      	cbz	r0, 8004378 <_dtoa_r+0xc8>
 800435c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800435e:	2301      	movs	r3, #1
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8524 	beq.w	8004db2 <_dtoa_r+0xb02>
 800436a:	4b9a      	ldr	r3, [pc, #616]	; (80045d4 <_dtoa_r+0x324>)
 800436c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800436e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	f000 bd28 	b.w	8004dc8 <_dtoa_r+0xb18>
 8004378:	aa14      	add	r2, sp, #80	; 0x50
 800437a:	a915      	add	r1, sp, #84	; 0x54
 800437c:	ec47 6b10 	vmov	d0, r6, r7
 8004380:	4620      	mov	r0, r4
 8004382:	f000 fffa 	bl	800537a <__d2b>
 8004386:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800438a:	9004      	str	r0, [sp, #16]
 800438c:	2d00      	cmp	r5, #0
 800438e:	d07c      	beq.n	800448a <_dtoa_r+0x1da>
 8004390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004394:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004398:	46b2      	mov	sl, r6
 800439a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800439e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80043a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80043a6:	2200      	movs	r2, #0
 80043a8:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <_dtoa_r+0x328>)
 80043aa:	4650      	mov	r0, sl
 80043ac:	4659      	mov	r1, fp
 80043ae:	f7fb ff17 	bl	80001e0 <__aeabi_dsub>
 80043b2:	a381      	add	r3, pc, #516	; (adr r3, 80045b8 <_dtoa_r+0x308>)
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f8ca 	bl	8000550 <__aeabi_dmul>
 80043bc:	a380      	add	r3, pc, #512	; (adr r3, 80045c0 <_dtoa_r+0x310>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fb ff0f 	bl	80001e4 <__adddf3>
 80043c6:	4606      	mov	r6, r0
 80043c8:	4628      	mov	r0, r5
 80043ca:	460f      	mov	r7, r1
 80043cc:	f7fc f856 	bl	800047c <__aeabi_i2d>
 80043d0:	a37d      	add	r3, pc, #500	; (adr r3, 80045c8 <_dtoa_r+0x318>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f8bb 	bl	8000550 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fb feff 	bl	80001e4 <__adddf3>
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	f7fc fb61 	bl	8000ab0 <__aeabi_d2iz>
 80043ee:	2200      	movs	r2, #0
 80043f0:	4682      	mov	sl, r0
 80043f2:	2300      	movs	r3, #0
 80043f4:	4630      	mov	r0, r6
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc fb1c 	bl	8000a34 <__aeabi_dcmplt>
 80043fc:	b148      	cbz	r0, 8004412 <_dtoa_r+0x162>
 80043fe:	4650      	mov	r0, sl
 8004400:	f7fc f83c 	bl	800047c <__aeabi_i2d>
 8004404:	4632      	mov	r2, r6
 8004406:	463b      	mov	r3, r7
 8004408:	f7fc fb0a 	bl	8000a20 <__aeabi_dcmpeq>
 800440c:	b908      	cbnz	r0, 8004412 <_dtoa_r+0x162>
 800440e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004412:	f1ba 0f16 	cmp.w	sl, #22
 8004416:	d859      	bhi.n	80044cc <_dtoa_r+0x21c>
 8004418:	4970      	ldr	r1, [pc, #448]	; (80045dc <_dtoa_r+0x32c>)
 800441a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800441e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004426:	f7fc fb23 	bl	8000a70 <__aeabi_dcmpgt>
 800442a:	2800      	cmp	r0, #0
 800442c:	d050      	beq.n	80044d0 <_dtoa_r+0x220>
 800442e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004432:	2300      	movs	r3, #0
 8004434:	930f      	str	r3, [sp, #60]	; 0x3c
 8004436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004438:	1b5d      	subs	r5, r3, r5
 800443a:	f1b5 0801 	subs.w	r8, r5, #1
 800443e:	bf49      	itett	mi
 8004440:	f1c5 0301 	rsbmi	r3, r5, #1
 8004444:	2300      	movpl	r3, #0
 8004446:	9305      	strmi	r3, [sp, #20]
 8004448:	f04f 0800 	movmi.w	r8, #0
 800444c:	bf58      	it	pl
 800444e:	9305      	strpl	r3, [sp, #20]
 8004450:	f1ba 0f00 	cmp.w	sl, #0
 8004454:	db3e      	blt.n	80044d4 <_dtoa_r+0x224>
 8004456:	2300      	movs	r3, #0
 8004458:	44d0      	add	r8, sl
 800445a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800445e:	9307      	str	r3, [sp, #28]
 8004460:	9b06      	ldr	r3, [sp, #24]
 8004462:	2b09      	cmp	r3, #9
 8004464:	f200 8090 	bhi.w	8004588 <_dtoa_r+0x2d8>
 8004468:	2b05      	cmp	r3, #5
 800446a:	bfc4      	itt	gt
 800446c:	3b04      	subgt	r3, #4
 800446e:	9306      	strgt	r3, [sp, #24]
 8004470:	9b06      	ldr	r3, [sp, #24]
 8004472:	f1a3 0302 	sub.w	r3, r3, #2
 8004476:	bfcc      	ite	gt
 8004478:	2500      	movgt	r5, #0
 800447a:	2501      	movle	r5, #1
 800447c:	2b03      	cmp	r3, #3
 800447e:	f200 808f 	bhi.w	80045a0 <_dtoa_r+0x2f0>
 8004482:	e8df f003 	tbb	[pc, r3]
 8004486:	7f7d      	.short	0x7f7d
 8004488:	7131      	.short	0x7131
 800448a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800448e:	441d      	add	r5, r3
 8004490:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004494:	2820      	cmp	r0, #32
 8004496:	dd13      	ble.n	80044c0 <_dtoa_r+0x210>
 8004498:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800449c:	9b00      	ldr	r3, [sp, #0]
 800449e:	fa08 f800 	lsl.w	r8, r8, r0
 80044a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80044a6:	fa23 f000 	lsr.w	r0, r3, r0
 80044aa:	ea48 0000 	orr.w	r0, r8, r0
 80044ae:	f7fb ffd5 	bl	800045c <__aeabi_ui2d>
 80044b2:	2301      	movs	r3, #1
 80044b4:	4682      	mov	sl, r0
 80044b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80044ba:	3d01      	subs	r5, #1
 80044bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80044be:	e772      	b.n	80043a6 <_dtoa_r+0xf6>
 80044c0:	9b00      	ldr	r3, [sp, #0]
 80044c2:	f1c0 0020 	rsb	r0, r0, #32
 80044c6:	fa03 f000 	lsl.w	r0, r3, r0
 80044ca:	e7f0      	b.n	80044ae <_dtoa_r+0x1fe>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e7b1      	b.n	8004434 <_dtoa_r+0x184>
 80044d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80044d2:	e7b0      	b.n	8004436 <_dtoa_r+0x186>
 80044d4:	9b05      	ldr	r3, [sp, #20]
 80044d6:	eba3 030a 	sub.w	r3, r3, sl
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	f1ca 0300 	rsb	r3, sl, #0
 80044e0:	9307      	str	r3, [sp, #28]
 80044e2:	2300      	movs	r3, #0
 80044e4:	930e      	str	r3, [sp, #56]	; 0x38
 80044e6:	e7bb      	b.n	8004460 <_dtoa_r+0x1b0>
 80044e8:	2301      	movs	r3, #1
 80044ea:	930a      	str	r3, [sp, #40]	; 0x28
 80044ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	dd59      	ble.n	80045a6 <_dtoa_r+0x2f6>
 80044f2:	9302      	str	r3, [sp, #8]
 80044f4:	4699      	mov	r9, r3
 80044f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80044f8:	2200      	movs	r2, #0
 80044fa:	6072      	str	r2, [r6, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	f102 0014 	add.w	r0, r2, #20
 8004502:	4298      	cmp	r0, r3
 8004504:	6871      	ldr	r1, [r6, #4]
 8004506:	d953      	bls.n	80045b0 <_dtoa_r+0x300>
 8004508:	4620      	mov	r0, r4
 800450a:	f000 fcaa 	bl	8004e62 <_Balloc>
 800450e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004510:	6030      	str	r0, [r6, #0]
 8004512:	f1b9 0f0e 	cmp.w	r9, #14
 8004516:	f8d3 b000 	ldr.w	fp, [r3]
 800451a:	f200 80e6 	bhi.w	80046ea <_dtoa_r+0x43a>
 800451e:	2d00      	cmp	r5, #0
 8004520:	f000 80e3 	beq.w	80046ea <_dtoa_r+0x43a>
 8004524:	ed9d 7b00 	vldr	d7, [sp]
 8004528:	f1ba 0f00 	cmp.w	sl, #0
 800452c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004530:	dd74      	ble.n	800461c <_dtoa_r+0x36c>
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <_dtoa_r+0x32c>)
 8004534:	f00a 030f 	and.w	r3, sl, #15
 8004538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800453c:	ed93 7b00 	vldr	d7, [r3]
 8004540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004544:	06f0      	lsls	r0, r6, #27
 8004546:	ed8d 7b08 	vstr	d7, [sp, #32]
 800454a:	d565      	bpl.n	8004618 <_dtoa_r+0x368>
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <_dtoa_r+0x330>)
 800454e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004552:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004556:	f7fc f925 	bl	80007a4 <__aeabi_ddiv>
 800455a:	e9cd 0100 	strd	r0, r1, [sp]
 800455e:	f006 060f 	and.w	r6, r6, #15
 8004562:	2503      	movs	r5, #3
 8004564:	4f1e      	ldr	r7, [pc, #120]	; (80045e0 <_dtoa_r+0x330>)
 8004566:	e04c      	b.n	8004602 <_dtoa_r+0x352>
 8004568:	2301      	movs	r3, #1
 800456a:	930a      	str	r3, [sp, #40]	; 0x28
 800456c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800456e:	4453      	add	r3, sl
 8004570:	f103 0901 	add.w	r9, r3, #1
 8004574:	9302      	str	r3, [sp, #8]
 8004576:	464b      	mov	r3, r9
 8004578:	2b01      	cmp	r3, #1
 800457a:	bfb8      	it	lt
 800457c:	2301      	movlt	r3, #1
 800457e:	e7ba      	b.n	80044f6 <_dtoa_r+0x246>
 8004580:	2300      	movs	r3, #0
 8004582:	e7b2      	b.n	80044ea <_dtoa_r+0x23a>
 8004584:	2300      	movs	r3, #0
 8004586:	e7f0      	b.n	800456a <_dtoa_r+0x2ba>
 8004588:	2501      	movs	r5, #1
 800458a:	2300      	movs	r3, #0
 800458c:	9306      	str	r3, [sp, #24]
 800458e:	950a      	str	r5, [sp, #40]	; 0x28
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	9302      	str	r3, [sp, #8]
 8004596:	4699      	mov	r9, r3
 8004598:	2200      	movs	r2, #0
 800459a:	2312      	movs	r3, #18
 800459c:	920b      	str	r2, [sp, #44]	; 0x2c
 800459e:	e7aa      	b.n	80044f6 <_dtoa_r+0x246>
 80045a0:	2301      	movs	r3, #1
 80045a2:	930a      	str	r3, [sp, #40]	; 0x28
 80045a4:	e7f4      	b.n	8004590 <_dtoa_r+0x2e0>
 80045a6:	2301      	movs	r3, #1
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	4699      	mov	r9, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	e7f5      	b.n	800459c <_dtoa_r+0x2ec>
 80045b0:	3101      	adds	r1, #1
 80045b2:	6071      	str	r1, [r6, #4]
 80045b4:	0052      	lsls	r2, r2, #1
 80045b6:	e7a2      	b.n	80044fe <_dtoa_r+0x24e>
 80045b8:	636f4361 	.word	0x636f4361
 80045bc:	3fd287a7 	.word	0x3fd287a7
 80045c0:	8b60c8b3 	.word	0x8b60c8b3
 80045c4:	3fc68a28 	.word	0x3fc68a28
 80045c8:	509f79fb 	.word	0x509f79fb
 80045cc:	3fd34413 	.word	0x3fd34413
 80045d0:	7ff00000 	.word	0x7ff00000
 80045d4:	08006b84 	.word	0x08006b84
 80045d8:	3ff80000 	.word	0x3ff80000
 80045dc:	08006cc0 	.word	0x08006cc0
 80045e0:	08006c98 	.word	0x08006c98
 80045e4:	08006c8f 	.word	0x08006c8f
 80045e8:	07f1      	lsls	r1, r6, #31
 80045ea:	d508      	bpl.n	80045fe <_dtoa_r+0x34e>
 80045ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80045f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f4:	f7fb ffac 	bl	8000550 <__aeabi_dmul>
 80045f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045fc:	3501      	adds	r5, #1
 80045fe:	1076      	asrs	r6, r6, #1
 8004600:	3708      	adds	r7, #8
 8004602:	2e00      	cmp	r6, #0
 8004604:	d1f0      	bne.n	80045e8 <_dtoa_r+0x338>
 8004606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800460a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800460e:	f7fc f8c9 	bl	80007a4 <__aeabi_ddiv>
 8004612:	e9cd 0100 	strd	r0, r1, [sp]
 8004616:	e01a      	b.n	800464e <_dtoa_r+0x39e>
 8004618:	2502      	movs	r5, #2
 800461a:	e7a3      	b.n	8004564 <_dtoa_r+0x2b4>
 800461c:	f000 80a0 	beq.w	8004760 <_dtoa_r+0x4b0>
 8004620:	f1ca 0600 	rsb	r6, sl, #0
 8004624:	4b9f      	ldr	r3, [pc, #636]	; (80048a4 <_dtoa_r+0x5f4>)
 8004626:	4fa0      	ldr	r7, [pc, #640]	; (80048a8 <_dtoa_r+0x5f8>)
 8004628:	f006 020f 	and.w	r2, r6, #15
 800462c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004638:	f7fb ff8a 	bl	8000550 <__aeabi_dmul>
 800463c:	e9cd 0100 	strd	r0, r1, [sp]
 8004640:	1136      	asrs	r6, r6, #4
 8004642:	2300      	movs	r3, #0
 8004644:	2502      	movs	r5, #2
 8004646:	2e00      	cmp	r6, #0
 8004648:	d17f      	bne.n	800474a <_dtoa_r+0x49a>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e1      	bne.n	8004612 <_dtoa_r+0x362>
 800464e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8087 	beq.w	8004764 <_dtoa_r+0x4b4>
 8004656:	e9dd 6700 	ldrd	r6, r7, [sp]
 800465a:	2200      	movs	r2, #0
 800465c:	4b93      	ldr	r3, [pc, #588]	; (80048ac <_dtoa_r+0x5fc>)
 800465e:	4630      	mov	r0, r6
 8004660:	4639      	mov	r1, r7
 8004662:	f7fc f9e7 	bl	8000a34 <__aeabi_dcmplt>
 8004666:	2800      	cmp	r0, #0
 8004668:	d07c      	beq.n	8004764 <_dtoa_r+0x4b4>
 800466a:	f1b9 0f00 	cmp.w	r9, #0
 800466e:	d079      	beq.n	8004764 <_dtoa_r+0x4b4>
 8004670:	9b02      	ldr	r3, [sp, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	dd35      	ble.n	80046e2 <_dtoa_r+0x432>
 8004676:	f10a 33ff 	add.w	r3, sl, #4294967295
 800467a:	9308      	str	r3, [sp, #32]
 800467c:	4639      	mov	r1, r7
 800467e:	2200      	movs	r2, #0
 8004680:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <_dtoa_r+0x600>)
 8004682:	4630      	mov	r0, r6
 8004684:	f7fb ff64 	bl	8000550 <__aeabi_dmul>
 8004688:	e9cd 0100 	strd	r0, r1, [sp]
 800468c:	9f02      	ldr	r7, [sp, #8]
 800468e:	3501      	adds	r5, #1
 8004690:	4628      	mov	r0, r5
 8004692:	f7fb fef3 	bl	800047c <__aeabi_i2d>
 8004696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469a:	f7fb ff59 	bl	8000550 <__aeabi_dmul>
 800469e:	2200      	movs	r2, #0
 80046a0:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <_dtoa_r+0x604>)
 80046a2:	f7fb fd9f 	bl	80001e4 <__adddf3>
 80046a6:	4605      	mov	r5, r0
 80046a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80046ac:	2f00      	cmp	r7, #0
 80046ae:	d15d      	bne.n	800476c <_dtoa_r+0x4bc>
 80046b0:	2200      	movs	r2, #0
 80046b2:	4b81      	ldr	r3, [pc, #516]	; (80048b8 <_dtoa_r+0x608>)
 80046b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046b8:	f7fb fd92 	bl	80001e0 <__aeabi_dsub>
 80046bc:	462a      	mov	r2, r5
 80046be:	4633      	mov	r3, r6
 80046c0:	e9cd 0100 	strd	r0, r1, [sp]
 80046c4:	f7fc f9d4 	bl	8000a70 <__aeabi_dcmpgt>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f040 8288 	bne.w	8004bde <_dtoa_r+0x92e>
 80046ce:	462a      	mov	r2, r5
 80046d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046d8:	f7fc f9ac 	bl	8000a34 <__aeabi_dcmplt>
 80046dc:	2800      	cmp	r0, #0
 80046de:	f040 827c 	bne.w	8004bda <_dtoa_r+0x92a>
 80046e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046e6:	e9cd 2300 	strd	r2, r3, [sp]
 80046ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f2c0 8150 	blt.w	8004992 <_dtoa_r+0x6e2>
 80046f2:	f1ba 0f0e 	cmp.w	sl, #14
 80046f6:	f300 814c 	bgt.w	8004992 <_dtoa_r+0x6e2>
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <_dtoa_r+0x5f4>)
 80046fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004700:	ed93 7b00 	vldr	d7, [r3]
 8004704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	ed8d 7b02 	vstr	d7, [sp, #8]
 800470c:	f280 80d8 	bge.w	80048c0 <_dtoa_r+0x610>
 8004710:	f1b9 0f00 	cmp.w	r9, #0
 8004714:	f300 80d4 	bgt.w	80048c0 <_dtoa_r+0x610>
 8004718:	f040 825e 	bne.w	8004bd8 <_dtoa_r+0x928>
 800471c:	2200      	movs	r2, #0
 800471e:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <_dtoa_r+0x608>)
 8004720:	ec51 0b17 	vmov	r0, r1, d7
 8004724:	f7fb ff14 	bl	8000550 <__aeabi_dmul>
 8004728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800472c:	f7fc f996 	bl	8000a5c <__aeabi_dcmpge>
 8004730:	464f      	mov	r7, r9
 8004732:	464e      	mov	r6, r9
 8004734:	2800      	cmp	r0, #0
 8004736:	f040 8234 	bne.w	8004ba2 <_dtoa_r+0x8f2>
 800473a:	2331      	movs	r3, #49	; 0x31
 800473c:	f10b 0501 	add.w	r5, fp, #1
 8004740:	f88b 3000 	strb.w	r3, [fp]
 8004744:	f10a 0a01 	add.w	sl, sl, #1
 8004748:	e22f      	b.n	8004baa <_dtoa_r+0x8fa>
 800474a:	07f2      	lsls	r2, r6, #31
 800474c:	d505      	bpl.n	800475a <_dtoa_r+0x4aa>
 800474e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004752:	f7fb fefd 	bl	8000550 <__aeabi_dmul>
 8004756:	3501      	adds	r5, #1
 8004758:	2301      	movs	r3, #1
 800475a:	1076      	asrs	r6, r6, #1
 800475c:	3708      	adds	r7, #8
 800475e:	e772      	b.n	8004646 <_dtoa_r+0x396>
 8004760:	2502      	movs	r5, #2
 8004762:	e774      	b.n	800464e <_dtoa_r+0x39e>
 8004764:	f8cd a020 	str.w	sl, [sp, #32]
 8004768:	464f      	mov	r7, r9
 800476a:	e791      	b.n	8004690 <_dtoa_r+0x3e0>
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <_dtoa_r+0x5f4>)
 800476e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004772:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d047      	beq.n	800480c <_dtoa_r+0x55c>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	2000      	movs	r0, #0
 8004782:	494e      	ldr	r1, [pc, #312]	; (80048bc <_dtoa_r+0x60c>)
 8004784:	f7fc f80e 	bl	80007a4 <__aeabi_ddiv>
 8004788:	462a      	mov	r2, r5
 800478a:	4633      	mov	r3, r6
 800478c:	f7fb fd28 	bl	80001e0 <__aeabi_dsub>
 8004790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004794:	465d      	mov	r5, fp
 8004796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800479a:	f7fc f989 	bl	8000ab0 <__aeabi_d2iz>
 800479e:	4606      	mov	r6, r0
 80047a0:	f7fb fe6c 	bl	800047c <__aeabi_i2d>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047ac:	f7fb fd18 	bl	80001e0 <__aeabi_dsub>
 80047b0:	3630      	adds	r6, #48	; 0x30
 80047b2:	f805 6b01 	strb.w	r6, [r5], #1
 80047b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047ba:	e9cd 0100 	strd	r0, r1, [sp]
 80047be:	f7fc f939 	bl	8000a34 <__aeabi_dcmplt>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d163      	bne.n	800488e <_dtoa_r+0x5de>
 80047c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047ca:	2000      	movs	r0, #0
 80047cc:	4937      	ldr	r1, [pc, #220]	; (80048ac <_dtoa_r+0x5fc>)
 80047ce:	f7fb fd07 	bl	80001e0 <__aeabi_dsub>
 80047d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047d6:	f7fc f92d 	bl	8000a34 <__aeabi_dcmplt>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 80b7 	bne.w	800494e <_dtoa_r+0x69e>
 80047e0:	eba5 030b 	sub.w	r3, r5, fp
 80047e4:	429f      	cmp	r7, r3
 80047e6:	f77f af7c 	ble.w	80046e2 <_dtoa_r+0x432>
 80047ea:	2200      	movs	r2, #0
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <_dtoa_r+0x600>)
 80047ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047f2:	f7fb fead 	bl	8000550 <__aeabi_dmul>
 80047f6:	2200      	movs	r2, #0
 80047f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <_dtoa_r+0x600>)
 80047fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004802:	f7fb fea5 	bl	8000550 <__aeabi_dmul>
 8004806:	e9cd 0100 	strd	r0, r1, [sp]
 800480a:	e7c4      	b.n	8004796 <_dtoa_r+0x4e6>
 800480c:	462a      	mov	r2, r5
 800480e:	4633      	mov	r3, r6
 8004810:	f7fb fe9e 	bl	8000550 <__aeabi_dmul>
 8004814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004818:	eb0b 0507 	add.w	r5, fp, r7
 800481c:	465e      	mov	r6, fp
 800481e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004822:	f7fc f945 	bl	8000ab0 <__aeabi_d2iz>
 8004826:	4607      	mov	r7, r0
 8004828:	f7fb fe28 	bl	800047c <__aeabi_i2d>
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004836:	f7fb fcd3 	bl	80001e0 <__aeabi_dsub>
 800483a:	f806 7b01 	strb.w	r7, [r6], #1
 800483e:	42ae      	cmp	r6, r5
 8004840:	e9cd 0100 	strd	r0, r1, [sp]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	d126      	bne.n	8004898 <_dtoa_r+0x5e8>
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <_dtoa_r+0x60c>)
 800484c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004850:	f7fb fcc8 	bl	80001e4 <__adddf3>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800485c:	f7fc f908 	bl	8000a70 <__aeabi_dcmpgt>
 8004860:	2800      	cmp	r0, #0
 8004862:	d174      	bne.n	800494e <_dtoa_r+0x69e>
 8004864:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004868:	2000      	movs	r0, #0
 800486a:	4914      	ldr	r1, [pc, #80]	; (80048bc <_dtoa_r+0x60c>)
 800486c:	f7fb fcb8 	bl	80001e0 <__aeabi_dsub>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004878:	f7fc f8dc 	bl	8000a34 <__aeabi_dcmplt>
 800487c:	2800      	cmp	r0, #0
 800487e:	f43f af30 	beq.w	80046e2 <_dtoa_r+0x432>
 8004882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	f105 32ff 	add.w	r2, r5, #4294967295
 800488c:	d002      	beq.n	8004894 <_dtoa_r+0x5e4>
 800488e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004892:	e04a      	b.n	800492a <_dtoa_r+0x67a>
 8004894:	4615      	mov	r5, r2
 8004896:	e7f4      	b.n	8004882 <_dtoa_r+0x5d2>
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <_dtoa_r+0x600>)
 800489a:	f7fb fe59 	bl	8000550 <__aeabi_dmul>
 800489e:	e9cd 0100 	strd	r0, r1, [sp]
 80048a2:	e7bc      	b.n	800481e <_dtoa_r+0x56e>
 80048a4:	08006cc0 	.word	0x08006cc0
 80048a8:	08006c98 	.word	0x08006c98
 80048ac:	3ff00000 	.word	0x3ff00000
 80048b0:	40240000 	.word	0x40240000
 80048b4:	401c0000 	.word	0x401c0000
 80048b8:	40140000 	.word	0x40140000
 80048bc:	3fe00000 	.word	0x3fe00000
 80048c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80048c4:	465d      	mov	r5, fp
 80048c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048ca:	4630      	mov	r0, r6
 80048cc:	4639      	mov	r1, r7
 80048ce:	f7fb ff69 	bl	80007a4 <__aeabi_ddiv>
 80048d2:	f7fc f8ed 	bl	8000ab0 <__aeabi_d2iz>
 80048d6:	4680      	mov	r8, r0
 80048d8:	f7fb fdd0 	bl	800047c <__aeabi_i2d>
 80048dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048e0:	f7fb fe36 	bl	8000550 <__aeabi_dmul>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80048f0:	f7fb fc76 	bl	80001e0 <__aeabi_dsub>
 80048f4:	f805 6b01 	strb.w	r6, [r5], #1
 80048f8:	eba5 060b 	sub.w	r6, r5, fp
 80048fc:	45b1      	cmp	r9, r6
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	d139      	bne.n	8004978 <_dtoa_r+0x6c8>
 8004904:	f7fb fc6e 	bl	80001e4 <__adddf3>
 8004908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	f7fc f8ae 	bl	8000a70 <__aeabi_dcmpgt>
 8004914:	b9c8      	cbnz	r0, 800494a <_dtoa_r+0x69a>
 8004916:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	f7fc f87f 	bl	8000a20 <__aeabi_dcmpeq>
 8004922:	b110      	cbz	r0, 800492a <_dtoa_r+0x67a>
 8004924:	f018 0f01 	tst.w	r8, #1
 8004928:	d10f      	bne.n	800494a <_dtoa_r+0x69a>
 800492a:	9904      	ldr	r1, [sp, #16]
 800492c:	4620      	mov	r0, r4
 800492e:	f000 facc 	bl	8004eca <_Bfree>
 8004932:	2300      	movs	r3, #0
 8004934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004936:	702b      	strb	r3, [r5, #0]
 8004938:	f10a 0301 	add.w	r3, sl, #1
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8241 	beq.w	8004dc8 <_dtoa_r+0xb18>
 8004946:	601d      	str	r5, [r3, #0]
 8004948:	e23e      	b.n	8004dc8 <_dtoa_r+0xb18>
 800494a:	f8cd a020 	str.w	sl, [sp, #32]
 800494e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004952:	2a39      	cmp	r2, #57	; 0x39
 8004954:	f105 33ff 	add.w	r3, r5, #4294967295
 8004958:	d108      	bne.n	800496c <_dtoa_r+0x6bc>
 800495a:	459b      	cmp	fp, r3
 800495c:	d10a      	bne.n	8004974 <_dtoa_r+0x6c4>
 800495e:	9b08      	ldr	r3, [sp, #32]
 8004960:	3301      	adds	r3, #1
 8004962:	9308      	str	r3, [sp, #32]
 8004964:	2330      	movs	r3, #48	; 0x30
 8004966:	f88b 3000 	strb.w	r3, [fp]
 800496a:	465b      	mov	r3, fp
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	3201      	adds	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e78c      	b.n	800488e <_dtoa_r+0x5de>
 8004974:	461d      	mov	r5, r3
 8004976:	e7ea      	b.n	800494e <_dtoa_r+0x69e>
 8004978:	2200      	movs	r2, #0
 800497a:	4b9b      	ldr	r3, [pc, #620]	; (8004be8 <_dtoa_r+0x938>)
 800497c:	f7fb fde8 	bl	8000550 <__aeabi_dmul>
 8004980:	2200      	movs	r2, #0
 8004982:	2300      	movs	r3, #0
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	f7fc f84a 	bl	8000a20 <__aeabi_dcmpeq>
 800498c:	2800      	cmp	r0, #0
 800498e:	d09a      	beq.n	80048c6 <_dtoa_r+0x616>
 8004990:	e7cb      	b.n	800492a <_dtoa_r+0x67a>
 8004992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004994:	2a00      	cmp	r2, #0
 8004996:	f000 808b 	beq.w	8004ab0 <_dtoa_r+0x800>
 800499a:	9a06      	ldr	r2, [sp, #24]
 800499c:	2a01      	cmp	r2, #1
 800499e:	dc6e      	bgt.n	8004a7e <_dtoa_r+0x7ce>
 80049a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d067      	beq.n	8004a76 <_dtoa_r+0x7c6>
 80049a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049aa:	9f07      	ldr	r7, [sp, #28]
 80049ac:	9d05      	ldr	r5, [sp, #20]
 80049ae:	9a05      	ldr	r2, [sp, #20]
 80049b0:	2101      	movs	r1, #1
 80049b2:	441a      	add	r2, r3
 80049b4:	4620      	mov	r0, r4
 80049b6:	9205      	str	r2, [sp, #20]
 80049b8:	4498      	add	r8, r3
 80049ba:	f000 fb26 	bl	800500a <__i2b>
 80049be:	4606      	mov	r6, r0
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	dd0c      	ble.n	80049de <_dtoa_r+0x72e>
 80049c4:	f1b8 0f00 	cmp.w	r8, #0
 80049c8:	dd09      	ble.n	80049de <_dtoa_r+0x72e>
 80049ca:	4545      	cmp	r5, r8
 80049cc:	9a05      	ldr	r2, [sp, #20]
 80049ce:	462b      	mov	r3, r5
 80049d0:	bfa8      	it	ge
 80049d2:	4643      	movge	r3, r8
 80049d4:	1ad2      	subs	r2, r2, r3
 80049d6:	9205      	str	r2, [sp, #20]
 80049d8:	1aed      	subs	r5, r5, r3
 80049da:	eba8 0803 	sub.w	r8, r8, r3
 80049de:	9b07      	ldr	r3, [sp, #28]
 80049e0:	b1eb      	cbz	r3, 8004a1e <_dtoa_r+0x76e>
 80049e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d067      	beq.n	8004ab8 <_dtoa_r+0x808>
 80049e8:	b18f      	cbz	r7, 8004a0e <_dtoa_r+0x75e>
 80049ea:	4631      	mov	r1, r6
 80049ec:	463a      	mov	r2, r7
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 fbaa 	bl	8005148 <__pow5mult>
 80049f4:	9a04      	ldr	r2, [sp, #16]
 80049f6:	4601      	mov	r1, r0
 80049f8:	4606      	mov	r6, r0
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 fb0e 	bl	800501c <__multiply>
 8004a00:	9904      	ldr	r1, [sp, #16]
 8004a02:	9008      	str	r0, [sp, #32]
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 fa60 	bl	8004eca <_Bfree>
 8004a0a:	9b08      	ldr	r3, [sp, #32]
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	9b07      	ldr	r3, [sp, #28]
 8004a10:	1bda      	subs	r2, r3, r7
 8004a12:	d004      	beq.n	8004a1e <_dtoa_r+0x76e>
 8004a14:	9904      	ldr	r1, [sp, #16]
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 fb96 	bl	8005148 <__pow5mult>
 8004a1c:	9004      	str	r0, [sp, #16]
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 faf2 	bl	800500a <__i2b>
 8004a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a28:	4607      	mov	r7, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 81d0 	beq.w	8004dd0 <_dtoa_r+0xb20>
 8004a30:	461a      	mov	r2, r3
 8004a32:	4601      	mov	r1, r0
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 fb87 	bl	8005148 <__pow5mult>
 8004a3a:	9b06      	ldr	r3, [sp, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	4607      	mov	r7, r0
 8004a40:	dc40      	bgt.n	8004ac4 <_dtoa_r+0x814>
 8004a42:	9b00      	ldr	r3, [sp, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d139      	bne.n	8004abc <_dtoa_r+0x80c>
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d136      	bne.n	8004ac0 <_dtoa_r+0x810>
 8004a52:	9b01      	ldr	r3, [sp, #4]
 8004a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a58:	0d1b      	lsrs	r3, r3, #20
 8004a5a:	051b      	lsls	r3, r3, #20
 8004a5c:	b12b      	cbz	r3, 8004a6a <_dtoa_r+0x7ba>
 8004a5e:	9b05      	ldr	r3, [sp, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	9305      	str	r3, [sp, #20]
 8004a64:	f108 0801 	add.w	r8, r8, #1
 8004a68:	2301      	movs	r3, #1
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d12a      	bne.n	8004ac8 <_dtoa_r+0x818>
 8004a72:	2001      	movs	r0, #1
 8004a74:	e030      	b.n	8004ad8 <_dtoa_r+0x828>
 8004a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a7c:	e795      	b.n	80049aa <_dtoa_r+0x6fa>
 8004a7e:	9b07      	ldr	r3, [sp, #28]
 8004a80:	f109 37ff 	add.w	r7, r9, #4294967295
 8004a84:	42bb      	cmp	r3, r7
 8004a86:	bfbf      	itttt	lt
 8004a88:	9b07      	ldrlt	r3, [sp, #28]
 8004a8a:	9707      	strlt	r7, [sp, #28]
 8004a8c:	1afa      	sublt	r2, r7, r3
 8004a8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004a90:	bfbb      	ittet	lt
 8004a92:	189b      	addlt	r3, r3, r2
 8004a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004a96:	1bdf      	subge	r7, r3, r7
 8004a98:	2700      	movlt	r7, #0
 8004a9a:	f1b9 0f00 	cmp.w	r9, #0
 8004a9e:	bfb5      	itete	lt
 8004aa0:	9b05      	ldrlt	r3, [sp, #20]
 8004aa2:	9d05      	ldrge	r5, [sp, #20]
 8004aa4:	eba3 0509 	sublt.w	r5, r3, r9
 8004aa8:	464b      	movge	r3, r9
 8004aaa:	bfb8      	it	lt
 8004aac:	2300      	movlt	r3, #0
 8004aae:	e77e      	b.n	80049ae <_dtoa_r+0x6fe>
 8004ab0:	9f07      	ldr	r7, [sp, #28]
 8004ab2:	9d05      	ldr	r5, [sp, #20]
 8004ab4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004ab6:	e783      	b.n	80049c0 <_dtoa_r+0x710>
 8004ab8:	9a07      	ldr	r2, [sp, #28]
 8004aba:	e7ab      	b.n	8004a14 <_dtoa_r+0x764>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e7d4      	b.n	8004a6a <_dtoa_r+0x7ba>
 8004ac0:	9b00      	ldr	r3, [sp, #0]
 8004ac2:	e7d2      	b.n	8004a6a <_dtoa_r+0x7ba>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	9307      	str	r3, [sp, #28]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004ace:	6918      	ldr	r0, [r3, #16]
 8004ad0:	f000 fa4d 	bl	8004f6e <__hi0bits>
 8004ad4:	f1c0 0020 	rsb	r0, r0, #32
 8004ad8:	4440      	add	r0, r8
 8004ada:	f010 001f 	ands.w	r0, r0, #31
 8004ade:	d047      	beq.n	8004b70 <_dtoa_r+0x8c0>
 8004ae0:	f1c0 0320 	rsb	r3, r0, #32
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	dd3b      	ble.n	8004b60 <_dtoa_r+0x8b0>
 8004ae8:	9b05      	ldr	r3, [sp, #20]
 8004aea:	f1c0 001c 	rsb	r0, r0, #28
 8004aee:	4403      	add	r3, r0
 8004af0:	9305      	str	r3, [sp, #20]
 8004af2:	4405      	add	r5, r0
 8004af4:	4480      	add	r8, r0
 8004af6:	9b05      	ldr	r3, [sp, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dd05      	ble.n	8004b08 <_dtoa_r+0x858>
 8004afc:	461a      	mov	r2, r3
 8004afe:	9904      	ldr	r1, [sp, #16]
 8004b00:	4620      	mov	r0, r4
 8004b02:	f000 fb6f 	bl	80051e4 <__lshift>
 8004b06:	9004      	str	r0, [sp, #16]
 8004b08:	f1b8 0f00 	cmp.w	r8, #0
 8004b0c:	dd05      	ble.n	8004b1a <_dtoa_r+0x86a>
 8004b0e:	4639      	mov	r1, r7
 8004b10:	4642      	mov	r2, r8
 8004b12:	4620      	mov	r0, r4
 8004b14:	f000 fb66 	bl	80051e4 <__lshift>
 8004b18:	4607      	mov	r7, r0
 8004b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b1c:	b353      	cbz	r3, 8004b74 <_dtoa_r+0x8c4>
 8004b1e:	4639      	mov	r1, r7
 8004b20:	9804      	ldr	r0, [sp, #16]
 8004b22:	f000 fbb3 	bl	800528c <__mcmp>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	da24      	bge.n	8004b74 <_dtoa_r+0x8c4>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	220a      	movs	r2, #10
 8004b2e:	9904      	ldr	r1, [sp, #16]
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 f9e1 	bl	8004ef8 <__multadd>
 8004b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b38:	9004      	str	r0, [sp, #16]
 8004b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 814d 	beq.w	8004dde <_dtoa_r+0xb2e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	4631      	mov	r1, r6
 8004b48:	220a      	movs	r2, #10
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 f9d4 	bl	8004ef8 <__multadd>
 8004b50:	9b02      	ldr	r3, [sp, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	4606      	mov	r6, r0
 8004b56:	dc4f      	bgt.n	8004bf8 <_dtoa_r+0x948>
 8004b58:	9b06      	ldr	r3, [sp, #24]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	dd4c      	ble.n	8004bf8 <_dtoa_r+0x948>
 8004b5e:	e011      	b.n	8004b84 <_dtoa_r+0x8d4>
 8004b60:	d0c9      	beq.n	8004af6 <_dtoa_r+0x846>
 8004b62:	9a05      	ldr	r2, [sp, #20]
 8004b64:	331c      	adds	r3, #28
 8004b66:	441a      	add	r2, r3
 8004b68:	9205      	str	r2, [sp, #20]
 8004b6a:	441d      	add	r5, r3
 8004b6c:	4498      	add	r8, r3
 8004b6e:	e7c2      	b.n	8004af6 <_dtoa_r+0x846>
 8004b70:	4603      	mov	r3, r0
 8004b72:	e7f6      	b.n	8004b62 <_dtoa_r+0x8b2>
 8004b74:	f1b9 0f00 	cmp.w	r9, #0
 8004b78:	dc38      	bgt.n	8004bec <_dtoa_r+0x93c>
 8004b7a:	9b06      	ldr	r3, [sp, #24]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	dd35      	ble.n	8004bec <_dtoa_r+0x93c>
 8004b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b84:	9b02      	ldr	r3, [sp, #8]
 8004b86:	b963      	cbnz	r3, 8004ba2 <_dtoa_r+0x8f2>
 8004b88:	4639      	mov	r1, r7
 8004b8a:	2205      	movs	r2, #5
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 f9b3 	bl	8004ef8 <__multadd>
 8004b92:	4601      	mov	r1, r0
 8004b94:	4607      	mov	r7, r0
 8004b96:	9804      	ldr	r0, [sp, #16]
 8004b98:	f000 fb78 	bl	800528c <__mcmp>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f73f adcc 	bgt.w	800473a <_dtoa_r+0x48a>
 8004ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ba4:	465d      	mov	r5, fp
 8004ba6:	ea6f 0a03 	mvn.w	sl, r3
 8004baa:	f04f 0900 	mov.w	r9, #0
 8004bae:	4639      	mov	r1, r7
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f000 f98a 	bl	8004eca <_Bfree>
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	f43f aeb7 	beq.w	800492a <_dtoa_r+0x67a>
 8004bbc:	f1b9 0f00 	cmp.w	r9, #0
 8004bc0:	d005      	beq.n	8004bce <_dtoa_r+0x91e>
 8004bc2:	45b1      	cmp	r9, r6
 8004bc4:	d003      	beq.n	8004bce <_dtoa_r+0x91e>
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 f97e 	bl	8004eca <_Bfree>
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f000 f97a 	bl	8004eca <_Bfree>
 8004bd6:	e6a8      	b.n	800492a <_dtoa_r+0x67a>
 8004bd8:	2700      	movs	r7, #0
 8004bda:	463e      	mov	r6, r7
 8004bdc:	e7e1      	b.n	8004ba2 <_dtoa_r+0x8f2>
 8004bde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004be2:	463e      	mov	r6, r7
 8004be4:	e5a9      	b.n	800473a <_dtoa_r+0x48a>
 8004be6:	bf00      	nop
 8004be8:	40240000 	.word	0x40240000
 8004bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80fa 	beq.w	8004dec <_dtoa_r+0xb3c>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	dd05      	ble.n	8004c08 <_dtoa_r+0x958>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 faef 	bl	80051e4 <__lshift>
 8004c06:	4606      	mov	r6, r0
 8004c08:	9b07      	ldr	r3, [sp, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04c      	beq.n	8004ca8 <_dtoa_r+0x9f8>
 8004c0e:	6871      	ldr	r1, [r6, #4]
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f926 	bl	8004e62 <_Balloc>
 8004c16:	6932      	ldr	r2, [r6, #16]
 8004c18:	3202      	adds	r2, #2
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	f106 010c 	add.w	r1, r6, #12
 8004c22:	300c      	adds	r0, #12
 8004c24:	f000 f912 	bl	8004e4c <memcpy>
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 fad9 	bl	80051e4 <__lshift>
 8004c32:	9b00      	ldr	r3, [sp, #0]
 8004c34:	f8cd b014 	str.w	fp, [sp, #20]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	46b1      	mov	r9, r6
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	4606      	mov	r6, r0
 8004c42:	4639      	mov	r1, r7
 8004c44:	9804      	ldr	r0, [sp, #16]
 8004c46:	f7ff faa5 	bl	8004194 <quorem>
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c52:	9804      	ldr	r0, [sp, #16]
 8004c54:	f000 fb1a 	bl	800528c <__mcmp>
 8004c58:	4632      	mov	r2, r6
 8004c5a:	9000      	str	r0, [sp, #0]
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 fb2e 	bl	80052c0 <__mdiff>
 8004c64:	68c3      	ldr	r3, [r0, #12]
 8004c66:	4602      	mov	r2, r0
 8004c68:	bb03      	cbnz	r3, 8004cac <_dtoa_r+0x9fc>
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	9008      	str	r0, [sp, #32]
 8004c6e:	9804      	ldr	r0, [sp, #16]
 8004c70:	f000 fb0c 	bl	800528c <__mcmp>
 8004c74:	9a08      	ldr	r2, [sp, #32]
 8004c76:	4603      	mov	r3, r0
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	9308      	str	r3, [sp, #32]
 8004c7e:	f000 f924 	bl	8004eca <_Bfree>
 8004c82:	9b08      	ldr	r3, [sp, #32]
 8004c84:	b9a3      	cbnz	r3, 8004cb0 <_dtoa_r+0xa00>
 8004c86:	9a06      	ldr	r2, [sp, #24]
 8004c88:	b992      	cbnz	r2, 8004cb0 <_dtoa_r+0xa00>
 8004c8a:	9a07      	ldr	r2, [sp, #28]
 8004c8c:	b982      	cbnz	r2, 8004cb0 <_dtoa_r+0xa00>
 8004c8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004c92:	d029      	beq.n	8004ce8 <_dtoa_r+0xa38>
 8004c94:	9b00      	ldr	r3, [sp, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dd01      	ble.n	8004c9e <_dtoa_r+0x9ee>
 8004c9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004c9e:	9b05      	ldr	r3, [sp, #20]
 8004ca0:	1c5d      	adds	r5, r3, #1
 8004ca2:	f883 8000 	strb.w	r8, [r3]
 8004ca6:	e782      	b.n	8004bae <_dtoa_r+0x8fe>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e7c2      	b.n	8004c32 <_dtoa_r+0x982>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7e3      	b.n	8004c78 <_dtoa_r+0x9c8>
 8004cb0:	9a00      	ldr	r2, [sp, #0]
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	db04      	blt.n	8004cc0 <_dtoa_r+0xa10>
 8004cb6:	d125      	bne.n	8004d04 <_dtoa_r+0xa54>
 8004cb8:	9a06      	ldr	r2, [sp, #24]
 8004cba:	bb1a      	cbnz	r2, 8004d04 <_dtoa_r+0xa54>
 8004cbc:	9a07      	ldr	r2, [sp, #28]
 8004cbe:	bb0a      	cbnz	r2, 8004d04 <_dtoa_r+0xa54>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	ddec      	ble.n	8004c9e <_dtoa_r+0x9ee>
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	9904      	ldr	r1, [sp, #16]
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f000 fa8b 	bl	80051e4 <__lshift>
 8004cce:	4639      	mov	r1, r7
 8004cd0:	9004      	str	r0, [sp, #16]
 8004cd2:	f000 fadb 	bl	800528c <__mcmp>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	dc03      	bgt.n	8004ce2 <_dtoa_r+0xa32>
 8004cda:	d1e0      	bne.n	8004c9e <_dtoa_r+0x9ee>
 8004cdc:	f018 0f01 	tst.w	r8, #1
 8004ce0:	d0dd      	beq.n	8004c9e <_dtoa_r+0x9ee>
 8004ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ce6:	d1d8      	bne.n	8004c9a <_dtoa_r+0x9ea>
 8004ce8:	9b05      	ldr	r3, [sp, #20]
 8004cea:	9a05      	ldr	r2, [sp, #20]
 8004cec:	1c5d      	adds	r5, r3, #1
 8004cee:	2339      	movs	r3, #57	; 0x39
 8004cf0:	7013      	strb	r3, [r2, #0]
 8004cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cf6:	2b39      	cmp	r3, #57	; 0x39
 8004cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8004cfc:	d04f      	beq.n	8004d9e <_dtoa_r+0xaee>
 8004cfe:	3301      	adds	r3, #1
 8004d00:	7013      	strb	r3, [r2, #0]
 8004d02:	e754      	b.n	8004bae <_dtoa_r+0x8fe>
 8004d04:	9a05      	ldr	r2, [sp, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f102 0501 	add.w	r5, r2, #1
 8004d0c:	dd06      	ble.n	8004d1c <_dtoa_r+0xa6c>
 8004d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d12:	d0e9      	beq.n	8004ce8 <_dtoa_r+0xa38>
 8004d14:	f108 0801 	add.w	r8, r8, #1
 8004d18:	9b05      	ldr	r3, [sp, #20]
 8004d1a:	e7c2      	b.n	8004ca2 <_dtoa_r+0x9f2>
 8004d1c:	9a02      	ldr	r2, [sp, #8]
 8004d1e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004d22:	eba5 030b 	sub.w	r3, r5, fp
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d021      	beq.n	8004d6e <_dtoa_r+0xabe>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	220a      	movs	r2, #10
 8004d2e:	9904      	ldr	r1, [sp, #16]
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 f8e1 	bl	8004ef8 <__multadd>
 8004d36:	45b1      	cmp	r9, r6
 8004d38:	9004      	str	r0, [sp, #16]
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f04f 020a 	mov.w	r2, #10
 8004d42:	4649      	mov	r1, r9
 8004d44:	4620      	mov	r0, r4
 8004d46:	d105      	bne.n	8004d54 <_dtoa_r+0xaa4>
 8004d48:	f000 f8d6 	bl	8004ef8 <__multadd>
 8004d4c:	4681      	mov	r9, r0
 8004d4e:	4606      	mov	r6, r0
 8004d50:	9505      	str	r5, [sp, #20]
 8004d52:	e776      	b.n	8004c42 <_dtoa_r+0x992>
 8004d54:	f000 f8d0 	bl	8004ef8 <__multadd>
 8004d58:	4631      	mov	r1, r6
 8004d5a:	4681      	mov	r9, r0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	220a      	movs	r2, #10
 8004d60:	4620      	mov	r0, r4
 8004d62:	f000 f8c9 	bl	8004ef8 <__multadd>
 8004d66:	4606      	mov	r6, r0
 8004d68:	e7f2      	b.n	8004d50 <_dtoa_r+0xaa0>
 8004d6a:	f04f 0900 	mov.w	r9, #0
 8004d6e:	2201      	movs	r2, #1
 8004d70:	9904      	ldr	r1, [sp, #16]
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 fa36 	bl	80051e4 <__lshift>
 8004d78:	4639      	mov	r1, r7
 8004d7a:	9004      	str	r0, [sp, #16]
 8004d7c:	f000 fa86 	bl	800528c <__mcmp>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dcb6      	bgt.n	8004cf2 <_dtoa_r+0xa42>
 8004d84:	d102      	bne.n	8004d8c <_dtoa_r+0xadc>
 8004d86:	f018 0f01 	tst.w	r8, #1
 8004d8a:	d1b2      	bne.n	8004cf2 <_dtoa_r+0xa42>
 8004d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d96:	f47f af0a 	bne.w	8004bae <_dtoa_r+0x8fe>
 8004d9a:	4615      	mov	r5, r2
 8004d9c:	e7f6      	b.n	8004d8c <_dtoa_r+0xadc>
 8004d9e:	4593      	cmp	fp, r2
 8004da0:	d105      	bne.n	8004dae <_dtoa_r+0xafe>
 8004da2:	2331      	movs	r3, #49	; 0x31
 8004da4:	f10a 0a01 	add.w	sl, sl, #1
 8004da8:	f88b 3000 	strb.w	r3, [fp]
 8004dac:	e6ff      	b.n	8004bae <_dtoa_r+0x8fe>
 8004dae:	4615      	mov	r5, r2
 8004db0:	e79f      	b.n	8004cf2 <_dtoa_r+0xa42>
 8004db2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004e18 <_dtoa_r+0xb68>
 8004db6:	e007      	b.n	8004dc8 <_dtoa_r+0xb18>
 8004db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dba:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004e1c <_dtoa_r+0xb6c>
 8004dbe:	b11b      	cbz	r3, 8004dc8 <_dtoa_r+0xb18>
 8004dc0:	f10b 0308 	add.w	r3, fp, #8
 8004dc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4658      	mov	r0, fp
 8004dca:	b017      	add	sp, #92	; 0x5c
 8004dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd0:	9b06      	ldr	r3, [sp, #24]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	f77f ae35 	ble.w	8004a42 <_dtoa_r+0x792>
 8004dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dda:	9307      	str	r3, [sp, #28]
 8004ddc:	e649      	b.n	8004a72 <_dtoa_r+0x7c2>
 8004dde:	9b02      	ldr	r3, [sp, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dc03      	bgt.n	8004dec <_dtoa_r+0xb3c>
 8004de4:	9b06      	ldr	r3, [sp, #24]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	f73f aecc 	bgt.w	8004b84 <_dtoa_r+0x8d4>
 8004dec:	465d      	mov	r5, fp
 8004dee:	4639      	mov	r1, r7
 8004df0:	9804      	ldr	r0, [sp, #16]
 8004df2:	f7ff f9cf 	bl	8004194 <quorem>
 8004df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004dfa:	f805 8b01 	strb.w	r8, [r5], #1
 8004dfe:	9a02      	ldr	r2, [sp, #8]
 8004e00:	eba5 030b 	sub.w	r3, r5, fp
 8004e04:	429a      	cmp	r2, r3
 8004e06:	ddb0      	ble.n	8004d6a <_dtoa_r+0xaba>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	220a      	movs	r2, #10
 8004e0c:	9904      	ldr	r1, [sp, #16]
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f000 f872 	bl	8004ef8 <__multadd>
 8004e14:	9004      	str	r0, [sp, #16]
 8004e16:	e7ea      	b.n	8004dee <_dtoa_r+0xb3e>
 8004e18:	08006b83 	.word	0x08006b83
 8004e1c:	08006c86 	.word	0x08006c86

08004e20 <_localeconv_r>:
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <_localeconv_r+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a18      	ldr	r0, [r3, #32]
 8004e26:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <_localeconv_r+0x18>)
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	bf08      	it	eq
 8004e2c:	4618      	moveq	r0, r3
 8004e2e:	30f0      	adds	r0, #240	; 0xf0
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000064 	.word	0x20000064
 8004e38:	200000c8 	.word	0x200000c8

08004e3c <malloc>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <malloc+0xc>)
 8004e3e:	4601      	mov	r1, r0
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	f000 baf7 	b.w	8005434 <_malloc_r>
 8004e46:	bf00      	nop
 8004e48:	20000064 	.word	0x20000064

08004e4c <memcpy>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	1e43      	subs	r3, r0, #1
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	d100      	bne.n	8004e58 <memcpy+0xc>
 8004e56:	bd10      	pop	{r4, pc}
 8004e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e60:	e7f7      	b.n	8004e52 <memcpy+0x6>

08004e62 <_Balloc>:
 8004e62:	b570      	push	{r4, r5, r6, lr}
 8004e64:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e66:	4604      	mov	r4, r0
 8004e68:	460e      	mov	r6, r1
 8004e6a:	b93d      	cbnz	r5, 8004e7c <_Balloc+0x1a>
 8004e6c:	2010      	movs	r0, #16
 8004e6e:	f7ff ffe5 	bl	8004e3c <malloc>
 8004e72:	6260      	str	r0, [r4, #36]	; 0x24
 8004e74:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e78:	6005      	str	r5, [r0, #0]
 8004e7a:	60c5      	str	r5, [r0, #12]
 8004e7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e7e:	68eb      	ldr	r3, [r5, #12]
 8004e80:	b183      	cbz	r3, 8004ea4 <_Balloc+0x42>
 8004e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e8a:	b9b8      	cbnz	r0, 8004ebc <_Balloc+0x5a>
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f506 	lsl.w	r5, r1, r6
 8004e92:	1d6a      	adds	r2, r5, #5
 8004e94:	0092      	lsls	r2, r2, #2
 8004e96:	4620      	mov	r0, r4
 8004e98:	f000 fabe 	bl	8005418 <_calloc_r>
 8004e9c:	b160      	cbz	r0, 8004eb8 <_Balloc+0x56>
 8004e9e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004ea2:	e00e      	b.n	8004ec2 <_Balloc+0x60>
 8004ea4:	2221      	movs	r2, #33	; 0x21
 8004ea6:	2104      	movs	r1, #4
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 fab5 	bl	8005418 <_calloc_r>
 8004eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb0:	60e8      	str	r0, [r5, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e4      	bne.n	8004e82 <_Balloc+0x20>
 8004eb8:	2000      	movs	r0, #0
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	6802      	ldr	r2, [r0, #0]
 8004ebe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ec8:	e7f7      	b.n	8004eba <_Balloc+0x58>

08004eca <_Bfree>:
 8004eca:	b570      	push	{r4, r5, r6, lr}
 8004ecc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	b93c      	cbnz	r4, 8004ee4 <_Bfree+0x1a>
 8004ed4:	2010      	movs	r0, #16
 8004ed6:	f7ff ffb1 	bl	8004e3c <malloc>
 8004eda:	6270      	str	r0, [r6, #36]	; 0x24
 8004edc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ee0:	6004      	str	r4, [r0, #0]
 8004ee2:	60c4      	str	r4, [r0, #12]
 8004ee4:	b13d      	cbz	r5, 8004ef6 <_Bfree+0x2c>
 8004ee6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ee8:	686a      	ldr	r2, [r5, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ef0:	6029      	str	r1, [r5, #0]
 8004ef2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}

08004ef8 <__multadd>:
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	690d      	ldr	r5, [r1, #16]
 8004efe:	461f      	mov	r7, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	f101 0c14 	add.w	ip, r1, #20
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8dc 0000 	ldr.w	r0, [ip]
 8004f0e:	b281      	uxth	r1, r0
 8004f10:	fb02 7101 	mla	r1, r2, r1, r7
 8004f14:	0c0f      	lsrs	r7, r1, #16
 8004f16:	0c00      	lsrs	r0, r0, #16
 8004f18:	fb02 7000 	mla	r0, r2, r0, r7
 8004f1c:	b289      	uxth	r1, r1
 8004f1e:	3301      	adds	r3, #1
 8004f20:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f24:	429d      	cmp	r5, r3
 8004f26:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8004f2e:	dcec      	bgt.n	8004f0a <__multadd+0x12>
 8004f30:	b1d7      	cbz	r7, 8004f68 <__multadd+0x70>
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	dc12      	bgt.n	8004f5e <__multadd+0x66>
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	3101      	adds	r1, #1
 8004f3e:	f7ff ff90 	bl	8004e62 <_Balloc>
 8004f42:	6922      	ldr	r2, [r4, #16]
 8004f44:	3202      	adds	r2, #2
 8004f46:	f104 010c 	add.w	r1, r4, #12
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	0092      	lsls	r2, r2, #2
 8004f4e:	300c      	adds	r0, #12
 8004f50:	f7ff ff7c 	bl	8004e4c <memcpy>
 8004f54:	4621      	mov	r1, r4
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7ff ffb7 	bl	8004eca <_Bfree>
 8004f5c:	4644      	mov	r4, r8
 8004f5e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f62:	3501      	adds	r5, #1
 8004f64:	615f      	str	r7, [r3, #20]
 8004f66:	6125      	str	r5, [r4, #16]
 8004f68:	4620      	mov	r0, r4
 8004f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f6e <__hi0bits>:
 8004f6e:	0c02      	lsrs	r2, r0, #16
 8004f70:	0412      	lsls	r2, r2, #16
 8004f72:	4603      	mov	r3, r0
 8004f74:	b9b2      	cbnz	r2, 8004fa4 <__hi0bits+0x36>
 8004f76:	0403      	lsls	r3, r0, #16
 8004f78:	2010      	movs	r0, #16
 8004f7a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f7e:	bf04      	itt	eq
 8004f80:	021b      	lsleq	r3, r3, #8
 8004f82:	3008      	addeq	r0, #8
 8004f84:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f88:	bf04      	itt	eq
 8004f8a:	011b      	lsleq	r3, r3, #4
 8004f8c:	3004      	addeq	r0, #4
 8004f8e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f92:	bf04      	itt	eq
 8004f94:	009b      	lsleq	r3, r3, #2
 8004f96:	3002      	addeq	r0, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db06      	blt.n	8004faa <__hi0bits+0x3c>
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	d503      	bpl.n	8004fa8 <__hi0bits+0x3a>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	4770      	bx	lr
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	e7e8      	b.n	8004f7a <__hi0bits+0xc>
 8004fa8:	2020      	movs	r0, #32
 8004faa:	4770      	bx	lr

08004fac <__lo0bits>:
 8004fac:	6803      	ldr	r3, [r0, #0]
 8004fae:	f013 0207 	ands.w	r2, r3, #7
 8004fb2:	4601      	mov	r1, r0
 8004fb4:	d00b      	beq.n	8004fce <__lo0bits+0x22>
 8004fb6:	07da      	lsls	r2, r3, #31
 8004fb8:	d423      	bmi.n	8005002 <__lo0bits+0x56>
 8004fba:	0798      	lsls	r0, r3, #30
 8004fbc:	bf49      	itett	mi
 8004fbe:	085b      	lsrmi	r3, r3, #1
 8004fc0:	089b      	lsrpl	r3, r3, #2
 8004fc2:	2001      	movmi	r0, #1
 8004fc4:	600b      	strmi	r3, [r1, #0]
 8004fc6:	bf5c      	itt	pl
 8004fc8:	600b      	strpl	r3, [r1, #0]
 8004fca:	2002      	movpl	r0, #2
 8004fcc:	4770      	bx	lr
 8004fce:	b298      	uxth	r0, r3
 8004fd0:	b9a8      	cbnz	r0, 8004ffe <__lo0bits+0x52>
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	2010      	movs	r0, #16
 8004fd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004fda:	bf04      	itt	eq
 8004fdc:	0a1b      	lsreq	r3, r3, #8
 8004fde:	3008      	addeq	r0, #8
 8004fe0:	071a      	lsls	r2, r3, #28
 8004fe2:	bf04      	itt	eq
 8004fe4:	091b      	lsreq	r3, r3, #4
 8004fe6:	3004      	addeq	r0, #4
 8004fe8:	079a      	lsls	r2, r3, #30
 8004fea:	bf04      	itt	eq
 8004fec:	089b      	lsreq	r3, r3, #2
 8004fee:	3002      	addeq	r0, #2
 8004ff0:	07da      	lsls	r2, r3, #31
 8004ff2:	d402      	bmi.n	8004ffa <__lo0bits+0x4e>
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	d006      	beq.n	8005006 <__lo0bits+0x5a>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	4770      	bx	lr
 8004ffe:	4610      	mov	r0, r2
 8005000:	e7e9      	b.n	8004fd6 <__lo0bits+0x2a>
 8005002:	2000      	movs	r0, #0
 8005004:	4770      	bx	lr
 8005006:	2020      	movs	r0, #32
 8005008:	4770      	bx	lr

0800500a <__i2b>:
 800500a:	b510      	push	{r4, lr}
 800500c:	460c      	mov	r4, r1
 800500e:	2101      	movs	r1, #1
 8005010:	f7ff ff27 	bl	8004e62 <_Balloc>
 8005014:	2201      	movs	r2, #1
 8005016:	6144      	str	r4, [r0, #20]
 8005018:	6102      	str	r2, [r0, #16]
 800501a:	bd10      	pop	{r4, pc}

0800501c <__multiply>:
 800501c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	4614      	mov	r4, r2
 8005022:	690a      	ldr	r2, [r1, #16]
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	bfb8      	it	lt
 800502a:	460b      	movlt	r3, r1
 800502c:	4688      	mov	r8, r1
 800502e:	bfbc      	itt	lt
 8005030:	46a0      	movlt	r8, r4
 8005032:	461c      	movlt	r4, r3
 8005034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005038:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800503c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005040:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005044:	eb07 0609 	add.w	r6, r7, r9
 8005048:	42b3      	cmp	r3, r6
 800504a:	bfb8      	it	lt
 800504c:	3101      	addlt	r1, #1
 800504e:	f7ff ff08 	bl	8004e62 <_Balloc>
 8005052:	f100 0514 	add.w	r5, r0, #20
 8005056:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800505a:	462b      	mov	r3, r5
 800505c:	2200      	movs	r2, #0
 800505e:	4573      	cmp	r3, lr
 8005060:	d316      	bcc.n	8005090 <__multiply+0x74>
 8005062:	f104 0214 	add.w	r2, r4, #20
 8005066:	f108 0114 	add.w	r1, r8, #20
 800506a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800506e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	9b00      	ldr	r3, [sp, #0]
 8005076:	9201      	str	r2, [sp, #4]
 8005078:	4293      	cmp	r3, r2
 800507a:	d80c      	bhi.n	8005096 <__multiply+0x7a>
 800507c:	2e00      	cmp	r6, #0
 800507e:	dd03      	ble.n	8005088 <__multiply+0x6c>
 8005080:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05d      	beq.n	8005144 <__multiply+0x128>
 8005088:	6106      	str	r6, [r0, #16]
 800508a:	b003      	add	sp, #12
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	f843 2b04 	str.w	r2, [r3], #4
 8005094:	e7e3      	b.n	800505e <__multiply+0x42>
 8005096:	f8b2 b000 	ldrh.w	fp, [r2]
 800509a:	f1bb 0f00 	cmp.w	fp, #0
 800509e:	d023      	beq.n	80050e8 <__multiply+0xcc>
 80050a0:	4689      	mov	r9, r1
 80050a2:	46ac      	mov	ip, r5
 80050a4:	f04f 0800 	mov.w	r8, #0
 80050a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80050ac:	f8dc a000 	ldr.w	sl, [ip]
 80050b0:	b2a3      	uxth	r3, r4
 80050b2:	fa1f fa8a 	uxth.w	sl, sl
 80050b6:	fb0b a303 	mla	r3, fp, r3, sl
 80050ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050be:	f8dc 4000 	ldr.w	r4, [ip]
 80050c2:	4443      	add	r3, r8
 80050c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80050cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80050d0:	46e2      	mov	sl, ip
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80050d8:	454f      	cmp	r7, r9
 80050da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050de:	f84a 3b04 	str.w	r3, [sl], #4
 80050e2:	d82b      	bhi.n	800513c <__multiply+0x120>
 80050e4:	f8cc 8004 	str.w	r8, [ip, #4]
 80050e8:	9b01      	ldr	r3, [sp, #4]
 80050ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80050ee:	3204      	adds	r2, #4
 80050f0:	f1ba 0f00 	cmp.w	sl, #0
 80050f4:	d020      	beq.n	8005138 <__multiply+0x11c>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	4689      	mov	r9, r1
 80050fa:	46a8      	mov	r8, r5
 80050fc:	f04f 0b00 	mov.w	fp, #0
 8005100:	f8b9 c000 	ldrh.w	ip, [r9]
 8005104:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005108:	fb0a 440c 	mla	r4, sl, ip, r4
 800510c:	445c      	add	r4, fp
 800510e:	46c4      	mov	ip, r8
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005116:	f84c 3b04 	str.w	r3, [ip], #4
 800511a:	f859 3b04 	ldr.w	r3, [r9], #4
 800511e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	fb0a b303 	mla	r3, sl, r3, fp
 8005128:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800512c:	454f      	cmp	r7, r9
 800512e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005132:	d805      	bhi.n	8005140 <__multiply+0x124>
 8005134:	f8c8 3004 	str.w	r3, [r8, #4]
 8005138:	3504      	adds	r5, #4
 800513a:	e79b      	b.n	8005074 <__multiply+0x58>
 800513c:	46d4      	mov	ip, sl
 800513e:	e7b3      	b.n	80050a8 <__multiply+0x8c>
 8005140:	46e0      	mov	r8, ip
 8005142:	e7dd      	b.n	8005100 <__multiply+0xe4>
 8005144:	3e01      	subs	r6, #1
 8005146:	e799      	b.n	800507c <__multiply+0x60>

08005148 <__pow5mult>:
 8005148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514c:	4615      	mov	r5, r2
 800514e:	f012 0203 	ands.w	r2, r2, #3
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	d007      	beq.n	8005168 <__pow5mult+0x20>
 8005158:	3a01      	subs	r2, #1
 800515a:	4c21      	ldr	r4, [pc, #132]	; (80051e0 <__pow5mult+0x98>)
 800515c:	2300      	movs	r3, #0
 800515e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005162:	f7ff fec9 	bl	8004ef8 <__multadd>
 8005166:	4607      	mov	r7, r0
 8005168:	10ad      	asrs	r5, r5, #2
 800516a:	d035      	beq.n	80051d8 <__pow5mult+0x90>
 800516c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800516e:	b93c      	cbnz	r4, 8005180 <__pow5mult+0x38>
 8005170:	2010      	movs	r0, #16
 8005172:	f7ff fe63 	bl	8004e3c <malloc>
 8005176:	6270      	str	r0, [r6, #36]	; 0x24
 8005178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800517c:	6004      	str	r4, [r0, #0]
 800517e:	60c4      	str	r4, [r0, #12]
 8005180:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005188:	b94c      	cbnz	r4, 800519e <__pow5mult+0x56>
 800518a:	f240 2171 	movw	r1, #625	; 0x271
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff ff3b 	bl	800500a <__i2b>
 8005194:	2300      	movs	r3, #0
 8005196:	f8c8 0008 	str.w	r0, [r8, #8]
 800519a:	4604      	mov	r4, r0
 800519c:	6003      	str	r3, [r0, #0]
 800519e:	f04f 0800 	mov.w	r8, #0
 80051a2:	07eb      	lsls	r3, r5, #31
 80051a4:	d50a      	bpl.n	80051bc <__pow5mult+0x74>
 80051a6:	4639      	mov	r1, r7
 80051a8:	4622      	mov	r2, r4
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7ff ff36 	bl	800501c <__multiply>
 80051b0:	4639      	mov	r1, r7
 80051b2:	4681      	mov	r9, r0
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff fe88 	bl	8004eca <_Bfree>
 80051ba:	464f      	mov	r7, r9
 80051bc:	106d      	asrs	r5, r5, #1
 80051be:	d00b      	beq.n	80051d8 <__pow5mult+0x90>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	b938      	cbnz	r0, 80051d4 <__pow5mult+0x8c>
 80051c4:	4622      	mov	r2, r4
 80051c6:	4621      	mov	r1, r4
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7ff ff27 	bl	800501c <__multiply>
 80051ce:	6020      	str	r0, [r4, #0]
 80051d0:	f8c0 8000 	str.w	r8, [r0]
 80051d4:	4604      	mov	r4, r0
 80051d6:	e7e4      	b.n	80051a2 <__pow5mult+0x5a>
 80051d8:	4638      	mov	r0, r7
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	bf00      	nop
 80051e0:	08006d88 	.word	0x08006d88

080051e4 <__lshift>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	460c      	mov	r4, r1
 80051ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	6849      	ldr	r1, [r1, #4]
 80051f2:	eb0a 0903 	add.w	r9, sl, r3
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	4607      	mov	r7, r0
 80051fa:	4616      	mov	r6, r2
 80051fc:	f109 0501 	add.w	r5, r9, #1
 8005200:	42ab      	cmp	r3, r5
 8005202:	db32      	blt.n	800526a <__lshift+0x86>
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff fe2c 	bl	8004e62 <_Balloc>
 800520a:	2300      	movs	r3, #0
 800520c:	4680      	mov	r8, r0
 800520e:	f100 0114 	add.w	r1, r0, #20
 8005212:	461a      	mov	r2, r3
 8005214:	4553      	cmp	r3, sl
 8005216:	db2b      	blt.n	8005270 <__lshift+0x8c>
 8005218:	6920      	ldr	r0, [r4, #16]
 800521a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800521e:	f104 0314 	add.w	r3, r4, #20
 8005222:	f016 021f 	ands.w	r2, r6, #31
 8005226:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800522a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800522e:	d025      	beq.n	800527c <__lshift+0x98>
 8005230:	f1c2 0e20 	rsb	lr, r2, #32
 8005234:	2000      	movs	r0, #0
 8005236:	681e      	ldr	r6, [r3, #0]
 8005238:	468a      	mov	sl, r1
 800523a:	4096      	lsls	r6, r2
 800523c:	4330      	orrs	r0, r6
 800523e:	f84a 0b04 	str.w	r0, [sl], #4
 8005242:	f853 0b04 	ldr.w	r0, [r3], #4
 8005246:	459c      	cmp	ip, r3
 8005248:	fa20 f00e 	lsr.w	r0, r0, lr
 800524c:	d814      	bhi.n	8005278 <__lshift+0x94>
 800524e:	6048      	str	r0, [r1, #4]
 8005250:	b108      	cbz	r0, 8005256 <__lshift+0x72>
 8005252:	f109 0502 	add.w	r5, r9, #2
 8005256:	3d01      	subs	r5, #1
 8005258:	4638      	mov	r0, r7
 800525a:	f8c8 5010 	str.w	r5, [r8, #16]
 800525e:	4621      	mov	r1, r4
 8005260:	f7ff fe33 	bl	8004eca <_Bfree>
 8005264:	4640      	mov	r0, r8
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	3101      	adds	r1, #1
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	e7c7      	b.n	8005200 <__lshift+0x1c>
 8005270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005274:	3301      	adds	r3, #1
 8005276:	e7cd      	b.n	8005214 <__lshift+0x30>
 8005278:	4651      	mov	r1, sl
 800527a:	e7dc      	b.n	8005236 <__lshift+0x52>
 800527c:	3904      	subs	r1, #4
 800527e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005282:	f841 2f04 	str.w	r2, [r1, #4]!
 8005286:	459c      	cmp	ip, r3
 8005288:	d8f9      	bhi.n	800527e <__lshift+0x9a>
 800528a:	e7e4      	b.n	8005256 <__lshift+0x72>

0800528c <__mcmp>:
 800528c:	6903      	ldr	r3, [r0, #16]
 800528e:	690a      	ldr	r2, [r1, #16]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	b530      	push	{r4, r5, lr}
 8005294:	d10c      	bne.n	80052b0 <__mcmp+0x24>
 8005296:	0092      	lsls	r2, r2, #2
 8005298:	3014      	adds	r0, #20
 800529a:	3114      	adds	r1, #20
 800529c:	1884      	adds	r4, r0, r2
 800529e:	4411      	add	r1, r2
 80052a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052a8:	4295      	cmp	r5, r2
 80052aa:	d003      	beq.n	80052b4 <__mcmp+0x28>
 80052ac:	d305      	bcc.n	80052ba <__mcmp+0x2e>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd30      	pop	{r4, r5, pc}
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d3f3      	bcc.n	80052a0 <__mcmp+0x14>
 80052b8:	e7fa      	b.n	80052b0 <__mcmp+0x24>
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	e7f7      	b.n	80052b0 <__mcmp+0x24>

080052c0 <__mdiff>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	460d      	mov	r5, r1
 80052c6:	4607      	mov	r7, r0
 80052c8:	4611      	mov	r1, r2
 80052ca:	4628      	mov	r0, r5
 80052cc:	4614      	mov	r4, r2
 80052ce:	f7ff ffdd 	bl	800528c <__mcmp>
 80052d2:	1e06      	subs	r6, r0, #0
 80052d4:	d108      	bne.n	80052e8 <__mdiff+0x28>
 80052d6:	4631      	mov	r1, r6
 80052d8:	4638      	mov	r0, r7
 80052da:	f7ff fdc2 	bl	8004e62 <_Balloc>
 80052de:	2301      	movs	r3, #1
 80052e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	bfa4      	itt	ge
 80052ea:	4623      	movge	r3, r4
 80052ec:	462c      	movge	r4, r5
 80052ee:	4638      	mov	r0, r7
 80052f0:	6861      	ldr	r1, [r4, #4]
 80052f2:	bfa6      	itte	ge
 80052f4:	461d      	movge	r5, r3
 80052f6:	2600      	movge	r6, #0
 80052f8:	2601      	movlt	r6, #1
 80052fa:	f7ff fdb2 	bl	8004e62 <_Balloc>
 80052fe:	692b      	ldr	r3, [r5, #16]
 8005300:	60c6      	str	r6, [r0, #12]
 8005302:	6926      	ldr	r6, [r4, #16]
 8005304:	f105 0914 	add.w	r9, r5, #20
 8005308:	f104 0214 	add.w	r2, r4, #20
 800530c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005310:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005314:	f100 0514 	add.w	r5, r0, #20
 8005318:	f04f 0e00 	mov.w	lr, #0
 800531c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005320:	f859 4b04 	ldr.w	r4, [r9], #4
 8005324:	fa1e f18a 	uxtah	r1, lr, sl
 8005328:	b2a3      	uxth	r3, r4
 800532a:	1ac9      	subs	r1, r1, r3
 800532c:	0c23      	lsrs	r3, r4, #16
 800532e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005332:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005336:	b289      	uxth	r1, r1
 8005338:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800533c:	45c8      	cmp	r8, r9
 800533e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005342:	4694      	mov	ip, r2
 8005344:	f845 3b04 	str.w	r3, [r5], #4
 8005348:	d8e8      	bhi.n	800531c <__mdiff+0x5c>
 800534a:	45bc      	cmp	ip, r7
 800534c:	d304      	bcc.n	8005358 <__mdiff+0x98>
 800534e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005352:	b183      	cbz	r3, 8005376 <__mdiff+0xb6>
 8005354:	6106      	str	r6, [r0, #16]
 8005356:	e7c5      	b.n	80052e4 <__mdiff+0x24>
 8005358:	f85c 1b04 	ldr.w	r1, [ip], #4
 800535c:	fa1e f381 	uxtah	r3, lr, r1
 8005360:	141a      	asrs	r2, r3, #16
 8005362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005370:	f845 3b04 	str.w	r3, [r5], #4
 8005374:	e7e9      	b.n	800534a <__mdiff+0x8a>
 8005376:	3e01      	subs	r6, #1
 8005378:	e7e9      	b.n	800534e <__mdiff+0x8e>

0800537a <__d2b>:
 800537a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800537e:	460e      	mov	r6, r1
 8005380:	2101      	movs	r1, #1
 8005382:	ec59 8b10 	vmov	r8, r9, d0
 8005386:	4615      	mov	r5, r2
 8005388:	f7ff fd6b 	bl	8004e62 <_Balloc>
 800538c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005390:	4607      	mov	r7, r0
 8005392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005396:	bb34      	cbnz	r4, 80053e6 <__d2b+0x6c>
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	f1b8 0300 	subs.w	r3, r8, #0
 800539e:	d027      	beq.n	80053f0 <__d2b+0x76>
 80053a0:	a802      	add	r0, sp, #8
 80053a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80053a6:	f7ff fe01 	bl	8004fac <__lo0bits>
 80053aa:	9900      	ldr	r1, [sp, #0]
 80053ac:	b1f0      	cbz	r0, 80053ec <__d2b+0x72>
 80053ae:	9a01      	ldr	r2, [sp, #4]
 80053b0:	f1c0 0320 	rsb	r3, r0, #32
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	430b      	orrs	r3, r1
 80053ba:	40c2      	lsrs	r2, r0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	9201      	str	r2, [sp, #4]
 80053c0:	9b01      	ldr	r3, [sp, #4]
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bf14      	ite	ne
 80053c8:	2102      	movne	r1, #2
 80053ca:	2101      	moveq	r1, #1
 80053cc:	6139      	str	r1, [r7, #16]
 80053ce:	b1c4      	cbz	r4, 8005402 <__d2b+0x88>
 80053d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80053d4:	4404      	add	r4, r0
 80053d6:	6034      	str	r4, [r6, #0]
 80053d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053dc:	6028      	str	r0, [r5, #0]
 80053de:	4638      	mov	r0, r7
 80053e0:	b003      	add	sp, #12
 80053e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ea:	e7d5      	b.n	8005398 <__d2b+0x1e>
 80053ec:	6179      	str	r1, [r7, #20]
 80053ee:	e7e7      	b.n	80053c0 <__d2b+0x46>
 80053f0:	a801      	add	r0, sp, #4
 80053f2:	f7ff fddb 	bl	8004fac <__lo0bits>
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	2101      	movs	r1, #1
 80053fc:	6139      	str	r1, [r7, #16]
 80053fe:	3020      	adds	r0, #32
 8005400:	e7e5      	b.n	80053ce <__d2b+0x54>
 8005402:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005406:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800540a:	6030      	str	r0, [r6, #0]
 800540c:	6918      	ldr	r0, [r3, #16]
 800540e:	f7ff fdae 	bl	8004f6e <__hi0bits>
 8005412:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005416:	e7e1      	b.n	80053dc <__d2b+0x62>

08005418 <_calloc_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	fb02 f401 	mul.w	r4, r2, r1
 800541e:	4621      	mov	r1, r4
 8005420:	f000 f808 	bl	8005434 <_malloc_r>
 8005424:	4605      	mov	r5, r0
 8005426:	b118      	cbz	r0, 8005430 <_calloc_r+0x18>
 8005428:	4622      	mov	r2, r4
 800542a:	2100      	movs	r1, #0
 800542c:	f7fe fb54 	bl	8003ad8 <memset>
 8005430:	4628      	mov	r0, r5
 8005432:	bd38      	pop	{r3, r4, r5, pc}

08005434 <_malloc_r>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	1ccd      	adds	r5, r1, #3
 8005438:	f025 0503 	bic.w	r5, r5, #3
 800543c:	3508      	adds	r5, #8
 800543e:	2d0c      	cmp	r5, #12
 8005440:	bf38      	it	cc
 8005442:	250c      	movcc	r5, #12
 8005444:	2d00      	cmp	r5, #0
 8005446:	4606      	mov	r6, r0
 8005448:	db01      	blt.n	800544e <_malloc_r+0x1a>
 800544a:	42a9      	cmp	r1, r5
 800544c:	d903      	bls.n	8005456 <_malloc_r+0x22>
 800544e:	230c      	movs	r3, #12
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	2000      	movs	r0, #0
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	f000 f857 	bl	8005508 <__malloc_lock>
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <_malloc_r+0xac>)
 800545c:	6814      	ldr	r4, [r2, #0]
 800545e:	4621      	mov	r1, r4
 8005460:	b991      	cbnz	r1, 8005488 <_malloc_r+0x54>
 8005462:	4c20      	ldr	r4, [pc, #128]	; (80054e4 <_malloc_r+0xb0>)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	b91b      	cbnz	r3, 8005470 <_malloc_r+0x3c>
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f83d 	bl	80054e8 <_sbrk_r>
 800546e:	6020      	str	r0, [r4, #0]
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f000 f838 	bl	80054e8 <_sbrk_r>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d124      	bne.n	80054c6 <_malloc_r+0x92>
 800547c:	230c      	movs	r3, #12
 800547e:	6033      	str	r3, [r6, #0]
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f842 	bl	800550a <__malloc_unlock>
 8005486:	e7e4      	b.n	8005452 <_malloc_r+0x1e>
 8005488:	680b      	ldr	r3, [r1, #0]
 800548a:	1b5b      	subs	r3, r3, r5
 800548c:	d418      	bmi.n	80054c0 <_malloc_r+0x8c>
 800548e:	2b0b      	cmp	r3, #11
 8005490:	d90f      	bls.n	80054b2 <_malloc_r+0x7e>
 8005492:	600b      	str	r3, [r1, #0]
 8005494:	50cd      	str	r5, [r1, r3]
 8005496:	18cc      	adds	r4, r1, r3
 8005498:	4630      	mov	r0, r6
 800549a:	f000 f836 	bl	800550a <__malloc_unlock>
 800549e:	f104 000b 	add.w	r0, r4, #11
 80054a2:	1d23      	adds	r3, r4, #4
 80054a4:	f020 0007 	bic.w	r0, r0, #7
 80054a8:	1ac3      	subs	r3, r0, r3
 80054aa:	d0d3      	beq.n	8005454 <_malloc_r+0x20>
 80054ac:	425a      	negs	r2, r3
 80054ae:	50e2      	str	r2, [r4, r3]
 80054b0:	e7d0      	b.n	8005454 <_malloc_r+0x20>
 80054b2:	428c      	cmp	r4, r1
 80054b4:	684b      	ldr	r3, [r1, #4]
 80054b6:	bf16      	itet	ne
 80054b8:	6063      	strne	r3, [r4, #4]
 80054ba:	6013      	streq	r3, [r2, #0]
 80054bc:	460c      	movne	r4, r1
 80054be:	e7eb      	b.n	8005498 <_malloc_r+0x64>
 80054c0:	460c      	mov	r4, r1
 80054c2:	6849      	ldr	r1, [r1, #4]
 80054c4:	e7cc      	b.n	8005460 <_malloc_r+0x2c>
 80054c6:	1cc4      	adds	r4, r0, #3
 80054c8:	f024 0403 	bic.w	r4, r4, #3
 80054cc:	42a0      	cmp	r0, r4
 80054ce:	d005      	beq.n	80054dc <_malloc_r+0xa8>
 80054d0:	1a21      	subs	r1, r4, r0
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f808 	bl	80054e8 <_sbrk_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d0cf      	beq.n	800547c <_malloc_r+0x48>
 80054dc:	6025      	str	r5, [r4, #0]
 80054de:	e7db      	b.n	8005498 <_malloc_r+0x64>
 80054e0:	2000026c 	.word	0x2000026c
 80054e4:	20000270 	.word	0x20000270

080054e8 <_sbrk_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4c06      	ldr	r4, [pc, #24]	; (8005504 <_sbrk_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4605      	mov	r5, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	f7fc ff50 	bl	8002398 <_sbrk>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_sbrk_r+0x1a>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_sbrk_r+0x1a>
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	200002a0 	.word	0x200002a0

08005508 <__malloc_lock>:
 8005508:	4770      	bx	lr

0800550a <__malloc_unlock>:
 800550a:	4770      	bx	lr

0800550c <atan2>:
 800550c:	f000 b970 	b.w	80057f0 <__ieee754_atan2>

08005510 <pow>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	ed2d 8b04 	vpush	{d8-d9}
 8005518:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80057ec <pow+0x2dc>
 800551c:	b08d      	sub	sp, #52	; 0x34
 800551e:	ec57 6b10 	vmov	r6, r7, d0
 8005522:	ec55 4b11 	vmov	r4, r5, d1
 8005526:	f000 fa43 	bl	80059b0 <__ieee754_pow>
 800552a:	f999 3000 	ldrsb.w	r3, [r9]
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	eeb0 8a40 	vmov.f32	s16, s0
 8005536:	eef0 8a60 	vmov.f32	s17, s1
 800553a:	46c8      	mov	r8, r9
 800553c:	d05f      	beq.n	80055fe <pow+0xee>
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fb fa9d 	bl	8000a84 <__aeabi_dcmpun>
 800554a:	4683      	mov	fp, r0
 800554c:	2800      	cmp	r0, #0
 800554e:	d156      	bne.n	80055fe <pow+0xee>
 8005550:	4632      	mov	r2, r6
 8005552:	463b      	mov	r3, r7
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fb fa94 	bl	8000a84 <__aeabi_dcmpun>
 800555c:	9001      	str	r0, [sp, #4]
 800555e:	b1e8      	cbz	r0, 800559c <pow+0x8c>
 8005560:	2200      	movs	r2, #0
 8005562:	2300      	movs	r3, #0
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fb fa5a 	bl	8000a20 <__aeabi_dcmpeq>
 800556c:	2800      	cmp	r0, #0
 800556e:	d046      	beq.n	80055fe <pow+0xee>
 8005570:	2301      	movs	r3, #1
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	4b96      	ldr	r3, [pc, #600]	; (80057d0 <pow+0x2c0>)
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	4b96      	ldr	r3, [pc, #600]	; (80057d4 <pow+0x2c4>)
 800557a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800557e:	2200      	movs	r2, #0
 8005580:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005584:	9b00      	ldr	r3, [sp, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800558c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005590:	d033      	beq.n	80055fa <pow+0xea>
 8005592:	a802      	add	r0, sp, #8
 8005594:	f001 f97d 	bl	8006892 <matherr>
 8005598:	bb48      	cbnz	r0, 80055ee <pow+0xde>
 800559a:	e05d      	b.n	8005658 <pow+0x148>
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f04f 0b00 	mov.w	fp, #0
 80055a4:	4652      	mov	r2, sl
 80055a6:	465b      	mov	r3, fp
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fb fa38 	bl	8000a20 <__aeabi_dcmpeq>
 80055b0:	ec4b ab19 	vmov	d9, sl, fp
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d054      	beq.n	8005662 <pow+0x152>
 80055b8:	4652      	mov	r2, sl
 80055ba:	465b      	mov	r3, fp
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	f7fb fa2e 	bl	8000a20 <__aeabi_dcmpeq>
 80055c4:	4680      	mov	r8, r0
 80055c6:	b318      	cbz	r0, 8005610 <pow+0x100>
 80055c8:	2301      	movs	r3, #1
 80055ca:	9302      	str	r3, [sp, #8]
 80055cc:	4b80      	ldr	r3, [pc, #512]	; (80057d0 <pow+0x2c0>)
 80055ce:	9303      	str	r3, [sp, #12]
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	930a      	str	r3, [sp, #40]	; 0x28
 80055d4:	9b00      	ldr	r3, [sp, #0]
 80055d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80055de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0d5      	beq.n	8005592 <pow+0x82>
 80055e6:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <pow+0x2c4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	b11b      	cbz	r3, 80055fa <pow+0xea>
 80055f2:	f7fe fa27 	bl	8003a44 <__errno>
 80055f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f8:	6003      	str	r3, [r0, #0]
 80055fa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80055fe:	eeb0 0a48 	vmov.f32	s0, s16
 8005602:	eef0 0a68 	vmov.f32	s1, s17
 8005606:	b00d      	add	sp, #52	; 0x34
 8005608:	ecbd 8b04 	vpop	{d8-d9}
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	ec45 4b10 	vmov	d0, r4, r5
 8005614:	f001 f935 	bl	8006882 <finite>
 8005618:	2800      	cmp	r0, #0
 800561a:	d0f0      	beq.n	80055fe <pow+0xee>
 800561c:	4652      	mov	r2, sl
 800561e:	465b      	mov	r3, fp
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fb fa06 	bl	8000a34 <__aeabi_dcmplt>
 8005628:	2800      	cmp	r0, #0
 800562a:	d0e8      	beq.n	80055fe <pow+0xee>
 800562c:	2301      	movs	r3, #1
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <pow+0x2c0>)
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	f999 3000 	ldrsb.w	r3, [r9]
 8005638:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800563c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005640:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005644:	b913      	cbnz	r3, 800564c <pow+0x13c>
 8005646:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800564a:	e7a2      	b.n	8005592 <pow+0x82>
 800564c:	4962      	ldr	r1, [pc, #392]	; (80057d8 <pow+0x2c8>)
 800564e:	2000      	movs	r0, #0
 8005650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d19c      	bne.n	8005592 <pow+0x82>
 8005658:	f7fe f9f4 	bl	8003a44 <__errno>
 800565c:	2321      	movs	r3, #33	; 0x21
 800565e:	6003      	str	r3, [r0, #0]
 8005660:	e7c5      	b.n	80055ee <pow+0xde>
 8005662:	eeb0 0a48 	vmov.f32	s0, s16
 8005666:	eef0 0a68 	vmov.f32	s1, s17
 800566a:	f001 f90a 	bl	8006882 <finite>
 800566e:	9000      	str	r0, [sp, #0]
 8005670:	2800      	cmp	r0, #0
 8005672:	f040 8081 	bne.w	8005778 <pow+0x268>
 8005676:	ec47 6b10 	vmov	d0, r6, r7
 800567a:	f001 f902 	bl	8006882 <finite>
 800567e:	2800      	cmp	r0, #0
 8005680:	d07a      	beq.n	8005778 <pow+0x268>
 8005682:	ec45 4b10 	vmov	d0, r4, r5
 8005686:	f001 f8fc 	bl	8006882 <finite>
 800568a:	2800      	cmp	r0, #0
 800568c:	d074      	beq.n	8005778 <pow+0x268>
 800568e:	ec53 2b18 	vmov	r2, r3, d8
 8005692:	ee18 0a10 	vmov	r0, s16
 8005696:	4619      	mov	r1, r3
 8005698:	f7fb f9f4 	bl	8000a84 <__aeabi_dcmpun>
 800569c:	f999 9000 	ldrsb.w	r9, [r9]
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <pow+0x2c0>)
 80056a2:	b1b0      	cbz	r0, 80056d2 <pow+0x1c2>
 80056a4:	2201      	movs	r2, #1
 80056a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056aa:	9b00      	ldr	r3, [sp, #0]
 80056ac:	930a      	str	r3, [sp, #40]	; 0x28
 80056ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056b6:	f1b9 0f00 	cmp.w	r9, #0
 80056ba:	d0c4      	beq.n	8005646 <pow+0x136>
 80056bc:	4652      	mov	r2, sl
 80056be:	465b      	mov	r3, fp
 80056c0:	4650      	mov	r0, sl
 80056c2:	4659      	mov	r1, fp
 80056c4:	f7fb f86e 	bl	80007a4 <__aeabi_ddiv>
 80056c8:	f1b9 0f02 	cmp.w	r9, #2
 80056cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056d0:	e7c1      	b.n	8005656 <pow+0x146>
 80056d2:	2203      	movs	r2, #3
 80056d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056d8:	900a      	str	r0, [sp, #40]	; 0x28
 80056da:	4629      	mov	r1, r5
 80056dc:	4620      	mov	r0, r4
 80056de:	2200      	movs	r2, #0
 80056e0:	4b3e      	ldr	r3, [pc, #248]	; (80057dc <pow+0x2cc>)
 80056e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80056ea:	f7fa ff31 	bl	8000550 <__aeabi_dmul>
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	d124      	bne.n	8005742 <pow+0x232>
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <pow+0x2d0>)
 80056fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80056fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005702:	4630      	mov	r0, r6
 8005704:	4652      	mov	r2, sl
 8005706:	465b      	mov	r3, fp
 8005708:	4639      	mov	r1, r7
 800570a:	f7fb f993 	bl	8000a34 <__aeabi_dcmplt>
 800570e:	2800      	cmp	r0, #0
 8005710:	d056      	beq.n	80057c0 <pow+0x2b0>
 8005712:	ec45 4b10 	vmov	d0, r4, r5
 8005716:	f001 f8c7 	bl	80068a8 <rint>
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	ec51 0b10 	vmov	r0, r1, d0
 8005722:	f7fb f97d 	bl	8000a20 <__aeabi_dcmpeq>
 8005726:	b920      	cbnz	r0, 8005732 <pow+0x222>
 8005728:	4b2e      	ldr	r3, [pc, #184]	; (80057e4 <pow+0x2d4>)
 800572a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800572e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005732:	f998 3000 	ldrsb.w	r3, [r8]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d142      	bne.n	80057c0 <pow+0x2b0>
 800573a:	f7fe f983 	bl	8003a44 <__errno>
 800573e:	2322      	movs	r3, #34	; 0x22
 8005740:	e78d      	b.n	800565e <pow+0x14e>
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <pow+0x2d8>)
 8005744:	2200      	movs	r2, #0
 8005746:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800574a:	4630      	mov	r0, r6
 800574c:	4652      	mov	r2, sl
 800574e:	465b      	mov	r3, fp
 8005750:	4639      	mov	r1, r7
 8005752:	f7fb f96f 	bl	8000a34 <__aeabi_dcmplt>
 8005756:	2800      	cmp	r0, #0
 8005758:	d0eb      	beq.n	8005732 <pow+0x222>
 800575a:	ec45 4b10 	vmov	d0, r4, r5
 800575e:	f001 f8a3 	bl	80068a8 <rint>
 8005762:	4622      	mov	r2, r4
 8005764:	462b      	mov	r3, r5
 8005766:	ec51 0b10 	vmov	r0, r1, d0
 800576a:	f7fb f959 	bl	8000a20 <__aeabi_dcmpeq>
 800576e:	2800      	cmp	r0, #0
 8005770:	d1df      	bne.n	8005732 <pow+0x222>
 8005772:	2200      	movs	r2, #0
 8005774:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <pow+0x2c8>)
 8005776:	e7da      	b.n	800572e <pow+0x21e>
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	ec51 0b18 	vmov	r0, r1, d8
 8005780:	f7fb f94e 	bl	8000a20 <__aeabi_dcmpeq>
 8005784:	2800      	cmp	r0, #0
 8005786:	f43f af3a 	beq.w	80055fe <pow+0xee>
 800578a:	ec47 6b10 	vmov	d0, r6, r7
 800578e:	f001 f878 	bl	8006882 <finite>
 8005792:	2800      	cmp	r0, #0
 8005794:	f43f af33 	beq.w	80055fe <pow+0xee>
 8005798:	ec45 4b10 	vmov	d0, r4, r5
 800579c:	f001 f871 	bl	8006882 <finite>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f43f af2c 	beq.w	80055fe <pow+0xee>
 80057a6:	2304      	movs	r3, #4
 80057a8:	9302      	str	r3, [sp, #8]
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <pow+0x2c0>)
 80057ac:	9303      	str	r3, [sp, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	930a      	str	r3, [sp, #40]	; 0x28
 80057b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80057ba:	ed8d 9b08 	vstr	d9, [sp, #32]
 80057be:	e7b8      	b.n	8005732 <pow+0x222>
 80057c0:	a802      	add	r0, sp, #8
 80057c2:	f001 f866 	bl	8006892 <matherr>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f47f af11 	bne.w	80055ee <pow+0xde>
 80057cc:	e7b5      	b.n	800573a <pow+0x22a>
 80057ce:	bf00      	nop
 80057d0:	08006d94 	.word	0x08006d94
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	fff00000 	.word	0xfff00000
 80057dc:	3fe00000 	.word	0x3fe00000
 80057e0:	47efffff 	.word	0x47efffff
 80057e4:	c7efffff 	.word	0xc7efffff
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	20000234 	.word	0x20000234

080057f0 <__ieee754_atan2>:
 80057f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f4:	ec57 6b11 	vmov	r6, r7, d1
 80057f8:	4273      	negs	r3, r6
 80057fa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80057fe:	4333      	orrs	r3, r6
 8005800:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80059a8 <__ieee754_atan2+0x1b8>
 8005804:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005808:	4573      	cmp	r3, lr
 800580a:	ec51 0b10 	vmov	r0, r1, d0
 800580e:	ee11 8a10 	vmov	r8, s2
 8005812:	d80a      	bhi.n	800582a <__ieee754_atan2+0x3a>
 8005814:	4244      	negs	r4, r0
 8005816:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800581a:	4304      	orrs	r4, r0
 800581c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005820:	4574      	cmp	r4, lr
 8005822:	468c      	mov	ip, r1
 8005824:	ee10 9a10 	vmov	r9, s0
 8005828:	d907      	bls.n	800583a <__ieee754_atan2+0x4a>
 800582a:	4632      	mov	r2, r6
 800582c:	463b      	mov	r3, r7
 800582e:	f7fa fcd9 	bl	80001e4 <__adddf3>
 8005832:	ec41 0b10 	vmov	d0, r0, r1
 8005836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800583e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005842:	4334      	orrs	r4, r6
 8005844:	d103      	bne.n	800584e <__ieee754_atan2+0x5e>
 8005846:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584a:	f000 be71 	b.w	8006530 <atan>
 800584e:	17bc      	asrs	r4, r7, #30
 8005850:	f004 0402 	and.w	r4, r4, #2
 8005854:	ea53 0909 	orrs.w	r9, r3, r9
 8005858:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800585c:	d107      	bne.n	800586e <__ieee754_atan2+0x7e>
 800585e:	2c02      	cmp	r4, #2
 8005860:	d073      	beq.n	800594a <__ieee754_atan2+0x15a>
 8005862:	2c03      	cmp	r4, #3
 8005864:	d1e5      	bne.n	8005832 <__ieee754_atan2+0x42>
 8005866:	a13e      	add	r1, pc, #248	; (adr r1, 8005960 <__ieee754_atan2+0x170>)
 8005868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800586c:	e7e1      	b.n	8005832 <__ieee754_atan2+0x42>
 800586e:	ea52 0808 	orrs.w	r8, r2, r8
 8005872:	d106      	bne.n	8005882 <__ieee754_atan2+0x92>
 8005874:	f1bc 0f00 	cmp.w	ip, #0
 8005878:	da6b      	bge.n	8005952 <__ieee754_atan2+0x162>
 800587a:	a13b      	add	r1, pc, #236	; (adr r1, 8005968 <__ieee754_atan2+0x178>)
 800587c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005880:	e7d7      	b.n	8005832 <__ieee754_atan2+0x42>
 8005882:	4572      	cmp	r2, lr
 8005884:	d120      	bne.n	80058c8 <__ieee754_atan2+0xd8>
 8005886:	4293      	cmp	r3, r2
 8005888:	d111      	bne.n	80058ae <__ieee754_atan2+0xbe>
 800588a:	2c02      	cmp	r4, #2
 800588c:	d007      	beq.n	800589e <__ieee754_atan2+0xae>
 800588e:	2c03      	cmp	r4, #3
 8005890:	d009      	beq.n	80058a6 <__ieee754_atan2+0xb6>
 8005892:	2c01      	cmp	r4, #1
 8005894:	d155      	bne.n	8005942 <__ieee754_atan2+0x152>
 8005896:	a136      	add	r1, pc, #216	; (adr r1, 8005970 <__ieee754_atan2+0x180>)
 8005898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800589c:	e7c9      	b.n	8005832 <__ieee754_atan2+0x42>
 800589e:	a136      	add	r1, pc, #216	; (adr r1, 8005978 <__ieee754_atan2+0x188>)
 80058a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058a4:	e7c5      	b.n	8005832 <__ieee754_atan2+0x42>
 80058a6:	a136      	add	r1, pc, #216	; (adr r1, 8005980 <__ieee754_atan2+0x190>)
 80058a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ac:	e7c1      	b.n	8005832 <__ieee754_atan2+0x42>
 80058ae:	2c02      	cmp	r4, #2
 80058b0:	d04b      	beq.n	800594a <__ieee754_atan2+0x15a>
 80058b2:	2c03      	cmp	r4, #3
 80058b4:	d0d7      	beq.n	8005866 <__ieee754_atan2+0x76>
 80058b6:	2c01      	cmp	r4, #1
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	d102      	bne.n	80058c4 <__ieee754_atan2+0xd4>
 80058be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80058c2:	e7b6      	b.n	8005832 <__ieee754_atan2+0x42>
 80058c4:	2100      	movs	r1, #0
 80058c6:	e7b4      	b.n	8005832 <__ieee754_atan2+0x42>
 80058c8:	4573      	cmp	r3, lr
 80058ca:	d0d3      	beq.n	8005874 <__ieee754_atan2+0x84>
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	151b      	asrs	r3, r3, #20
 80058d0:	2b3c      	cmp	r3, #60	; 0x3c
 80058d2:	dc1e      	bgt.n	8005912 <__ieee754_atan2+0x122>
 80058d4:	2f00      	cmp	r7, #0
 80058d6:	da01      	bge.n	80058dc <__ieee754_atan2+0xec>
 80058d8:	333c      	adds	r3, #60	; 0x3c
 80058da:	db1e      	blt.n	800591a <__ieee754_atan2+0x12a>
 80058dc:	4632      	mov	r2, r6
 80058de:	463b      	mov	r3, r7
 80058e0:	f7fa ff60 	bl	80007a4 <__aeabi_ddiv>
 80058e4:	ec41 0b10 	vmov	d0, r0, r1
 80058e8:	f000 ffc2 	bl	8006870 <fabs>
 80058ec:	f000 fe20 	bl	8006530 <atan>
 80058f0:	ec51 0b10 	vmov	r0, r1, d0
 80058f4:	2c01      	cmp	r4, #1
 80058f6:	d013      	beq.n	8005920 <__ieee754_atan2+0x130>
 80058f8:	2c02      	cmp	r4, #2
 80058fa:	d015      	beq.n	8005928 <__ieee754_atan2+0x138>
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d098      	beq.n	8005832 <__ieee754_atan2+0x42>
 8005900:	a321      	add	r3, pc, #132	; (adr r3, 8005988 <__ieee754_atan2+0x198>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	f7fa fc6b 	bl	80001e0 <__aeabi_dsub>
 800590a:	a321      	add	r3, pc, #132	; (adr r3, 8005990 <__ieee754_atan2+0x1a0>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	e014      	b.n	800593c <__ieee754_atan2+0x14c>
 8005912:	a121      	add	r1, pc, #132	; (adr r1, 8005998 <__ieee754_atan2+0x1a8>)
 8005914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005918:	e7ec      	b.n	80058f4 <__ieee754_atan2+0x104>
 800591a:	2000      	movs	r0, #0
 800591c:	2100      	movs	r1, #0
 800591e:	e7e9      	b.n	80058f4 <__ieee754_atan2+0x104>
 8005920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005924:	4619      	mov	r1, r3
 8005926:	e784      	b.n	8005832 <__ieee754_atan2+0x42>
 8005928:	a317      	add	r3, pc, #92	; (adr r3, 8005988 <__ieee754_atan2+0x198>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fc57 	bl	80001e0 <__aeabi_dsub>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	a116      	add	r1, pc, #88	; (adr r1, 8005990 <__ieee754_atan2+0x1a0>)
 8005938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800593c:	f7fa fc50 	bl	80001e0 <__aeabi_dsub>
 8005940:	e777      	b.n	8005832 <__ieee754_atan2+0x42>
 8005942:	a117      	add	r1, pc, #92	; (adr r1, 80059a0 <__ieee754_atan2+0x1b0>)
 8005944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005948:	e773      	b.n	8005832 <__ieee754_atan2+0x42>
 800594a:	a111      	add	r1, pc, #68	; (adr r1, 8005990 <__ieee754_atan2+0x1a0>)
 800594c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005950:	e76f      	b.n	8005832 <__ieee754_atan2+0x42>
 8005952:	a111      	add	r1, pc, #68	; (adr r1, 8005998 <__ieee754_atan2+0x1a8>)
 8005954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005958:	e76b      	b.n	8005832 <__ieee754_atan2+0x42>
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w
 8005960:	54442d18 	.word	0x54442d18
 8005964:	c00921fb 	.word	0xc00921fb
 8005968:	54442d18 	.word	0x54442d18
 800596c:	bff921fb 	.word	0xbff921fb
 8005970:	54442d18 	.word	0x54442d18
 8005974:	bfe921fb 	.word	0xbfe921fb
 8005978:	7f3321d2 	.word	0x7f3321d2
 800597c:	4002d97c 	.word	0x4002d97c
 8005980:	7f3321d2 	.word	0x7f3321d2
 8005984:	c002d97c 	.word	0xc002d97c
 8005988:	33145c07 	.word	0x33145c07
 800598c:	3ca1a626 	.word	0x3ca1a626
 8005990:	54442d18 	.word	0x54442d18
 8005994:	400921fb 	.word	0x400921fb
 8005998:	54442d18 	.word	0x54442d18
 800599c:	3ff921fb 	.word	0x3ff921fb
 80059a0:	54442d18 	.word	0x54442d18
 80059a4:	3fe921fb 	.word	0x3fe921fb
 80059a8:	7ff00000 	.word	0x7ff00000
 80059ac:	00000000 	.word	0x00000000

080059b0 <__ieee754_pow>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	b091      	sub	sp, #68	; 0x44
 80059b6:	ed8d 1b00 	vstr	d1, [sp]
 80059ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80059be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80059c2:	ea58 0302 	orrs.w	r3, r8, r2
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	f000 84be 	beq.w	800634a <__ieee754_pow+0x99a>
 80059ce:	4b7a      	ldr	r3, [pc, #488]	; (8005bb8 <__ieee754_pow+0x208>)
 80059d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80059d4:	429c      	cmp	r4, r3
 80059d6:	463d      	mov	r5, r7
 80059d8:	ee10 aa10 	vmov	sl, s0
 80059dc:	dc09      	bgt.n	80059f2 <__ieee754_pow+0x42>
 80059de:	d103      	bne.n	80059e8 <__ieee754_pow+0x38>
 80059e0:	b93e      	cbnz	r6, 80059f2 <__ieee754_pow+0x42>
 80059e2:	45a0      	cmp	r8, r4
 80059e4:	dc0d      	bgt.n	8005a02 <__ieee754_pow+0x52>
 80059e6:	e001      	b.n	80059ec <__ieee754_pow+0x3c>
 80059e8:	4598      	cmp	r8, r3
 80059ea:	dc02      	bgt.n	80059f2 <__ieee754_pow+0x42>
 80059ec:	4598      	cmp	r8, r3
 80059ee:	d10e      	bne.n	8005a0e <__ieee754_pow+0x5e>
 80059f0:	b16a      	cbz	r2, 8005a0e <__ieee754_pow+0x5e>
 80059f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80059fa:	ea54 030a 	orrs.w	r3, r4, sl
 80059fe:	f000 84a4 	beq.w	800634a <__ieee754_pow+0x99a>
 8005a02:	486e      	ldr	r0, [pc, #440]	; (8005bbc <__ieee754_pow+0x20c>)
 8005a04:	b011      	add	sp, #68	; 0x44
 8005a06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f000 bf45 	b.w	8006898 <nan>
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	da53      	bge.n	8005aba <__ieee754_pow+0x10a>
 8005a12:	4b6b      	ldr	r3, [pc, #428]	; (8005bc0 <__ieee754_pow+0x210>)
 8005a14:	4598      	cmp	r8, r3
 8005a16:	dc4d      	bgt.n	8005ab4 <__ieee754_pow+0x104>
 8005a18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005a1c:	4598      	cmp	r8, r3
 8005a1e:	dd4c      	ble.n	8005aba <__ieee754_pow+0x10a>
 8005a20:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a28:	2b14      	cmp	r3, #20
 8005a2a:	dd26      	ble.n	8005a7a <__ieee754_pow+0xca>
 8005a2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005a30:	fa22 f103 	lsr.w	r1, r2, r3
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d13e      	bne.n	8005aba <__ieee754_pow+0x10a>
 8005a3c:	f001 0101 	and.w	r1, r1, #1
 8005a40:	f1c1 0b02 	rsb	fp, r1, #2
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	d15b      	bne.n	8005b00 <__ieee754_pow+0x150>
 8005a48:	4b5b      	ldr	r3, [pc, #364]	; (8005bb8 <__ieee754_pow+0x208>)
 8005a4a:	4598      	cmp	r8, r3
 8005a4c:	d124      	bne.n	8005a98 <__ieee754_pow+0xe8>
 8005a4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005a52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005a56:	ea53 030a 	orrs.w	r3, r3, sl
 8005a5a:	f000 8476 	beq.w	800634a <__ieee754_pow+0x99a>
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <__ieee754_pow+0x214>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	dd2d      	ble.n	8005ac0 <__ieee754_pow+0x110>
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	f280 8473 	bge.w	8006352 <__ieee754_pow+0x9a2>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	2100      	movs	r1, #0
 8005a70:	ec41 0b10 	vmov	d0, r0, r1
 8005a74:	b011      	add	sp, #68	; 0x44
 8005a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d13e      	bne.n	8005afc <__ieee754_pow+0x14c>
 8005a7e:	f1c3 0314 	rsb	r3, r3, #20
 8005a82:	fa48 f103 	asr.w	r1, r8, r3
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	4543      	cmp	r3, r8
 8005a8c:	f040 8469 	bne.w	8006362 <__ieee754_pow+0x9b2>
 8005a90:	f001 0101 	and.w	r1, r1, #1
 8005a94:	f1c1 0b02 	rsb	fp, r1, #2
 8005a98:	4b4b      	ldr	r3, [pc, #300]	; (8005bc8 <__ieee754_pow+0x218>)
 8005a9a:	4598      	cmp	r8, r3
 8005a9c:	d118      	bne.n	8005ad0 <__ieee754_pow+0x120>
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	f280 845a 	bge.w	800635a <__ieee754_pow+0x9aa>
 8005aa6:	4948      	ldr	r1, [pc, #288]	; (8005bc8 <__ieee754_pow+0x218>)
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	463b      	mov	r3, r7
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7fa fe79 	bl	80007a4 <__aeabi_ddiv>
 8005ab2:	e7dd      	b.n	8005a70 <__ieee754_pow+0xc0>
 8005ab4:	f04f 0b02 	mov.w	fp, #2
 8005ab8:	e7c4      	b.n	8005a44 <__ieee754_pow+0x94>
 8005aba:	f04f 0b00 	mov.w	fp, #0
 8005abe:	e7c1      	b.n	8005a44 <__ieee754_pow+0x94>
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	dad2      	bge.n	8005a6c <__ieee754_pow+0xbc>
 8005ac6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005aca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ace:	e7cf      	b.n	8005a70 <__ieee754_pow+0xc0>
 8005ad0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005ad4:	d106      	bne.n	8005ae4 <__ieee754_pow+0x134>
 8005ad6:	4632      	mov	r2, r6
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	f7fa fd37 	bl	8000550 <__aeabi_dmul>
 8005ae2:	e7c5      	b.n	8005a70 <__ieee754_pow+0xc0>
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <__ieee754_pow+0x21c>)
 8005ae6:	4599      	cmp	r9, r3
 8005ae8:	d10a      	bne.n	8005b00 <__ieee754_pow+0x150>
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	db08      	blt.n	8005b00 <__ieee754_pow+0x150>
 8005aee:	ec47 6b10 	vmov	d0, r6, r7
 8005af2:	b011      	add	sp, #68	; 0x44
 8005af4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	f000 bc68 	b.w	80063cc <__ieee754_sqrt>
 8005afc:	f04f 0b00 	mov.w	fp, #0
 8005b00:	ec47 6b10 	vmov	d0, r6, r7
 8005b04:	f000 feb4 	bl	8006870 <fabs>
 8005b08:	ec51 0b10 	vmov	r0, r1, d0
 8005b0c:	f1ba 0f00 	cmp.w	sl, #0
 8005b10:	d127      	bne.n	8005b62 <__ieee754_pow+0x1b2>
 8005b12:	b124      	cbz	r4, 8005b1e <__ieee754_pow+0x16e>
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <__ieee754_pow+0x218>)
 8005b16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d121      	bne.n	8005b62 <__ieee754_pow+0x1b2>
 8005b1e:	f1b9 0f00 	cmp.w	r9, #0
 8005b22:	da05      	bge.n	8005b30 <__ieee754_pow+0x180>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4927      	ldr	r1, [pc, #156]	; (8005bc8 <__ieee754_pow+0x218>)
 8005b2c:	f7fa fe3a 	bl	80007a4 <__aeabi_ddiv>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da9d      	bge.n	8005a70 <__ieee754_pow+0xc0>
 8005b34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b3c:	ea54 030b 	orrs.w	r3, r4, fp
 8005b40:	d108      	bne.n	8005b54 <__ieee754_pow+0x1a4>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fa fb49 	bl	80001e0 <__aeabi_dsub>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	e7ac      	b.n	8005aae <__ieee754_pow+0xfe>
 8005b54:	f1bb 0f01 	cmp.w	fp, #1
 8005b58:	d18a      	bne.n	8005a70 <__ieee754_pow+0xc0>
 8005b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b5e:	4619      	mov	r1, r3
 8005b60:	e786      	b.n	8005a70 <__ieee754_pow+0xc0>
 8005b62:	0fed      	lsrs	r5, r5, #31
 8005b64:	1e6b      	subs	r3, r5, #1
 8005b66:	930d      	str	r3, [sp, #52]	; 0x34
 8005b68:	ea5b 0303 	orrs.w	r3, fp, r3
 8005b6c:	d102      	bne.n	8005b74 <__ieee754_pow+0x1c4>
 8005b6e:	4632      	mov	r2, r6
 8005b70:	463b      	mov	r3, r7
 8005b72:	e7e8      	b.n	8005b46 <__ieee754_pow+0x196>
 8005b74:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <__ieee754_pow+0x220>)
 8005b76:	4598      	cmp	r8, r3
 8005b78:	f340 80fe 	ble.w	8005d78 <__ieee754_pow+0x3c8>
 8005b7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b80:	4598      	cmp	r8, r3
 8005b82:	dd0a      	ble.n	8005b9a <__ieee754_pow+0x1ea>
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <__ieee754_pow+0x214>)
 8005b86:	429c      	cmp	r4, r3
 8005b88:	dc0d      	bgt.n	8005ba6 <__ieee754_pow+0x1f6>
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	f6bf af6d 	bge.w	8005a6c <__ieee754_pow+0xbc>
 8005b92:	a307      	add	r3, pc, #28	; (adr r3, 8005bb0 <__ieee754_pow+0x200>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	e79f      	b.n	8005ada <__ieee754_pow+0x12a>
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <__ieee754_pow+0x224>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	ddf4      	ble.n	8005b8a <__ieee754_pow+0x1da>
 8005ba0:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <__ieee754_pow+0x218>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	dd18      	ble.n	8005bd8 <__ieee754_pow+0x228>
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	dcf2      	bgt.n	8005b92 <__ieee754_pow+0x1e2>
 8005bac:	e75e      	b.n	8005a6c <__ieee754_pow+0xbc>
 8005bae:	bf00      	nop
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	08006b72 	.word	0x08006b72
 8005bc0:	433fffff 	.word	0x433fffff
 8005bc4:	3fefffff 	.word	0x3fefffff
 8005bc8:	3ff00000 	.word	0x3ff00000
 8005bcc:	3fe00000 	.word	0x3fe00000
 8005bd0:	41e00000 	.word	0x41e00000
 8005bd4:	3feffffe 	.word	0x3feffffe
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <__ieee754_pow+0x3b8>)
 8005bdc:	f7fa fb00 	bl	80001e0 <__aeabi_dsub>
 8005be0:	a355      	add	r3, pc, #340	; (adr r3, 8005d38 <__ieee754_pow+0x388>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	f7fa fcb1 	bl	8000550 <__aeabi_dmul>
 8005bee:	a354      	add	r3, pc, #336	; (adr r3, 8005d40 <__ieee754_pow+0x390>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	460f      	mov	r7, r1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa fca8 	bl	8000550 <__aeabi_dmul>
 8005c00:	2200      	movs	r2, #0
 8005c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c06:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <__ieee754_pow+0x3bc>)
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7fa fca0 	bl	8000550 <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	a14c      	add	r1, pc, #304	; (adr r1, 8005d48 <__ieee754_pow+0x398>)
 8005c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c1a:	f7fa fae1 	bl	80001e0 <__aeabi_dsub>
 8005c1e:	4622      	mov	r2, r4
 8005c20:	462b      	mov	r3, r5
 8005c22:	f7fa fc95 	bl	8000550 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	4950      	ldr	r1, [pc, #320]	; (8005d70 <__ieee754_pow+0x3c0>)
 8005c2e:	f7fa fad7 	bl	80001e0 <__aeabi_dsub>
 8005c32:	4622      	mov	r2, r4
 8005c34:	462b      	mov	r3, r5
 8005c36:	4680      	mov	r8, r0
 8005c38:	4689      	mov	r9, r1
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa fc87 	bl	8000550 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4640      	mov	r0, r8
 8005c48:	4649      	mov	r1, r9
 8005c4a:	f7fa fc81 	bl	8000550 <__aeabi_dmul>
 8005c4e:	a340      	add	r3, pc, #256	; (adr r3, 8005d50 <__ieee754_pow+0x3a0>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fc7c 	bl	8000550 <__aeabi_dmul>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c60:	f7fa fabe 	bl	80001e0 <__aeabi_dsub>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fab8 	bl	80001e4 <__adddf3>
 8005c74:	2000      	movs	r0, #0
 8005c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	f7fa faaf 	bl	80001e0 <__aeabi_dsub>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa faa9 	bl	80001e0 <__aeabi_dsub>
 8005c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c90:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005c94:	4313      	orrs	r3, r2
 8005c96:	4606      	mov	r6, r0
 8005c98:	460f      	mov	r7, r1
 8005c9a:	f040 81eb 	bne.w	8006074 <__ieee754_pow+0x6c4>
 8005c9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005d58 <__ieee754_pow+0x3a8>
 8005ca2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cb4:	f7fa fa94 	bl	80001e0 <__aeabi_dsub>
 8005cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbc:	f7fa fc48 	bl	8000550 <__aeabi_dmul>
 8005cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa fc40 	bl	8000550 <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa fa84 	bl	80001e4 <__adddf3>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	4689      	mov	r9, r1
 8005ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce8:	f7fa fc32 	bl	8000550 <__aeabi_dmul>
 8005cec:	460b      	mov	r3, r1
 8005cee:	4604      	mov	r4, r0
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	e9cd 4500 	strd	r4, r5, [sp]
 8005cfc:	f7fa fa72 	bl	80001e4 <__adddf3>
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <__ieee754_pow+0x3c4>)
 8005d02:	4299      	cmp	r1, r3
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	468b      	mov	fp, r1
 8005d0a:	f340 82f7 	ble.w	80062fc <__ieee754_pow+0x94c>
 8005d0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d16:	4303      	orrs	r3, r0
 8005d18:	f000 81ea 	beq.w	80060f0 <__ieee754_pow+0x740>
 8005d1c:	a310      	add	r3, pc, #64	; (adr r3, 8005d60 <__ieee754_pow+0x3b0>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d26:	f7fa fc13 	bl	8000550 <__aeabi_dmul>
 8005d2a:	a30d      	add	r3, pc, #52	; (adr r3, 8005d60 <__ieee754_pow+0x3b0>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	e6d5      	b.n	8005ade <__ieee754_pow+0x12e>
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	60000000 	.word	0x60000000
 8005d3c:	3ff71547 	.word	0x3ff71547
 8005d40:	f85ddf44 	.word	0xf85ddf44
 8005d44:	3e54ae0b 	.word	0x3e54ae0b
 8005d48:	55555555 	.word	0x55555555
 8005d4c:	3fd55555 	.word	0x3fd55555
 8005d50:	652b82fe 	.word	0x652b82fe
 8005d54:	3ff71547 	.word	0x3ff71547
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	bff00000 	.word	0xbff00000
 8005d60:	8800759c 	.word	0x8800759c
 8005d64:	7e37e43c 	.word	0x7e37e43c
 8005d68:	3ff00000 	.word	0x3ff00000
 8005d6c:	3fd00000 	.word	0x3fd00000
 8005d70:	3fe00000 	.word	0x3fe00000
 8005d74:	408fffff 	.word	0x408fffff
 8005d78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	da05      	bge.n	8005d8e <__ieee754_pow+0x3de>
 8005d82:	4bd3      	ldr	r3, [pc, #844]	; (80060d0 <__ieee754_pow+0x720>)
 8005d84:	f7fa fbe4 	bl	8000550 <__aeabi_dmul>
 8005d88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	1523      	asrs	r3, r4, #20
 8005d90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d94:	4413      	add	r3, r2
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	4bce      	ldr	r3, [pc, #824]	; (80060d4 <__ieee754_pow+0x724>)
 8005d9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005da2:	429c      	cmp	r4, r3
 8005da4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005da8:	dd08      	ble.n	8005dbc <__ieee754_pow+0x40c>
 8005daa:	4bcb      	ldr	r3, [pc, #812]	; (80060d8 <__ieee754_pow+0x728>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	f340 815e 	ble.w	800606e <__ieee754_pow+0x6be>
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	9309      	str	r3, [sp, #36]	; 0x24
 8005db8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005dbc:	f04f 0a00 	mov.w	sl, #0
 8005dc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc8:	4bc4      	ldr	r3, [pc, #784]	; (80060dc <__ieee754_pow+0x72c>)
 8005dca:	4413      	add	r3, r2
 8005dcc:	ed93 7b00 	vldr	d7, [r3]
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	ec53 2b17 	vmov	r2, r3, d7
 8005dd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dde:	f7fa f9ff 	bl	80001e0 <__aeabi_dsub>
 8005de2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dee:	f7fa f9f9 	bl	80001e4 <__adddf3>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	2000      	movs	r0, #0
 8005df8:	49b9      	ldr	r1, [pc, #740]	; (80060e0 <__ieee754_pow+0x730>)
 8005dfa:	f7fa fcd3 	bl	80007a4 <__aeabi_ddiv>
 8005dfe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4630      	mov	r0, r6
 8005e08:	4639      	mov	r1, r7
 8005e0a:	f7fa fba1 	bl	8000550 <__aeabi_dmul>
 8005e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e22:	106d      	asrs	r5, r5, #1
 8005e24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	4614      	mov	r4, r2
 8005e38:	461d      	mov	r5, r3
 8005e3a:	f7fa fb89 	bl	8000550 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa f9cb 	bl	80001e0 <__aeabi_dsub>
 8005e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa f9c3 	bl	80001e0 <__aeabi_dsub>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e62:	f7fa f9bd 	bl	80001e0 <__aeabi_dsub>
 8005e66:	4642      	mov	r2, r8
 8005e68:	464b      	mov	r3, r9
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa f9b3 	bl	80001e0 <__aeabi_dsub>
 8005e7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005e7e:	f7fa fb67 	bl	8000550 <__aeabi_dmul>
 8005e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa fb5f 	bl	8000550 <__aeabi_dmul>
 8005e92:	a37b      	add	r3, pc, #492	; (adr r3, 8006080 <__ieee754_pow+0x6d0>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	f7fa fb58 	bl	8000550 <__aeabi_dmul>
 8005ea0:	a379      	add	r3, pc, #484	; (adr r3, 8006088 <__ieee754_pow+0x6d8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f99d 	bl	80001e4 <__adddf3>
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f7fa fb4f 	bl	8000550 <__aeabi_dmul>
 8005eb2:	a377      	add	r3, pc, #476	; (adr r3, 8006090 <__ieee754_pow+0x6e0>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f994 	bl	80001e4 <__adddf3>
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	f7fa fb46 	bl	8000550 <__aeabi_dmul>
 8005ec4:	a374      	add	r3, pc, #464	; (adr r3, 8006098 <__ieee754_pow+0x6e8>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f98b 	bl	80001e4 <__adddf3>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f7fa fb3d 	bl	8000550 <__aeabi_dmul>
 8005ed6:	a372      	add	r3, pc, #456	; (adr r3, 80060a0 <__ieee754_pow+0x6f0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f982 	bl	80001e4 <__adddf3>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	f7fa fb34 	bl	8000550 <__aeabi_dmul>
 8005ee8:	a36f      	add	r3, pc, #444	; (adr r3, 80060a8 <__ieee754_pow+0x6f8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f979 	bl	80001e4 <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	460f      	mov	r7, r1
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4620      	mov	r0, r4
 8005efc:	4629      	mov	r1, r5
 8005efe:	f7fa fb27 	bl	8000550 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4630      	mov	r0, r6
 8005f08:	4639      	mov	r1, r7
 8005f0a:	f7fa fb21 	bl	8000550 <__aeabi_dmul>
 8005f0e:	4642      	mov	r2, r8
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	464b      	mov	r3, r9
 8005f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1a:	f7fa f963 	bl	80001e4 <__adddf3>
 8005f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f22:	f7fa fb15 	bl	8000550 <__aeabi_dmul>
 8005f26:	4622      	mov	r2, r4
 8005f28:	462b      	mov	r3, r5
 8005f2a:	f7fa f95b 	bl	80001e4 <__adddf3>
 8005f2e:	4642      	mov	r2, r8
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	464b      	mov	r3, r9
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fb09 	bl	8000550 <__aeabi_dmul>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <__ieee754_pow+0x734>)
 8005f42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f46:	f7fa f94d 	bl	80001e4 <__adddf3>
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	f7fa f949 	bl	80001e4 <__adddf3>
 8005f52:	9802      	ldr	r0, [sp, #8]
 8005f54:	460d      	mov	r5, r1
 8005f56:	4604      	mov	r4, r0
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa faf6 	bl	8000550 <__aeabi_dmul>
 8005f64:	2200      	movs	r2, #0
 8005f66:	4680      	mov	r8, r0
 8005f68:	4689      	mov	r9, r1
 8005f6a:	4b5e      	ldr	r3, [pc, #376]	; (80060e4 <__ieee754_pow+0x734>)
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa f936 	bl	80001e0 <__aeabi_dsub>
 8005f74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f78:	f7fa f932 	bl	80001e0 <__aeabi_dsub>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa f92c 	bl	80001e0 <__aeabi_dsub>
 8005f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8c:	f7fa fae0 	bl	8000550 <__aeabi_dmul>
 8005f90:	4622      	mov	r2, r4
 8005f92:	4606      	mov	r6, r0
 8005f94:	460f      	mov	r7, r1
 8005f96:	462b      	mov	r3, r5
 8005f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9c:	f7fa fad8 	bl	8000550 <__aeabi_dmul>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	f7fa f91c 	bl	80001e4 <__adddf3>
 8005fac:	4606      	mov	r6, r0
 8005fae:	460f      	mov	r7, r1
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	f7fa f914 	bl	80001e4 <__adddf3>
 8005fbc:	9802      	ldr	r0, [sp, #8]
 8005fbe:	a33c      	add	r3, pc, #240	; (adr r3, 80060b0 <__ieee754_pow+0x700>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	f7fa fac2 	bl	8000550 <__aeabi_dmul>
 8005fcc:	4642      	mov	r2, r8
 8005fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa f902 	bl	80001e0 <__aeabi_dsub>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa f8fc 	bl	80001e0 <__aeabi_dsub>
 8005fe8:	a333      	add	r3, pc, #204	; (adr r3, 80060b8 <__ieee754_pow+0x708>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa faaf 	bl	8000550 <__aeabi_dmul>
 8005ff2:	a333      	add	r3, pc, #204	; (adr r3, 80060c0 <__ieee754_pow+0x710>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460f      	mov	r7, r1
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa faa6 	bl	8000550 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa f8ea 	bl	80001e4 <__adddf3>
 8006010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006012:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <__ieee754_pow+0x738>)
 8006014:	4413      	add	r3, r2
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f8e3 	bl	80001e4 <__adddf3>
 800601e:	4604      	mov	r4, r0
 8006020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006022:	460d      	mov	r5, r1
 8006024:	f7fa fa2a 	bl	800047c <__aeabi_i2d>
 8006028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800602a:	4b30      	ldr	r3, [pc, #192]	; (80060ec <__ieee754_pow+0x73c>)
 800602c:	4413      	add	r3, r2
 800602e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800603e:	f7fa f8d1 	bl	80001e4 <__adddf3>
 8006042:	4642      	mov	r2, r8
 8006044:	464b      	mov	r3, r9
 8006046:	f7fa f8cd 	bl	80001e4 <__adddf3>
 800604a:	4632      	mov	r2, r6
 800604c:	463b      	mov	r3, r7
 800604e:	f7fa f8c9 	bl	80001e4 <__adddf3>
 8006052:	9802      	ldr	r0, [sp, #8]
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800605c:	f7fa f8c0 	bl	80001e0 <__aeabi_dsub>
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	f7fa f8bc 	bl	80001e0 <__aeabi_dsub>
 8006068:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800606c:	e607      	b.n	8005c7e <__ieee754_pow+0x2ce>
 800606e:	f04f 0a01 	mov.w	sl, #1
 8006072:	e6a5      	b.n	8005dc0 <__ieee754_pow+0x410>
 8006074:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80060c8 <__ieee754_pow+0x718>
 8006078:	e613      	b.n	8005ca2 <__ieee754_pow+0x2f2>
 800607a:	bf00      	nop
 800607c:	f3af 8000 	nop.w
 8006080:	4a454eef 	.word	0x4a454eef
 8006084:	3fca7e28 	.word	0x3fca7e28
 8006088:	93c9db65 	.word	0x93c9db65
 800608c:	3fcd864a 	.word	0x3fcd864a
 8006090:	a91d4101 	.word	0xa91d4101
 8006094:	3fd17460 	.word	0x3fd17460
 8006098:	518f264d 	.word	0x518f264d
 800609c:	3fd55555 	.word	0x3fd55555
 80060a0:	db6fabff 	.word	0xdb6fabff
 80060a4:	3fdb6db6 	.word	0x3fdb6db6
 80060a8:	33333303 	.word	0x33333303
 80060ac:	3fe33333 	.word	0x3fe33333
 80060b0:	e0000000 	.word	0xe0000000
 80060b4:	3feec709 	.word	0x3feec709
 80060b8:	dc3a03fd 	.word	0xdc3a03fd
 80060bc:	3feec709 	.word	0x3feec709
 80060c0:	145b01f5 	.word	0x145b01f5
 80060c4:	be3e2fe0 	.word	0xbe3e2fe0
 80060c8:	00000000 	.word	0x00000000
 80060cc:	3ff00000 	.word	0x3ff00000
 80060d0:	43400000 	.word	0x43400000
 80060d4:	0003988e 	.word	0x0003988e
 80060d8:	000bb679 	.word	0x000bb679
 80060dc:	08006d98 	.word	0x08006d98
 80060e0:	3ff00000 	.word	0x3ff00000
 80060e4:	40080000 	.word	0x40080000
 80060e8:	08006db8 	.word	0x08006db8
 80060ec:	08006da8 	.word	0x08006da8
 80060f0:	a3b4      	add	r3, pc, #720	; (adr r3, 80063c4 <__ieee754_pow+0xa14>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa f873 	bl	80001e4 <__adddf3>
 80060fe:	4622      	mov	r2, r4
 8006100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006104:	462b      	mov	r3, r5
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	f7fa f869 	bl	80001e0 <__aeabi_dsub>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006116:	f7fa fcab 	bl	8000a70 <__aeabi_dcmpgt>
 800611a:	2800      	cmp	r0, #0
 800611c:	f47f adfe 	bne.w	8005d1c <__ieee754_pow+0x36c>
 8006120:	4aa3      	ldr	r2, [pc, #652]	; (80063b0 <__ieee754_pow+0xa00>)
 8006122:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006126:	4293      	cmp	r3, r2
 8006128:	f340 810a 	ble.w	8006340 <__ieee754_pow+0x990>
 800612c:	151b      	asrs	r3, r3, #20
 800612e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006132:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006136:	fa4a f303 	asr.w	r3, sl, r3
 800613a:	445b      	add	r3, fp
 800613c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006140:	4e9c      	ldr	r6, [pc, #624]	; (80063b4 <__ieee754_pow+0xa04>)
 8006142:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006146:	4116      	asrs	r6, r2
 8006148:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800614c:	2000      	movs	r0, #0
 800614e:	ea23 0106 	bic.w	r1, r3, r6
 8006152:	f1c2 0214 	rsb	r2, r2, #20
 8006156:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800615a:	fa4a fa02 	asr.w	sl, sl, r2
 800615e:	f1bb 0f00 	cmp.w	fp, #0
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	bfb8      	it	lt
 800616c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006170:	f7fa f836 	bl	80001e0 <__aeabi_dsub>
 8006174:	e9cd 0100 	strd	r0, r1, [sp]
 8006178:	4642      	mov	r2, r8
 800617a:	464b      	mov	r3, r9
 800617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006180:	f7fa f830 	bl	80001e4 <__adddf3>
 8006184:	2000      	movs	r0, #0
 8006186:	a378      	add	r3, pc, #480	; (adr r3, 8006368 <__ieee754_pow+0x9b8>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	4604      	mov	r4, r0
 800618e:	460d      	mov	r5, r1
 8006190:	f7fa f9de 	bl	8000550 <__aeabi_dmul>
 8006194:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006198:	4606      	mov	r6, r0
 800619a:	460f      	mov	r7, r1
 800619c:	4620      	mov	r0, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	f7fa f81e 	bl	80001e0 <__aeabi_dsub>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4640      	mov	r0, r8
 80061aa:	4649      	mov	r1, r9
 80061ac:	f7fa f818 	bl	80001e0 <__aeabi_dsub>
 80061b0:	a36f      	add	r3, pc, #444	; (adr r3, 8006370 <__ieee754_pow+0x9c0>)
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f7fa f9cb 	bl	8000550 <__aeabi_dmul>
 80061ba:	a36f      	add	r3, pc, #444	; (adr r3, 8006378 <__ieee754_pow+0x9c8>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	4680      	mov	r8, r0
 80061c2:	4689      	mov	r9, r1
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f9c2 	bl	8000550 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4640      	mov	r0, r8
 80061d2:	4649      	mov	r1, r9
 80061d4:	f7fa f806 	bl	80001e4 <__adddf3>
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7f9 fffe 	bl	80001e4 <__adddf3>
 80061e8:	4632      	mov	r2, r6
 80061ea:	463b      	mov	r3, r7
 80061ec:	4680      	mov	r8, r0
 80061ee:	4689      	mov	r9, r1
 80061f0:	f7f9 fff6 	bl	80001e0 <__aeabi_dsub>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4620      	mov	r0, r4
 80061fa:	4629      	mov	r1, r5
 80061fc:	f7f9 fff0 	bl	80001e0 <__aeabi_dsub>
 8006200:	4642      	mov	r2, r8
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	464b      	mov	r3, r9
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa f9a0 	bl	8000550 <__aeabi_dmul>
 8006210:	a35b      	add	r3, pc, #364	; (adr r3, 8006380 <__ieee754_pow+0x9d0>)
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	4604      	mov	r4, r0
 8006218:	460d      	mov	r5, r1
 800621a:	f7fa f999 	bl	8000550 <__aeabi_dmul>
 800621e:	a35a      	add	r3, pc, #360	; (adr r3, 8006388 <__ieee754_pow+0x9d8>)
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7f9 ffdc 	bl	80001e0 <__aeabi_dsub>
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	f7fa f990 	bl	8000550 <__aeabi_dmul>
 8006230:	a357      	add	r3, pc, #348	; (adr r3, 8006390 <__ieee754_pow+0x9e0>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7f9 ffd5 	bl	80001e4 <__adddf3>
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f7fa f987 	bl	8000550 <__aeabi_dmul>
 8006242:	a355      	add	r3, pc, #340	; (adr r3, 8006398 <__ieee754_pow+0x9e8>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7f9 ffca 	bl	80001e0 <__aeabi_dsub>
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	f7fa f97e 	bl	8000550 <__aeabi_dmul>
 8006254:	a352      	add	r3, pc, #328	; (adr r3, 80063a0 <__ieee754_pow+0x9f0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7f9 ffc3 	bl	80001e4 <__adddf3>
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	f7fa f975 	bl	8000550 <__aeabi_dmul>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7f9 ffb7 	bl	80001e0 <__aeabi_dsub>
 8006272:	4604      	mov	r4, r0
 8006274:	460d      	mov	r5, r1
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7fa f967 	bl	8000550 <__aeabi_dmul>
 8006282:	2200      	movs	r2, #0
 8006284:	e9cd 0100 	strd	r0, r1, [sp]
 8006288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7f9 ffa6 	bl	80001e0 <__aeabi_dsub>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629c:	f7fa fa82 	bl	80007a4 <__aeabi_ddiv>
 80062a0:	4632      	mov	r2, r6
 80062a2:	4604      	mov	r4, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	463b      	mov	r3, r7
 80062a8:	4640      	mov	r0, r8
 80062aa:	4649      	mov	r1, r9
 80062ac:	f7fa f950 	bl	8000550 <__aeabi_dmul>
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	f7f9 ff96 	bl	80001e4 <__adddf3>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4620      	mov	r0, r4
 80062be:	4629      	mov	r1, r5
 80062c0:	f7f9 ff8e 	bl	80001e0 <__aeabi_dsub>
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	f7f9 ff8a 	bl	80001e0 <__aeabi_dsub>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	2000      	movs	r0, #0
 80062d2:	4939      	ldr	r1, [pc, #228]	; (80063b8 <__ieee754_pow+0xa08>)
 80062d4:	f7f9 ff84 	bl	80001e0 <__aeabi_dsub>
 80062d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80062dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	da2f      	bge.n	8006346 <__ieee754_pow+0x996>
 80062e6:	4650      	mov	r0, sl
 80062e8:	ec43 2b10 	vmov	d0, r2, r3
 80062ec:	f000 fb60 	bl	80069b0 <scalbn>
 80062f0:	ec51 0b10 	vmov	r0, r1, d0
 80062f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f8:	f7ff bbf1 	b.w	8005ade <__ieee754_pow+0x12e>
 80062fc:	4b2f      	ldr	r3, [pc, #188]	; (80063bc <__ieee754_pow+0xa0c>)
 80062fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006302:	429e      	cmp	r6, r3
 8006304:	f77f af0c 	ble.w	8006120 <__ieee754_pow+0x770>
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <__ieee754_pow+0xa10>)
 800630a:	440b      	add	r3, r1
 800630c:	4303      	orrs	r3, r0
 800630e:	d00b      	beq.n	8006328 <__ieee754_pow+0x978>
 8006310:	a325      	add	r3, pc, #148	; (adr r3, 80063a8 <__ieee754_pow+0x9f8>)
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	f7fa f919 	bl	8000550 <__aeabi_dmul>
 800631e:	a322      	add	r3, pc, #136	; (adr r3, 80063a8 <__ieee754_pow+0x9f8>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7ff bbdb 	b.w	8005ade <__ieee754_pow+0x12e>
 8006328:	4622      	mov	r2, r4
 800632a:	462b      	mov	r3, r5
 800632c:	f7f9 ff58 	bl	80001e0 <__aeabi_dsub>
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f7fa fb92 	bl	8000a5c <__aeabi_dcmpge>
 8006338:	2800      	cmp	r0, #0
 800633a:	f43f aef1 	beq.w	8006120 <__ieee754_pow+0x770>
 800633e:	e7e7      	b.n	8006310 <__ieee754_pow+0x960>
 8006340:	f04f 0a00 	mov.w	sl, #0
 8006344:	e718      	b.n	8006178 <__ieee754_pow+0x7c8>
 8006346:	4621      	mov	r1, r4
 8006348:	e7d4      	b.n	80062f4 <__ieee754_pow+0x944>
 800634a:	2000      	movs	r0, #0
 800634c:	491a      	ldr	r1, [pc, #104]	; (80063b8 <__ieee754_pow+0xa08>)
 800634e:	f7ff bb8f 	b.w	8005a70 <__ieee754_pow+0xc0>
 8006352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006356:	f7ff bb8b 	b.w	8005a70 <__ieee754_pow+0xc0>
 800635a:	4630      	mov	r0, r6
 800635c:	4639      	mov	r1, r7
 800635e:	f7ff bb87 	b.w	8005a70 <__ieee754_pow+0xc0>
 8006362:	4693      	mov	fp, r2
 8006364:	f7ff bb98 	b.w	8005a98 <__ieee754_pow+0xe8>
 8006368:	00000000 	.word	0x00000000
 800636c:	3fe62e43 	.word	0x3fe62e43
 8006370:	fefa39ef 	.word	0xfefa39ef
 8006374:	3fe62e42 	.word	0x3fe62e42
 8006378:	0ca86c39 	.word	0x0ca86c39
 800637c:	be205c61 	.word	0xbe205c61
 8006380:	72bea4d0 	.word	0x72bea4d0
 8006384:	3e663769 	.word	0x3e663769
 8006388:	c5d26bf1 	.word	0xc5d26bf1
 800638c:	3ebbbd41 	.word	0x3ebbbd41
 8006390:	af25de2c 	.word	0xaf25de2c
 8006394:	3f11566a 	.word	0x3f11566a
 8006398:	16bebd93 	.word	0x16bebd93
 800639c:	3f66c16c 	.word	0x3f66c16c
 80063a0:	5555553e 	.word	0x5555553e
 80063a4:	3fc55555 	.word	0x3fc55555
 80063a8:	c2f8f359 	.word	0xc2f8f359
 80063ac:	01a56e1f 	.word	0x01a56e1f
 80063b0:	3fe00000 	.word	0x3fe00000
 80063b4:	000fffff 	.word	0x000fffff
 80063b8:	3ff00000 	.word	0x3ff00000
 80063bc:	4090cbff 	.word	0x4090cbff
 80063c0:	3f6f3400 	.word	0x3f6f3400
 80063c4:	652b82fe 	.word	0x652b82fe
 80063c8:	3c971547 	.word	0x3c971547

080063cc <__ieee754_sqrt>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	4955      	ldr	r1, [pc, #340]	; (8006528 <__ieee754_sqrt+0x15c>)
 80063d2:	ec55 4b10 	vmov	r4, r5, d0
 80063d6:	43a9      	bics	r1, r5
 80063d8:	462b      	mov	r3, r5
 80063da:	462a      	mov	r2, r5
 80063dc:	d112      	bne.n	8006404 <__ieee754_sqrt+0x38>
 80063de:	ee10 2a10 	vmov	r2, s0
 80063e2:	ee10 0a10 	vmov	r0, s0
 80063e6:	4629      	mov	r1, r5
 80063e8:	f7fa f8b2 	bl	8000550 <__aeabi_dmul>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4620      	mov	r0, r4
 80063f2:	4629      	mov	r1, r5
 80063f4:	f7f9 fef6 	bl	80001e4 <__adddf3>
 80063f8:	4604      	mov	r4, r0
 80063fa:	460d      	mov	r5, r1
 80063fc:	ec45 4b10 	vmov	d0, r4, r5
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	2d00      	cmp	r5, #0
 8006406:	ee10 0a10 	vmov	r0, s0
 800640a:	4621      	mov	r1, r4
 800640c:	dc0f      	bgt.n	800642e <__ieee754_sqrt+0x62>
 800640e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006412:	4330      	orrs	r0, r6
 8006414:	d0f2      	beq.n	80063fc <__ieee754_sqrt+0x30>
 8006416:	b155      	cbz	r5, 800642e <__ieee754_sqrt+0x62>
 8006418:	ee10 2a10 	vmov	r2, s0
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7f9 fede 	bl	80001e0 <__aeabi_dsub>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	f7fa f9bc 	bl	80007a4 <__aeabi_ddiv>
 800642c:	e7e4      	b.n	80063f8 <__ieee754_sqrt+0x2c>
 800642e:	151b      	asrs	r3, r3, #20
 8006430:	d073      	beq.n	800651a <__ieee754_sqrt+0x14e>
 8006432:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006436:	07dd      	lsls	r5, r3, #31
 8006438:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800643c:	bf48      	it	mi
 800643e:	0fc8      	lsrmi	r0, r1, #31
 8006440:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006444:	bf44      	itt	mi
 8006446:	0049      	lslmi	r1, r1, #1
 8006448:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800644c:	2500      	movs	r5, #0
 800644e:	1058      	asrs	r0, r3, #1
 8006450:	0fcb      	lsrs	r3, r1, #31
 8006452:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006456:	0049      	lsls	r1, r1, #1
 8006458:	2316      	movs	r3, #22
 800645a:	462c      	mov	r4, r5
 800645c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006460:	19a7      	adds	r7, r4, r6
 8006462:	4297      	cmp	r7, r2
 8006464:	bfde      	ittt	le
 8006466:	19bc      	addle	r4, r7, r6
 8006468:	1bd2      	suble	r2, r2, r7
 800646a:	19ad      	addle	r5, r5, r6
 800646c:	0fcf      	lsrs	r7, r1, #31
 800646e:	3b01      	subs	r3, #1
 8006470:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006474:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006478:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800647c:	d1f0      	bne.n	8006460 <__ieee754_sqrt+0x94>
 800647e:	f04f 0c20 	mov.w	ip, #32
 8006482:	469e      	mov	lr, r3
 8006484:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006488:	42a2      	cmp	r2, r4
 800648a:	eb06 070e 	add.w	r7, r6, lr
 800648e:	dc02      	bgt.n	8006496 <__ieee754_sqrt+0xca>
 8006490:	d112      	bne.n	80064b8 <__ieee754_sqrt+0xec>
 8006492:	428f      	cmp	r7, r1
 8006494:	d810      	bhi.n	80064b8 <__ieee754_sqrt+0xec>
 8006496:	2f00      	cmp	r7, #0
 8006498:	eb07 0e06 	add.w	lr, r7, r6
 800649c:	da42      	bge.n	8006524 <__ieee754_sqrt+0x158>
 800649e:	f1be 0f00 	cmp.w	lr, #0
 80064a2:	db3f      	blt.n	8006524 <__ieee754_sqrt+0x158>
 80064a4:	f104 0801 	add.w	r8, r4, #1
 80064a8:	1b12      	subs	r2, r2, r4
 80064aa:	428f      	cmp	r7, r1
 80064ac:	bf88      	it	hi
 80064ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064b2:	1bc9      	subs	r1, r1, r7
 80064b4:	4433      	add	r3, r6
 80064b6:	4644      	mov	r4, r8
 80064b8:	0052      	lsls	r2, r2, #1
 80064ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80064be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80064c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80064c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064ca:	d1dd      	bne.n	8006488 <__ieee754_sqrt+0xbc>
 80064cc:	430a      	orrs	r2, r1
 80064ce:	d006      	beq.n	80064de <__ieee754_sqrt+0x112>
 80064d0:	1c5c      	adds	r4, r3, #1
 80064d2:	bf13      	iteet	ne
 80064d4:	3301      	addne	r3, #1
 80064d6:	3501      	addeq	r5, #1
 80064d8:	4663      	moveq	r3, ip
 80064da:	f023 0301 	bicne.w	r3, r3, #1
 80064de:	106a      	asrs	r2, r5, #1
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	07e9      	lsls	r1, r5, #31
 80064e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80064e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80064ec:	bf48      	it	mi
 80064ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80064f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80064f6:	461c      	mov	r4, r3
 80064f8:	e780      	b.n	80063fc <__ieee754_sqrt+0x30>
 80064fa:	0aca      	lsrs	r2, r1, #11
 80064fc:	3815      	subs	r0, #21
 80064fe:	0549      	lsls	r1, r1, #21
 8006500:	2a00      	cmp	r2, #0
 8006502:	d0fa      	beq.n	80064fa <__ieee754_sqrt+0x12e>
 8006504:	02d6      	lsls	r6, r2, #11
 8006506:	d50a      	bpl.n	800651e <__ieee754_sqrt+0x152>
 8006508:	f1c3 0420 	rsb	r4, r3, #32
 800650c:	fa21 f404 	lsr.w	r4, r1, r4
 8006510:	1e5d      	subs	r5, r3, #1
 8006512:	4099      	lsls	r1, r3
 8006514:	4322      	orrs	r2, r4
 8006516:	1b43      	subs	r3, r0, r5
 8006518:	e78b      	b.n	8006432 <__ieee754_sqrt+0x66>
 800651a:	4618      	mov	r0, r3
 800651c:	e7f0      	b.n	8006500 <__ieee754_sqrt+0x134>
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	3301      	adds	r3, #1
 8006522:	e7ef      	b.n	8006504 <__ieee754_sqrt+0x138>
 8006524:	46a0      	mov	r8, r4
 8006526:	e7bf      	b.n	80064a8 <__ieee754_sqrt+0xdc>
 8006528:	7ff00000 	.word	0x7ff00000
 800652c:	00000000 	.word	0x00000000

08006530 <atan>:
 8006530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	ec55 4b10 	vmov	r4, r5, d0
 8006538:	4bc3      	ldr	r3, [pc, #780]	; (8006848 <atan+0x318>)
 800653a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800653e:	429e      	cmp	r6, r3
 8006540:	46ab      	mov	fp, r5
 8006542:	dd18      	ble.n	8006576 <atan+0x46>
 8006544:	4bc1      	ldr	r3, [pc, #772]	; (800684c <atan+0x31c>)
 8006546:	429e      	cmp	r6, r3
 8006548:	dc01      	bgt.n	800654e <atan+0x1e>
 800654a:	d109      	bne.n	8006560 <atan+0x30>
 800654c:	b144      	cbz	r4, 8006560 <atan+0x30>
 800654e:	4622      	mov	r2, r4
 8006550:	462b      	mov	r3, r5
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	f7f9 fe45 	bl	80001e4 <__adddf3>
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	e006      	b.n	800656e <atan+0x3e>
 8006560:	f1bb 0f00 	cmp.w	fp, #0
 8006564:	f340 8131 	ble.w	80067ca <atan+0x29a>
 8006568:	a59b      	add	r5, pc, #620	; (adr r5, 80067d8 <atan+0x2a8>)
 800656a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800656e:	ec45 4b10 	vmov	d0, r4, r5
 8006572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	4bb6      	ldr	r3, [pc, #728]	; (8006850 <atan+0x320>)
 8006578:	429e      	cmp	r6, r3
 800657a:	dc14      	bgt.n	80065a6 <atan+0x76>
 800657c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006580:	429e      	cmp	r6, r3
 8006582:	dc0d      	bgt.n	80065a0 <atan+0x70>
 8006584:	a396      	add	r3, pc, #600	; (adr r3, 80067e0 <atan+0x2b0>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	ee10 0a10 	vmov	r0, s0
 800658e:	4629      	mov	r1, r5
 8006590:	f7f9 fe28 	bl	80001e4 <__adddf3>
 8006594:	2200      	movs	r2, #0
 8006596:	4baf      	ldr	r3, [pc, #700]	; (8006854 <atan+0x324>)
 8006598:	f7fa fa6a 	bl	8000a70 <__aeabi_dcmpgt>
 800659c:	2800      	cmp	r0, #0
 800659e:	d1e6      	bne.n	800656e <atan+0x3e>
 80065a0:	f04f 3aff 	mov.w	sl, #4294967295
 80065a4:	e02b      	b.n	80065fe <atan+0xce>
 80065a6:	f000 f963 	bl	8006870 <fabs>
 80065aa:	4bab      	ldr	r3, [pc, #684]	; (8006858 <atan+0x328>)
 80065ac:	429e      	cmp	r6, r3
 80065ae:	ec55 4b10 	vmov	r4, r5, d0
 80065b2:	f300 80bf 	bgt.w	8006734 <atan+0x204>
 80065b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80065ba:	429e      	cmp	r6, r3
 80065bc:	f300 80a0 	bgt.w	8006700 <atan+0x1d0>
 80065c0:	ee10 2a10 	vmov	r2, s0
 80065c4:	ee10 0a10 	vmov	r0, s0
 80065c8:	462b      	mov	r3, r5
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7f9 fe0a 	bl	80001e4 <__adddf3>
 80065d0:	2200      	movs	r2, #0
 80065d2:	4ba0      	ldr	r3, [pc, #640]	; (8006854 <atan+0x324>)
 80065d4:	f7f9 fe04 	bl	80001e0 <__aeabi_dsub>
 80065d8:	2200      	movs	r2, #0
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fdfd 	bl	80001e4 <__adddf3>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7fa f8d7 	bl	80007a4 <__aeabi_ddiv>
 80065f6:	f04f 0a00 	mov.w	sl, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	460d      	mov	r5, r1
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	4620      	mov	r0, r4
 8006604:	4629      	mov	r1, r5
 8006606:	f7f9 ffa3 	bl	8000550 <__aeabi_dmul>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4680      	mov	r8, r0
 8006610:	4689      	mov	r9, r1
 8006612:	f7f9 ff9d 	bl	8000550 <__aeabi_dmul>
 8006616:	a374      	add	r3, pc, #464	; (adr r3, 80067e8 <atan+0x2b8>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	4606      	mov	r6, r0
 800661e:	460f      	mov	r7, r1
 8006620:	f7f9 ff96 	bl	8000550 <__aeabi_dmul>
 8006624:	a372      	add	r3, pc, #456	; (adr r3, 80067f0 <atan+0x2c0>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fddb 	bl	80001e4 <__adddf3>
 800662e:	4632      	mov	r2, r6
 8006630:	463b      	mov	r3, r7
 8006632:	f7f9 ff8d 	bl	8000550 <__aeabi_dmul>
 8006636:	a370      	add	r3, pc, #448	; (adr r3, 80067f8 <atan+0x2c8>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fdd2 	bl	80001e4 <__adddf3>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	f7f9 ff84 	bl	8000550 <__aeabi_dmul>
 8006648:	a36d      	add	r3, pc, #436	; (adr r3, 8006800 <atan+0x2d0>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 fdc9 	bl	80001e4 <__adddf3>
 8006652:	4632      	mov	r2, r6
 8006654:	463b      	mov	r3, r7
 8006656:	f7f9 ff7b 	bl	8000550 <__aeabi_dmul>
 800665a:	a36b      	add	r3, pc, #428	; (adr r3, 8006808 <atan+0x2d8>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 fdc0 	bl	80001e4 <__adddf3>
 8006664:	4632      	mov	r2, r6
 8006666:	463b      	mov	r3, r7
 8006668:	f7f9 ff72 	bl	8000550 <__aeabi_dmul>
 800666c:	a368      	add	r3, pc, #416	; (adr r3, 8006810 <atan+0x2e0>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 fdb7 	bl	80001e4 <__adddf3>
 8006676:	4642      	mov	r2, r8
 8006678:	464b      	mov	r3, r9
 800667a:	f7f9 ff69 	bl	8000550 <__aeabi_dmul>
 800667e:	a366      	add	r3, pc, #408	; (adr r3, 8006818 <atan+0x2e8>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	4680      	mov	r8, r0
 8006686:	4689      	mov	r9, r1
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7f9 ff60 	bl	8000550 <__aeabi_dmul>
 8006690:	a363      	add	r3, pc, #396	; (adr r3, 8006820 <atan+0x2f0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7f9 fda3 	bl	80001e0 <__aeabi_dsub>
 800669a:	4632      	mov	r2, r6
 800669c:	463b      	mov	r3, r7
 800669e:	f7f9 ff57 	bl	8000550 <__aeabi_dmul>
 80066a2:	a361      	add	r3, pc, #388	; (adr r3, 8006828 <atan+0x2f8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 fd9a 	bl	80001e0 <__aeabi_dsub>
 80066ac:	4632      	mov	r2, r6
 80066ae:	463b      	mov	r3, r7
 80066b0:	f7f9 ff4e 	bl	8000550 <__aeabi_dmul>
 80066b4:	a35e      	add	r3, pc, #376	; (adr r3, 8006830 <atan+0x300>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fd91 	bl	80001e0 <__aeabi_dsub>
 80066be:	4632      	mov	r2, r6
 80066c0:	463b      	mov	r3, r7
 80066c2:	f7f9 ff45 	bl	8000550 <__aeabi_dmul>
 80066c6:	a35c      	add	r3, pc, #368	; (adr r3, 8006838 <atan+0x308>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fd88 	bl	80001e0 <__aeabi_dsub>
 80066d0:	4632      	mov	r2, r6
 80066d2:	463b      	mov	r3, r7
 80066d4:	f7f9 ff3c 	bl	8000550 <__aeabi_dmul>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4640      	mov	r0, r8
 80066de:	4649      	mov	r1, r9
 80066e0:	f7f9 fd80 	bl	80001e4 <__adddf3>
 80066e4:	4622      	mov	r2, r4
 80066e6:	462b      	mov	r3, r5
 80066e8:	f7f9 ff32 	bl	8000550 <__aeabi_dmul>
 80066ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	d14b      	bne.n	800678e <atan+0x25e>
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7f9 fd71 	bl	80001e0 <__aeabi_dsub>
 80066fe:	e72c      	b.n	800655a <atan+0x2a>
 8006700:	ee10 0a10 	vmov	r0, s0
 8006704:	2200      	movs	r2, #0
 8006706:	4b53      	ldr	r3, [pc, #332]	; (8006854 <atan+0x324>)
 8006708:	4629      	mov	r1, r5
 800670a:	f7f9 fd69 	bl	80001e0 <__aeabi_dsub>
 800670e:	2200      	movs	r2, #0
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	4b4f      	ldr	r3, [pc, #316]	; (8006854 <atan+0x324>)
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7f9 fd63 	bl	80001e4 <__adddf3>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4630      	mov	r0, r6
 8006724:	4639      	mov	r1, r7
 8006726:	f7fa f83d 	bl	80007a4 <__aeabi_ddiv>
 800672a:	f04f 0a01 	mov.w	sl, #1
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	e764      	b.n	80065fe <atan+0xce>
 8006734:	4b49      	ldr	r3, [pc, #292]	; (800685c <atan+0x32c>)
 8006736:	429e      	cmp	r6, r3
 8006738:	dc1d      	bgt.n	8006776 <atan+0x246>
 800673a:	ee10 0a10 	vmov	r0, s0
 800673e:	2200      	movs	r2, #0
 8006740:	4b47      	ldr	r3, [pc, #284]	; (8006860 <atan+0x330>)
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fd4c 	bl	80001e0 <__aeabi_dsub>
 8006748:	2200      	movs	r2, #0
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	4b44      	ldr	r3, [pc, #272]	; (8006860 <atan+0x330>)
 8006750:	4620      	mov	r0, r4
 8006752:	4629      	mov	r1, r5
 8006754:	f7f9 fefc 	bl	8000550 <__aeabi_dmul>
 8006758:	2200      	movs	r2, #0
 800675a:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <atan+0x324>)
 800675c:	f7f9 fd42 	bl	80001e4 <__adddf3>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7fa f81c 	bl	80007a4 <__aeabi_ddiv>
 800676c:	f04f 0a02 	mov.w	sl, #2
 8006770:	4604      	mov	r4, r0
 8006772:	460d      	mov	r5, r1
 8006774:	e743      	b.n	80065fe <atan+0xce>
 8006776:	462b      	mov	r3, r5
 8006778:	ee10 2a10 	vmov	r2, s0
 800677c:	2000      	movs	r0, #0
 800677e:	4939      	ldr	r1, [pc, #228]	; (8006864 <atan+0x334>)
 8006780:	f7fa f810 	bl	80007a4 <__aeabi_ddiv>
 8006784:	f04f 0a03 	mov.w	sl, #3
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	e737      	b.n	80065fe <atan+0xce>
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <atan+0x338>)
 8006790:	4e36      	ldr	r6, [pc, #216]	; (800686c <atan+0x33c>)
 8006792:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006796:	4456      	add	r6, sl
 8006798:	449a      	add	sl, r3
 800679a:	e9da 2300 	ldrd	r2, r3, [sl]
 800679e:	f7f9 fd1f 	bl	80001e0 <__aeabi_dsub>
 80067a2:	4622      	mov	r2, r4
 80067a4:	462b      	mov	r3, r5
 80067a6:	f7f9 fd1b 	bl	80001e0 <__aeabi_dsub>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80067b2:	f7f9 fd15 	bl	80001e0 <__aeabi_dsub>
 80067b6:	f1bb 0f00 	cmp.w	fp, #0
 80067ba:	4604      	mov	r4, r0
 80067bc:	460d      	mov	r5, r1
 80067be:	f6bf aed6 	bge.w	800656e <atan+0x3e>
 80067c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067c6:	461d      	mov	r5, r3
 80067c8:	e6d1      	b.n	800656e <atan+0x3e>
 80067ca:	a51d      	add	r5, pc, #116	; (adr r5, 8006840 <atan+0x310>)
 80067cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80067d0:	e6cd      	b.n	800656e <atan+0x3e>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	54442d18 	.word	0x54442d18
 80067dc:	3ff921fb 	.word	0x3ff921fb
 80067e0:	8800759c 	.word	0x8800759c
 80067e4:	7e37e43c 	.word	0x7e37e43c
 80067e8:	e322da11 	.word	0xe322da11
 80067ec:	3f90ad3a 	.word	0x3f90ad3a
 80067f0:	24760deb 	.word	0x24760deb
 80067f4:	3fa97b4b 	.word	0x3fa97b4b
 80067f8:	a0d03d51 	.word	0xa0d03d51
 80067fc:	3fb10d66 	.word	0x3fb10d66
 8006800:	c54c206e 	.word	0xc54c206e
 8006804:	3fb745cd 	.word	0x3fb745cd
 8006808:	920083ff 	.word	0x920083ff
 800680c:	3fc24924 	.word	0x3fc24924
 8006810:	5555550d 	.word	0x5555550d
 8006814:	3fd55555 	.word	0x3fd55555
 8006818:	2c6a6c2f 	.word	0x2c6a6c2f
 800681c:	bfa2b444 	.word	0xbfa2b444
 8006820:	52defd9a 	.word	0x52defd9a
 8006824:	3fadde2d 	.word	0x3fadde2d
 8006828:	af749a6d 	.word	0xaf749a6d
 800682c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006830:	fe231671 	.word	0xfe231671
 8006834:	3fbc71c6 	.word	0x3fbc71c6
 8006838:	9998ebc4 	.word	0x9998ebc4
 800683c:	3fc99999 	.word	0x3fc99999
 8006840:	54442d18 	.word	0x54442d18
 8006844:	bff921fb 	.word	0xbff921fb
 8006848:	440fffff 	.word	0x440fffff
 800684c:	7ff00000 	.word	0x7ff00000
 8006850:	3fdbffff 	.word	0x3fdbffff
 8006854:	3ff00000 	.word	0x3ff00000
 8006858:	3ff2ffff 	.word	0x3ff2ffff
 800685c:	40037fff 	.word	0x40037fff
 8006860:	3ff80000 	.word	0x3ff80000
 8006864:	bff00000 	.word	0xbff00000
 8006868:	08006de8 	.word	0x08006de8
 800686c:	08006dc8 	.word	0x08006dc8

08006870 <fabs>:
 8006870:	ec51 0b10 	vmov	r0, r1, d0
 8006874:	ee10 2a10 	vmov	r2, s0
 8006878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800687c:	ec43 2b10 	vmov	d0, r2, r3
 8006880:	4770      	bx	lr

08006882 <finite>:
 8006882:	ee10 3a90 	vmov	r3, s1
 8006886:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800688a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800688e:	0fc0      	lsrs	r0, r0, #31
 8006890:	4770      	bx	lr

08006892 <matherr>:
 8006892:	2000      	movs	r0, #0
 8006894:	4770      	bx	lr
	...

08006898 <nan>:
 8006898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80068a0 <nan+0x8>
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	00000000 	.word	0x00000000
 80068a4:	7ff80000 	.word	0x7ff80000

080068a8 <rint>:
 80068a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068aa:	ec51 0b10 	vmov	r0, r1, d0
 80068ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80068b6:	2e13      	cmp	r6, #19
 80068b8:	460b      	mov	r3, r1
 80068ba:	ee10 4a10 	vmov	r4, s0
 80068be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80068c2:	dc56      	bgt.n	8006972 <rint+0xca>
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	da2b      	bge.n	8006920 <rint+0x78>
 80068c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80068cc:	4302      	orrs	r2, r0
 80068ce:	d023      	beq.n	8006918 <rint+0x70>
 80068d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80068d4:	4302      	orrs	r2, r0
 80068d6:	4254      	negs	r4, r2
 80068d8:	4314      	orrs	r4, r2
 80068da:	0c4b      	lsrs	r3, r1, #17
 80068dc:	0b24      	lsrs	r4, r4, #12
 80068de:	045b      	lsls	r3, r3, #17
 80068e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80068e4:	ea44 0103 	orr.w	r1, r4, r3
 80068e8:	460b      	mov	r3, r1
 80068ea:	492f      	ldr	r1, [pc, #188]	; (80069a8 <rint+0x100>)
 80068ec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80068f0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80068f4:	4602      	mov	r2, r0
 80068f6:	4639      	mov	r1, r7
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7f9 fc73 	bl	80001e4 <__adddf3>
 80068fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006902:	463b      	mov	r3, r7
 8006904:	4632      	mov	r2, r6
 8006906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800690a:	f7f9 fc69 	bl	80001e0 <__aeabi_dsub>
 800690e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006912:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006916:	4639      	mov	r1, r7
 8006918:	ec41 0b10 	vmov	d0, r0, r1
 800691c:	b003      	add	sp, #12
 800691e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <rint+0x104>)
 8006922:	4132      	asrs	r2, r6
 8006924:	ea01 0702 	and.w	r7, r1, r2
 8006928:	4307      	orrs	r7, r0
 800692a:	d0f5      	beq.n	8006918 <rint+0x70>
 800692c:	0852      	lsrs	r2, r2, #1
 800692e:	4011      	ands	r1, r2
 8006930:	430c      	orrs	r4, r1
 8006932:	d00b      	beq.n	800694c <rint+0xa4>
 8006934:	ea23 0202 	bic.w	r2, r3, r2
 8006938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800693c:	2e13      	cmp	r6, #19
 800693e:	fa43 f306 	asr.w	r3, r3, r6
 8006942:	bf0c      	ite	eq
 8006944:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006948:	2400      	movne	r4, #0
 800694a:	4313      	orrs	r3, r2
 800694c:	4916      	ldr	r1, [pc, #88]	; (80069a8 <rint+0x100>)
 800694e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006952:	4622      	mov	r2, r4
 8006954:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006958:	4620      	mov	r0, r4
 800695a:	4629      	mov	r1, r5
 800695c:	f7f9 fc42 	bl	80001e4 <__adddf3>
 8006960:	e9cd 0100 	strd	r0, r1, [sp]
 8006964:	4622      	mov	r2, r4
 8006966:	462b      	mov	r3, r5
 8006968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800696c:	f7f9 fc38 	bl	80001e0 <__aeabi_dsub>
 8006970:	e7d2      	b.n	8006918 <rint+0x70>
 8006972:	2e33      	cmp	r6, #51	; 0x33
 8006974:	dd07      	ble.n	8006986 <rint+0xde>
 8006976:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800697a:	d1cd      	bne.n	8006918 <rint+0x70>
 800697c:	ee10 2a10 	vmov	r2, s0
 8006980:	f7f9 fc30 	bl	80001e4 <__adddf3>
 8006984:	e7c8      	b.n	8006918 <rint+0x70>
 8006986:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	40f2      	lsrs	r2, r6
 8006990:	4210      	tst	r0, r2
 8006992:	d0c1      	beq.n	8006918 <rint+0x70>
 8006994:	0852      	lsrs	r2, r2, #1
 8006996:	4210      	tst	r0, r2
 8006998:	bf1f      	itttt	ne
 800699a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800699e:	ea20 0202 	bicne.w	r2, r0, r2
 80069a2:	4134      	asrne	r4, r6
 80069a4:	4314      	orrne	r4, r2
 80069a6:	e7d1      	b.n	800694c <rint+0xa4>
 80069a8:	08006e08 	.word	0x08006e08
 80069ac:	000fffff 	.word	0x000fffff

080069b0 <scalbn>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	ec55 4b10 	vmov	r4, r5, d0
 80069b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80069ba:	4606      	mov	r6, r0
 80069bc:	462b      	mov	r3, r5
 80069be:	b9aa      	cbnz	r2, 80069ec <scalbn+0x3c>
 80069c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80069c4:	4323      	orrs	r3, r4
 80069c6:	d03b      	beq.n	8006a40 <scalbn+0x90>
 80069c8:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <scalbn+0xe0>)
 80069ca:	4629      	mov	r1, r5
 80069cc:	2200      	movs	r2, #0
 80069ce:	ee10 0a10 	vmov	r0, s0
 80069d2:	f7f9 fdbd 	bl	8000550 <__aeabi_dmul>
 80069d6:	4b2f      	ldr	r3, [pc, #188]	; (8006a94 <scalbn+0xe4>)
 80069d8:	429e      	cmp	r6, r3
 80069da:	4604      	mov	r4, r0
 80069dc:	460d      	mov	r5, r1
 80069de:	da12      	bge.n	8006a06 <scalbn+0x56>
 80069e0:	a327      	add	r3, pc, #156	; (adr r3, 8006a80 <scalbn+0xd0>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fdb3 	bl	8000550 <__aeabi_dmul>
 80069ea:	e009      	b.n	8006a00 <scalbn+0x50>
 80069ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80069f0:	428a      	cmp	r2, r1
 80069f2:	d10c      	bne.n	8006a0e <scalbn+0x5e>
 80069f4:	ee10 2a10 	vmov	r2, s0
 80069f8:	4620      	mov	r0, r4
 80069fa:	4629      	mov	r1, r5
 80069fc:	f7f9 fbf2 	bl	80001e4 <__adddf3>
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	e01c      	b.n	8006a40 <scalbn+0x90>
 8006a06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	3a36      	subs	r2, #54	; 0x36
 8006a0e:	4432      	add	r2, r6
 8006a10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a14:	428a      	cmp	r2, r1
 8006a16:	dd0b      	ble.n	8006a30 <scalbn+0x80>
 8006a18:	ec45 4b11 	vmov	d1, r4, r5
 8006a1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006a88 <scalbn+0xd8>
 8006a20:	f000 f83c 	bl	8006a9c <copysign>
 8006a24:	a318      	add	r3, pc, #96	; (adr r3, 8006a88 <scalbn+0xd8>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	ec51 0b10 	vmov	r0, r1, d0
 8006a2e:	e7da      	b.n	80069e6 <scalbn+0x36>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	dd08      	ble.n	8006a46 <scalbn+0x96>
 8006a34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a40:	ec45 4b10 	vmov	d0, r4, r5
 8006a44:	bd70      	pop	{r4, r5, r6, pc}
 8006a46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006a4a:	da0d      	bge.n	8006a68 <scalbn+0xb8>
 8006a4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006a50:	429e      	cmp	r6, r3
 8006a52:	ec45 4b11 	vmov	d1, r4, r5
 8006a56:	dce1      	bgt.n	8006a1c <scalbn+0x6c>
 8006a58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006a80 <scalbn+0xd0>
 8006a5c:	f000 f81e 	bl	8006a9c <copysign>
 8006a60:	a307      	add	r3, pc, #28	; (adr r3, 8006a80 <scalbn+0xd0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	e7e0      	b.n	8006a2a <scalbn+0x7a>
 8006a68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a6c:	3236      	adds	r2, #54	; 0x36
 8006a6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a76:	4620      	mov	r0, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <scalbn+0xe8>)
 8006a7e:	e7b2      	b.n	80069e6 <scalbn+0x36>
 8006a80:	c2f8f359 	.word	0xc2f8f359
 8006a84:	01a56e1f 	.word	0x01a56e1f
 8006a88:	8800759c 	.word	0x8800759c
 8006a8c:	7e37e43c 	.word	0x7e37e43c
 8006a90:	43500000 	.word	0x43500000
 8006a94:	ffff3cb0 	.word	0xffff3cb0
 8006a98:	3c900000 	.word	0x3c900000

08006a9c <copysign>:
 8006a9c:	ec51 0b10 	vmov	r0, r1, d0
 8006aa0:	ee11 0a90 	vmov	r0, s3
 8006aa4:	ee10 2a10 	vmov	r2, s0
 8006aa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006aac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006ab0:	ea41 0300 	orr.w	r3, r1, r0
 8006ab4:	ec43 2b10 	vmov	d0, r2, r3
 8006ab8:	4770      	bx	lr
	...

08006abc <_init>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_fini>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr
